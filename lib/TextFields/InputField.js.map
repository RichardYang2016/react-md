{"version":3,"sources":["../../src/js/TextFields/InputField.js"],"names":["InputField","getField","props","rows","_field","getValue","value","focus","blur","_setField","field","className","label","customSize","fullWidth","type","passwordVisible","block","inlineIndicator","maxRows","multiline","Component","ref","disabled","text","propTypes","id","oneOfType","string","number","style","object","placeholder","bool","node"],"mappings":"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","file":"InputField.js","sourcesContent":["import { PureComponent, createElement } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\n\r\nimport themeColors from '../utils/themeColors';\r\nimport TextArea from './TextArea';\r\n\r\n/**\r\n * This component either renders a base `input` tag or the `TextArea` component.\r\n */\r\nexport default class InputField extends PureComponent {\r\n  static propTypes = {\r\n    id: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.number,\r\n    ]),\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    type: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    block: PropTypes.bool,\r\n    disabled: PropTypes.bool,\r\n    rows: PropTypes.number,\r\n    maxRows: PropTypes.number,\r\n    label: PropTypes.node,\r\n    fullWidth: PropTypes.bool,\r\n    customSize: PropTypes.string,\r\n    passwordVisible: PropTypes.bool,\r\n    inlineIndicator: PropTypes.bool,\r\n  };\r\n\r\n  getField = () => { // eslint-disable-line arrow-body-style\r\n    return typeof this.props.rows === 'undefined'\r\n      ? this._field\r\n      : this._field.getField();\r\n  };\r\n\r\n  getValue = () => {\r\n    if (typeof this.props.rows === 'undefined') {\r\n      return this._field.value;\r\n    }\r\n\r\n    return this._field.getValue();\r\n  };\r\n\r\n  focus = () => {\r\n    this._field.focus();\r\n  };\r\n\r\n  blur = () => {\r\n    this._field.blur();\r\n  };\r\n\r\n  _setField = (field) => {\r\n    this._field = field;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      className,\r\n      rows,\r\n      label,\r\n      customSize,\r\n      fullWidth,\r\n      type,\r\n      passwordVisible,\r\n      block,\r\n      inlineIndicator,\r\n      maxRows,\r\n      ...props\r\n    } = this.props;\r\n\r\n    const multiline = typeof rows !== 'undefined';\r\n    const Component = multiline ? TextArea : 'input';\r\n    if (!multiline) {\r\n      props.type = passwordVisible ? 'text' : type;\r\n    } else {\r\n      props.label = label;\r\n      props.block = block;\r\n      props.maxRows = maxRows;\r\n    }\r\n\r\n    return createElement(Component, {\r\n      ...props,\r\n      rows,\r\n      ref: this._setField,\r\n      className: cn('md-text-field', {\r\n        'md-text-field--inline-indicator': inlineIndicator || (!multiline && type === 'password'),\r\n        'md-text-field--multiline': multiline,\r\n        'md-text-field--margin': !block && !multiline && !label,\r\n        'md-text-field--floating-margin': !block && !multiline && label,\r\n        [`md-text-field--${customSize}`]: customSize,\r\n        'md-full-width': fullWidth,\r\n      }, themeColors({ disabled: props.disabled, text: !props.disabled }, className)),\r\n    });\r\n  }\r\n}\r\n"]}