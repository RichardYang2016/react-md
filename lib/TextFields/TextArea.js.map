{"version":3,"sources":["../../src/js/TextFields/TextArea.js"],"names":["TextArea","state","height","getField","_field","getValue","value","focus","blur","_calcRowHeight","props","rows","style","rowHeight","offsetHeight","_setMask","mask","_mask","_setField","field","_handleResize","_rowHeight","_syncHeightWithMask","undefined","scrollHeight","maxRows","Math","min","max","setState","_handleChange","e","target","onChange","nextProps","defaultValue","className","label","block","Object","assign","propTypes","id","string","object","number","isRequired","func","floatingLabel","bool","node"],"mappings":"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","file":"TextArea.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport ResizeObserver from '../Helpers/ResizeObserver';\r\n\r\n/**\r\n * The `TextArea` component is used to allow a dynamic height for the\r\n * `textarea`. The height will keep on changing until the maxRows prop\r\n * is met or infinitely if it does not exist, or is 0.\r\n */\r\nexport default class TextArea extends PureComponent {\r\n  static propTypes = {\r\n    id: PropTypes.string,\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    rows: PropTypes.number.isRequired,\r\n    maxRows: PropTypes.number,\r\n    onChange: PropTypes.func,\r\n    defaultValue: PropTypes.string,\r\n    floatingLabel: PropTypes.bool,\r\n    value: PropTypes.string,\r\n    block: PropTypes.bool,\r\n    label: PropTypes.node,\r\n  };\r\n\r\n  state = { height: null };\r\n\r\n  componentDidMount() {\r\n    this._rowHeight = this._calcRowHeight();\r\n    this._syncHeightWithMask();\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.rows !== nextProps.rows) {\r\n      this._rowHeight = this._calcRowHeight(nextProps);\r\n    }\r\n\r\n    if (this.props.value !== nextProps.value || this.props.maxRows !== nextProps.maxRows) {\r\n      this._syncHeightWithMask(nextProps.value);\r\n    }\r\n  }\r\n\r\n  getField = () => this._field;\r\n\r\n  getValue = () => this._field.value;\r\n\r\n  focus = () => {\r\n    this._field.focus();\r\n  };\r\n\r\n  blur = () => {\r\n    this._field.blur();\r\n  };\r\n\r\n  _calcRowHeight = ({ rows } = this.props) => {\r\n    if (!this._field) {\r\n      return 19;\r\n    }\r\n\r\n    const height = this._field.style.height;\r\n    this._field.style.height = 'auto';\r\n    const rowHeight = this._field.offsetHeight / rows;\r\n    this._field.style.height = height;\r\n    return rowHeight;\r\n  };\r\n\r\n  _setMask = (mask) => {\r\n    this._mask = mask;\r\n  };\r\n\r\n  _setField = (field) => {\r\n    this._field = field;\r\n  };\r\n\r\n  _handleResize = () => {\r\n    this._rowHeight = this._calcRowHeight();\r\n    this._syncHeightWithMask();\r\n  };\r\n\r\n  _syncHeightWithMask = (value) => {\r\n    // The mask is always null in snapshot teseting\r\n    if (!this._mask) {\r\n      return;\r\n    }\r\n\r\n    if (value !== undefined) {\r\n      this._mask.value = value;\r\n    }\r\n\r\n    let height = this._mask.scrollHeight;\r\n    if (height === undefined) {\r\n      return;\r\n    }\r\n\r\n    const { rows, maxRows } = this.props;\r\n    if (maxRows && maxRows > 0) {\r\n      height = Math.min(height, this._rowHeight * maxRows);\r\n    }\r\n\r\n    height = Math.max(this._rowHeight * rows, height);\r\n    this.setState({ height });\r\n  };\r\n\r\n  _handleChange = (e) => {\r\n    this._syncHeightWithMask(e.target.value, e);\r\n\r\n    if (this.props.onChange) {\r\n      this.props.onChange(e);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { height } = this.state;\r\n\r\n    const {\r\n      style,\r\n      defaultValue,\r\n      value,\r\n      className,\r\n      label,\r\n      block,\r\n      /* eslint-disable no-unused-vars */\r\n      maxRows,\r\n      onChange,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    return (\r\n      <div\r\n        style={{ height: height && height + 5 }}\r\n        className={cn('md-text-field-multiline-container', {\r\n          'md-text-field--margin': !label && !block,\r\n          'md-text-field--floating-margin': label && !block,\r\n        })}\r\n      >\r\n        <ResizeObserver watchWidth onResize={this._handleResize} />\r\n        <textarea\r\n          ref={this._setMask}\r\n          className={cn(className, 'md-text-field--multiline-mask')}\r\n          readOnly\r\n          rows={props.rows}\r\n          tabIndex={-1}\r\n          style={style}\r\n          defaultValue={defaultValue}\r\n          aria-hidden\r\n          value={value}\r\n        />\r\n        <textarea\r\n          {...props}\r\n          ref={this._setField}\r\n          style={Object.assign({}, style, { height })}\r\n          className={className}\r\n          defaultValue={defaultValue}\r\n          value={value}\r\n          onChange={this._handleChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}