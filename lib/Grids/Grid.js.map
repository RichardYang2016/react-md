{"version":3,"sources":["../../src/js/Grids/Grid.js"],"names":["DIFF_KEYS","Grid","props","className","stacked","noSpacing","gutter","spacing","container","state","getClassName","setState","nextProps","some","key","style","Component","component","children","propClassName","propTypes","object","string","oneOfType","func","node","bool","number","defaultProps"],"mappings":"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","file":"Grid.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport bem from '../utils/bem';\r\nimport isValued from '../utils/isValued';\r\n\r\nconst DIFF_KEYS = [\r\n  'className',\r\n  'stacked',\r\n  'container',\r\n  'noSpacing',\r\n  'gutter',\r\n  'spacing',\r\n];\r\n\r\nexport default class Grid extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply to the Grid component. This will only be applied\r\n     * if the `children` prop is not a callback function.\r\n     *\r\n     * @see {@link #children}\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the Grid component. This will only be applied\r\n     * if the `children` prop is not a callback function.\r\n     *\r\n     * @see {@link #children}\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * The component to render the Grid as. This should probably not be used as much\r\n     * as the `children` callback function.\r\n     */\r\n    component: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.func,\r\n    ]),\r\n\r\n    /**\r\n     * The children can either be renderable React elements or a callback function\r\n     * that accepts the style and className props to apply so that the styles can\r\n     * be manually added to whichever component.\r\n     */\r\n    children: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.node,\r\n    ]),\r\n\r\n    /**\r\n     * An optional container name to apply to the Grid. This should be the same name as provided\r\n     * to the [react-md-make-grid-container](/components/grids?tab=2#mixin-react-md-make-grid-container) mixin.\r\n     */\r\n    container: PropTypes.string,\r\n\r\n    /**\r\n     * Boolean if the grid should be placed vertically instead of horizontally.\r\n     */\r\n    stacked: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if all the gutters and spacing should be removed from the grid.\r\n     */\r\n    noSpacing: PropTypes.bool,\r\n\r\n    /**\r\n     * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\r\n     * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className\r\n     */\r\n    gutter: PropTypes.number,\r\n\r\n    /**\r\n     * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\r\n     * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className\r\n     */\r\n    spacing: PropTypes.number,\r\n  };\r\n\r\n  static defaultProps = {\r\n    component: 'div',\r\n    stacked: false,\r\n    noSpacing: false,\r\n  };\r\n\r\n  /**\r\n   * A utility function to get the grid's className based on the Grid's props. This is\r\n   * used behind the scenes to merge and create the className for the grid.\r\n   *\r\n   * ### Example:\r\n   * ```js\r\n   * <div className={Grid.getClassName()}>A base grid</div>\r\n   * <div className={Grid.getClassName({ stacked: true })}>A stacked Grid</div>\r\n   * ```\r\n   *\r\n   * @param {Object=} props - This should be an object of the `Grid`'s props. It\r\n   *    will extract the needed keys and generate the className.\r\n   * @return {String} the full className to use for the grid\r\n   */\r\n  static getClassName(props = {}) {\r\n    const { className, stacked, noSpacing, gutter, spacing, container } = props;\r\n    return bem('md-grid', {\r\n      'stacked': stacked,\r\n      'no-spacing': noSpacing,\r\n      [`${gutter}-${spacing}`]: isValued(gutter) && isValued(spacing),\r\n      [container]: container,\r\n    }, className);\r\n  }\r\n\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = { className: Grid.getClassName(props) };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({ className: Grid.getClassName(this.props) });\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (DIFF_KEYS.some(key => this.props[key] !== nextProps[key])) {\r\n      this.setState({ className: Grid.getClassName(nextProps) });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { className } = this.state;\r\n    const {\r\n      style,\r\n      component: Component,\r\n      children,\r\n      /* eslint-disable no-unused-vars */\r\n      className: propClassName,\r\n      container,\r\n      stacked,\r\n      noSpacing,\r\n      gutter,\r\n      spacing,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    if (typeof children === 'function') {\r\n      return children({ style, className });\r\n    }\r\n\r\n    return <Component {...props} style={style} className={className}>{children}</Component>;\r\n  }\r\n}\r\n"]}