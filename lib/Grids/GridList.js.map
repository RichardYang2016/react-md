{"version":3,"sources":["../../src/js/Grids/GridList.js"],"names":["DIFF_KEYS","GridList","props","className","cellClassName","remaining","getClassName","state","getClassNames","setState","nextProps","some","key","style","cellStyle","Component","component","children","propClassName","propCellClassName","container","noSpacing","stacked","gutter","spacing","align","position","size","offset","order","phoneSize","phoneOrder","phoneOffset","phoneHidden","tabletSize","tabletOrder","tabletOffset","tabletHidden","desktopSize","desktopOrder","desktopOffset","desktopHidden","Children","map","child","childStyle","cloneElement","propTypes","object","string","oneOfType","func","node","bool","number","oneOf","defaultProps"],"mappings":"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","file":"GridList.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport cn from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Grid from './Grid';\r\nimport Cell from './Cell';\r\n\r\nconst DIFF_KEYS = [\r\n  'className',\r\n  'cellClassName',\r\n  'stacked',\r\n  'container',\r\n  'noSpacing',\r\n  'gutter',\r\n  'spacing',\r\n  'align',\r\n  'position',\r\n  'size',\r\n  'offset',\r\n  'order',\r\n  'phoneSize',\r\n  'phoneOrder',\r\n  'phoneOffset',\r\n  'phoneHidden',\r\n  'tabletSize',\r\n  'tabletOrder',\r\n  'tabletOffset',\r\n  'tabletHidden',\r\n  'desktopSize',\r\n  'desktopOrder',\r\n  'desktopOffset',\r\n  'desktopHidden',\r\n];\r\n\r\nexport default class GridList extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply to the Grid component. This will only be applied\r\n     * if the `children` prop is not a callback function.\r\n     *\r\n     * @see {@link #children}\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the Grid component. This will only be applied\r\n     * if the `children` prop is not a callback function.\r\n     *\r\n     * @see {@link #children}\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to each child. This will only be applied\r\n     * if the `children` prop is not a callback function.\r\n     *\r\n     * @see {@link #children}\r\n     */\r\n    cellStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to each child. This will only be applied\r\n     * if the `children` prop is not a callback function.\r\n     *\r\n     * @see {@link #children}\r\n     */\r\n    cellClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The component to render the Cell as. This should probably not be used as much\r\n     * as the `children` callback function.\r\n     */\r\n    component: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.func,\r\n    ]),\r\n\r\n    /**\r\n     * The children can either be renderable React elements or a callback function\r\n     * that accepts the style and className props to apply so that the styles can\r\n     * be manually added to whichever component.\r\n     */\r\n    children: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.node,\r\n    ]),\r\n\r\n    /**\r\n     * An optional container name to apply to the Grid. This should be the same name as provided\r\n     * to the [react-md-make-grid-container](/components/grids?tab=2#mixin-react-md-make-grid-container) mixin.\r\n     */\r\n    container: PropTypes.string,\r\n\r\n    /**\r\n     * Boolean if the grid should be placed vertically instead of horizontally.\r\n     */\r\n    stacked: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if all the gutters and spacing should be removed from the grid.\r\n     */\r\n    noSpacing: PropTypes.bool,\r\n\r\n    /**\r\n     * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\r\n     * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className\r\n     */\r\n    gutter: PropTypes.number,\r\n\r\n    /**\r\n     * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin\r\n     * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className\r\n     */\r\n    spacing: PropTypes.number,\r\n\r\n    /**\r\n     * An optional cell alignment to apply. When the `Grid` is not `stacked`,\r\n     * this will apply to vertical alignment within each \"row\" of the grid.\r\n     *\r\n     * Alignments:\r\n     * - `top` - This will align to the top of the row\r\n     * - `middle` - This will align to the middle of the row\r\n     * - `bottom` - This will align to the bottom of the row\r\n     * - `stretch` - This will make the cell stretch to fill all the available space\r\n     *   in the row.\r\n     *\r\n     * @see {@link #position}\r\n     */\r\n    align: PropTypes.oneOf(['top', 'middle', 'bottom', 'stretch']),\r\n\r\n    /**\r\n     * An optional cell position to apply. When the `Grid` is not `stacked`,\r\n     * this will apply to horizontal alignment within each \"row\" of the grid.\r\n     *\r\n     * Positions:\r\n     * - `center` - This will align the cell to be within the center of the row. This really\r\n     *    just applies `margin-left: auto; margin-right: auto`.\r\n     * - `right` - This will align the cell to the end of the row. This really just applies `margin-left: auto`.\r\n     *\r\n     * @see {@link #align}\r\n     */\r\n    position: PropTypes.oneOf(['center', 'right']),\r\n\r\n    /**\r\n     * An optional size to apply to the cell. This sizing will be applied across all media sizes.\r\n     * If the size is greater than the number of columns allowed for the media size, it will just\r\n     * span the entire width.\r\n     */\r\n    size: PropTypes.number,\r\n\r\n    /**\r\n     * An optional order to apply to the cell. This order will be applied across all media sizes.\r\n     */\r\n    order: PropTypes.number,\r\n\r\n    /**\r\n     * An optional offset to apply to the cell. This will add spacing to the left of the cell.\r\n     */\r\n    offset: PropTypes.number,\r\n\r\n    /**\r\n     * An optional size to apply to the cell only on phones.\r\n     */\r\n    phoneSize: PropTypes.number,\r\n\r\n    /**\r\n     * An optional order to apply to the cell only on phones.\r\n     */\r\n    phoneOrder: PropTypes.number,\r\n\r\n    /**\r\n     * An optional offset to apply to the cell only on phones.\r\n     */\r\n    phoneOffset: PropTypes.number,\r\n\r\n    /**\r\n     * Boolean if the cell should be hidden on phones only.\r\n     */\r\n    phoneHidden: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional size to apply to the cell only on tablets.\r\n     */\r\n    tabletSize: PropTypes.number,\r\n\r\n    /**\r\n     * An optional order to apply to the cell only on tablets.\r\n     */\r\n    tabletOrder: PropTypes.number,\r\n\r\n    /**\r\n     * An optional offset to apply to the cell only on tablets.\r\n     */\r\n    tabletOffset: PropTypes.number,\r\n\r\n    /**\r\n     * Boolean if the cell should be hidden on tablets only.\r\n     */\r\n    tabletHidden: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional size to apply to the cell only on desktops.\r\n     */\r\n    desktopSize: PropTypes.number,\r\n\r\n    /**\r\n     * An optional order to apply to the cell only on desktops.\r\n     */\r\n    desktopOrder: PropTypes.number,\r\n\r\n    /**\r\n     * An optional offset to apply to the cell only on desktops.\r\n     */\r\n    desktopOffset: PropTypes.number,\r\n\r\n    /**\r\n     * Boolean if the cell should be hidden on desktops only.\r\n     */\r\n    desktopHidden: PropTypes.bool,\r\n  };\r\n\r\n  static defaultProps = {\r\n    component: 'div',\r\n    stacked: false,\r\n    noSpacing: false,\r\n    phoneHidden: false,\r\n    tabletHidden: false,\r\n    desktopHidden: false,\r\n  };\r\n\r\n  /**\r\n   * A utility function to get the grid's className based on the `Grid`'s and `Cell`'s\r\n   * props. This is * used behind the scenes to merge and create the className for the grid.\r\n   *\r\n   * ### Example:\r\n   * ```js\r\n   * const { className, cellClassName } = GridList.getClassNames();\r\n   * const { className, cellClassName } = GridList.getClassNames({ size: 1, container: 'custom' });\r\n   * ```\r\n   *\r\n   * @param {Object=} props - This should be an object of the `Grid`'s props. It\r\n   *    will extract the needed keys and generate the classNames.\r\n   * @return {Object} an object containing the `className` and `cellClassName` attributes.\r\n   */\r\n  static getClassNames(props = {}) {\r\n    const { className, cellClassName, ...remaining } = props;\r\n    return {\r\n      className: Grid.getClassName({ className, ...remaining }),\r\n      cellClassName: Cell.getClassName({ className: cellClassName, ...remaining }),\r\n    };\r\n  }\r\n\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = GridList.getClassNames(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState(GridList.getClassNames(this.props));\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (DIFF_KEYS.some(key => this.props[key] !== nextProps[key])) {\r\n      this.setState(GridList.getClassNames(nextProps));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { className, cellClassName } = this.state;\r\n    const {\r\n      style,\r\n      cellStyle,\r\n      component: Component,\r\n      children,\r\n      /* eslint-disable no-unused-vars */\r\n      className: propClassName,\r\n      cellClassName: propCellClassName,\r\n      container,\r\n      noSpacing,\r\n      stacked,\r\n      gutter,\r\n      spacing,\r\n      align,\r\n      position,\r\n      size,\r\n      offset,\r\n      order,\r\n      phoneSize,\r\n      phoneOrder,\r\n      phoneOffset,\r\n      phoneHidden,\r\n      tabletSize,\r\n      tabletOrder,\r\n      tabletOffset,\r\n      tabletHidden,\r\n      desktopSize,\r\n      desktopOrder,\r\n      desktopOffset,\r\n      desktopHidden,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    if (typeof children === 'function') {\r\n      return children({ style, className, cellStyle, cellClassName });\r\n    }\r\n\r\n    return (\r\n      <Component {...props} style={style} className={className}>\r\n        {React.Children.map(children, (child) => {\r\n          if (!child) {\r\n            return child;\r\n          }\r\n\r\n          let childStyle = child.props.style;\r\n          if (cellStyle) {\r\n            childStyle = childStyle ? { ...cellStyle, ...childStyle } : cellStyle;\r\n          }\r\n\r\n          return React.cloneElement(child, {\r\n            style: childStyle,\r\n            className: cn(child.props.className, cellClassName),\r\n          });\r\n        })}\r\n      </Component>\r\n    );\r\n  }\r\n}\r\n"]}