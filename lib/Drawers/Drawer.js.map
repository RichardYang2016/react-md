{"version":3,"sources":["../../src/js/Drawers/Drawer.js"],"names":["oneOfDrawerTypes","oneOf","FULL_HEIGHT","CLIPPED","FLOATING","PERSISTENT","PERSISTENT_MINI","TEMPORARY","TEMPORARY_MINI","Drawer","props","defaultProps","mobileMinWidth","tabletMinWidth","desktopMinWidth","mobileType","tabletType","desktopType","constantType","window","type","mobile","tablet","desktop","matchesMedia","min","max","media","matchMedia","matches","defaultVisible","defaultMedia","overlay","state","animating","overlayActive","drawerActive","_initialFix","visible","_updateType","addEventListener","_updateMedia","nextProps","transitionDuration","_animate","_timeout","clearTimeout","_closeTimeout","removeEventListener","id","style","className","navStyle","navClassName","component","navItems","header","children","inline","position","clickableDesktopOverlay","lastChild","portal","overlayStyle","overlayClassName","propType","propVisible","propRenderNode","renderNode","propNavItemsId","navItemsId","propZDepth","zDepth","onMediaTypeChange","onVisibilityChange","autoclose","autocloseAfterInk","onVisibilityToggle","closeOnNavItemClick","context","mini","temporary","floating","permanent","Component","navigation","_setNavigation","_handleNavClick","map","overlayVisible","drawer","_closeDrawer","DrawerTypes","propTypes","oneOfType","number","string","object","func","element","arrayOf","shape","divider","bool","subheader","primaryText","node","isRequired","propName","others","err","Error","contextTypes","getCurrentMedia","diffType","diffMedia","prevVisible","realState","setState","timeout","setTimeout","_navigation","e","enabled","target","contains","classList","getAttribute","parentNode","callback"],"mappings":"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","file":"Drawer.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { findDOMNode } from 'react-dom';\r\nimport cn from 'classnames';\r\nimport deprecated from 'react-prop-types/lib/deprecated';\r\n\r\nimport { MOBILE_MIN_WIDTH, TABLET_MIN_WIDTH, DESKTOP_MIN_WIDTH } from '../constants/media';\r\nimport TICK from '../constants/CSSTransitionGroupTick';\r\nimport getField from '../utils/getField';\r\nimport mapToListParts from '../utils/mapToListParts';\r\nimport controlled from '../utils/PropTypes/controlled';\r\nimport Paper from '../Papers/Paper';\r\nimport Portal from '../Helpers/Portal';\r\nimport List from '../Lists/List';\r\nimport Overlay from './Overlay';\r\n\r\nimport { isTemporary, isPermanent, isMini } from './isType';\r\nimport DrawerTypes from './DrawerTypes';\r\n\r\nconst oneOfDrawerTypes = PropTypes.oneOf([\r\n  DrawerTypes.FULL_HEIGHT,\r\n  DrawerTypes.CLIPPED,\r\n  DrawerTypes.FLOATING,\r\n  DrawerTypes.PERSISTENT,\r\n  DrawerTypes.PERSISTENT_MINI,\r\n  DrawerTypes.TEMPORARY,\r\n  DrawerTypes.TEMPORARY_MINI,\r\n]);\r\n\r\n/**\r\n * The `Drawer` component is used for having a sliding panel of content or navigation\r\n * that appears from the side of a screen.\r\n *\r\n * If the `Drawer` uses any of the `_MINI` drawer types, you will need to also create another\r\n * `Drawer` that is not `_MINI`. Transitioning the `width` on mobile devices is very sluggish,\r\n * and it isn't much more work to create another drawer.\r\n */\r\nexport default class Drawer extends PureComponent {\r\n  static DrawerTypes = DrawerTypes;\r\n  static propTypes = {\r\n    /**\r\n     * An optional id to provide to the drawer. This is generally a good idea to provide if\r\n     * there are any `navItems` defined.\r\n     *\r\n     * @see {@link #navItemsId}\r\n     */\r\n    id: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional id to provide to the navItems list. If this is omitted and the `id` prop is\r\n     * defined, it will be defaulted to `${id}-nav-items`.\r\n     */\r\n    navItemsId: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional style to apply.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the `List` surrounding the `navItems`.\r\n     */\r\n    navStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the `List` surrounding the `navItems`.\r\n     */\r\n    navClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the overlay.\r\n     */\r\n    overlayStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the overlay.\r\n     */\r\n    overlayClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional component to render the drawer in. When this prop is undefined, the drawer\r\n     * will be rendered as a `nav` if the `navItems` prop is defined, otherwise an `aside`.\r\n     */\r\n    component: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.element,\r\n    ]),\r\n\r\n    /**\r\n     * An optional list of navigation items to display in the drawer. This list can either contain\r\n     * a valid child component for a `List` or an object used to create a `Divider`, `Subheader`,\r\n     * or `ListItem`.\r\n     *\r\n     * - To create a divider in the list, set a `divider` key to `true`. Any other keys will be\r\n     * passed to the `Divider` component.\r\n     * - To create a subheader in the list, set the `subheader` key to `true`. Any other keys will\r\n     * be passed to the `Subheader` component.\r\n     * - To create a list item, just create an object with any normal `ListItem` props.\r\n     */\r\n    navItems: PropTypes.arrayOf(PropTypes.oneOfType([\r\n      PropTypes.element,\r\n      PropTypes.shape({\r\n        divider: PropTypes.bool,\r\n        subheader: PropTypes.bool,\r\n        primaryText: PropTypes.node,\r\n      }),\r\n    ])),\r\n\r\n    /**\r\n     * Boolean if a temporary drawer should close when a nav item is clicked.\r\n     */\r\n    autoclose: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional header to display. This _should_ normally be a toolbar.\r\n     */\r\n    header: PropTypes.node,\r\n\r\n    /**\r\n     * Any additional children to display after the `header` and `navItems`.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * The drawer type to use when the current device matches the mobile\r\n     * media query.\r\n     */\r\n    mobileType: PropTypes.oneOf([\r\n      Drawer.DrawerTypes.TEMPORARY,\r\n      Drawer.DrawerTypes.TEMPORARY_MINI,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * The min-width to use for the mobile media query.\r\n     */\r\n    mobileMinWidth: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * The drawer type to use when the current device matches the tablet\r\n     * media query.\r\n     */\r\n    tabletType: oneOfDrawerTypes.isRequired,\r\n\r\n    /**\r\n     * The min-width to use for the tablet media query.\r\n     */\r\n    tabletMinWidth: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * The drawer type to use when the current device matches the desktop media\r\n     * query.\r\n     */\r\n    desktopType: oneOfDrawerTypes.isRequired,\r\n\r\n    /**\r\n     * The min-width for a desktop screen.\r\n     */\r\n    desktopMinWidth: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * An optional type to enforce across all media sizes. Since `mobile` devices are\r\n     * included, you are required to manually specify when the `type` should be `temporary`.\r\n     *\r\n     * When the `type` is not one of the `temporary` types, the `onMediaTypeChange` prop\r\n     * must be provided.\r\n     */\r\n    type: (props, propName, component, ...others) => {\r\n      const type = props[propName];\r\n      if (isTemporary(type)) {\r\n        return oneOfDrawerTypes(props, propName, component, ...others);\r\n      }\r\n\r\n      let err = oneOfDrawerTypes(props, propName, component, ...others);\r\n      if (!err && typeof type !== 'undefined' && !isMini(type) && typeof props.onMediaTypeChange === 'undefined') {\r\n        err = new Error(\r\n          `You provided a \\`${propName}\\` prop to the ${component} without the \\`onMediaTypeChange\\` ` +\r\n          `handler. The \\`onMediaTypeChange\\` prop must be specified when the \\`${propName}\\` is not ` +\r\n          'one of the `temporary` types.'\r\n        );\r\n      }\r\n\r\n      return err;\r\n    },\r\n\r\n    /**\r\n     * An optional function to call when the drawer's type changes when the screen resizes.\r\n     * The callback will include the new `type` that should be used for the screen size,\r\n     * and an object containing the media matches for `mobile`, `tablet`, and `desktop`.\r\n     *\r\n     * ```js\r\n     * this.props.onMediaTypeChange(Drawer.DrawerTypes.TEMPORARY, {\r\n     *   mobile: true,\r\n     *   tablet: false,\r\n     *   desktop: false,\r\n     * });\r\n     * ```\r\n     */\r\n    onMediaTypeChange: PropTypes.func,\r\n\r\n    /**\r\n     * The default drawer type to display on initial render. The drawer will automatically\r\n     * adjust itself to the correct media once it has mounted. This prop is really only useful\r\n     * for server side rendering.\r\n     */\r\n    defaultMedia: PropTypes.oneOf(['mobile', 'tablet', 'desktop']).isRequired,\r\n\r\n    /**\r\n     * Boolean if there should be a visible overlay when the drawer is visible. The default behavior\r\n     * is to only include a visible overlay when the `type` is `TEMPORARY` or `TEMPORARY_MINI` and\r\n     * the device is not a desktop.\r\n     *\r\n     * Definining this variable as `true` or `false` will override any default behavior. This means that\r\n     * if this is enabled for a full-height drawer, an overlay will still be created.\r\n     */\r\n    overlay: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the Portal's functionality of rendering in a separate react tree should be applied\r\n     * to the drawer. The overlay that appears for temporary type drawers will still appear in the\r\n     * separate subtree.\r\n     *\r\n     * @see {@link Helpers/Portal}\r\n     */\r\n    portal: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional DOM Node to render the drawer into. The default is to render as\r\n     * the first child in the `body`.\r\n     *\r\n     * > This prop will not be used when the drawer is of the permanent type or `inline` is specified\r\n     * since the `Portal` component will not be used.\r\n     */\r\n    renderNode: PropTypes.object,\r\n\r\n    /**\r\n     * Boolean if the drawer should be rendered as the last child instead of the first child\r\n     * in the `renderNode` or `body`.\r\n     *\r\n     * > This prop will not be used when the drawer is of the permanent type or `inline` is specified\r\n     * since the `Portal` component will not be used.\r\n     */\r\n    lastChild: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the drawer is visible by default. If this is omitted, the drawer will be visible\r\n     * if the current drawer type is NOT `Drawer.DrawerTypes.TEMPORARY` or `Drawer.DrawerTypes.TEMPORARY_MINI`.\r\n     *\r\n     * This basically means that if you are using the default configuration, a mobile device's drawer\r\n     * will be hidden while tablets and desktops will be visible.\r\n     */\r\n    defaultVisible: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the drawer is visible. This will force the component to define the `onVisibilityChange`\r\n     * prop as well as manually updating the drawer's visibility.\r\n     */\r\n    visible: controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible'),\r\n\r\n    /**\r\n     * An optional function to call when the visibility of the drawer is changed. The function will\r\n     * be called with the new visibility state.\r\n     *\r\n     * ```js\r\n     * onVisibilityChange(!currentlyVisible);\r\n     * ```\r\n     */\r\n    onVisibilityChange: PropTypes.func,\r\n\r\n    /**\r\n     * The drawer's position on the page when it is not `inline`. When the drawer's position is `left`,\r\n     * the width will be `calc(100vw - 56px)` on mobile devices and `$md-drawer-desktop-width` on desktops.\r\n     *\r\n     * When the position is `right`, the width will be `100vw` for mobile devices and scaling to the drawer's\r\n     * children width on desktops.\r\n     */\r\n    position: PropTypes.oneOf(['left', 'right']).isRequired,\r\n\r\n    /**\r\n     * Boolean if the drawer should be displayed inline instead of fixed to the page. When this prop\r\n     * is enabled, the `position` prop will not be used.\r\n     */\r\n    inline: PropTypes.bool,\r\n\r\n    /**\r\n     * The `$md-drawer-transition-time` value from sass.\r\n     */\r\n    transitionDuration: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * Boolean if the temporary drawer's overlay should be created on desktop screens. This is really used so that\r\n     * the drawer will close when a user clicks anywhere on the page except in the drawer.\r\n     */\r\n    clickableDesktopOverlay: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the `autoclose` feature should wait for the ink transition to finish before automatically\r\n     * closing the drawer. This will add a `300ms` delay. If this is `false`, there will only be a `17ms` delay.\r\n     *\r\n     * > The delay is required so that any event listeners will still be correctly invoked when an item is clicked.\r\n     */\r\n    autocloseAfterInk: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the `type` prop should be constant across all media sizes. This is only valid if the `type` is\r\n     * one of the temporary types.\r\n     *\r\n     * This will basically mean that when attempting to do a media adjustment, it will use the `type` prop instead of\r\n     * `mobileType`, `tabletType`, and `desktopType` to determine the next drawer type.\r\n     */\r\n    constantType: PropTypes.bool.isRequired,\r\n\r\n    /**\r\n     * An optional zDepth to apply to the drawer. If this is omitted, the value will be set as follows:\r\n     * - floating || inline = 1\r\n     * - temporary = 5\r\n     * - all others = 1\r\n     *\r\n     * @see {@link Papers/Paper#zDepth}\r\n     */\r\n    zDepth: PropTypes.number,\r\n\r\n    closeOnNavItemClick: deprecated(PropTypes.bool, 'Use `autoclose` instead'),\r\n    onVisibilityToggle: deprecated(PropTypes.func, 'Use `onVisibilityChange` instead'),\r\n  };\r\n\r\n  static defaultProps = {\r\n    defaultMedia: 'mobile',\r\n    mobileType: Drawer.DrawerTypes.TEMPORARY,\r\n    mobileMinWidth: MOBILE_MIN_WIDTH,\r\n    tabletType: Drawer.DrawerTypes.PERSISTENT,\r\n    tabletMinWidth: TABLET_MIN_WIDTH,\r\n    desktopType: Drawer.DrawerTypes.FULL_HEIGHT,\r\n    desktopMinWidth: DESKTOP_MIN_WIDTH,\r\n    position: 'left',\r\n    transitionDuration: 300,\r\n    autoclose: true,\r\n    clickableDesktopOverlay: true,\r\n    constantType: true,\r\n  };\r\n\r\n  /**\r\n   * Determines the current media and returns an object containing matches for `mobile`, `tablet`, `desktop`,\r\n   * and the current drawer type. This expects a `props` object of the drawer.\r\n   *\r\n   * If this is used server side, it will default to only matching mobile.\r\n   *\r\n   * @param {Object=} props - The current drawer's prop shape to extract the mobile, tablet,\r\n   *    and desktop type/min widths. This defaults to the drawer's default props.\r\n   * @return {Object} an object containing the media matches and the current type to use for the drawer.\r\n   */\r\n  static getCurrentMedia(props = Drawer.defaultProps) {\r\n    const {\r\n      mobileMinWidth,\r\n      tabletMinWidth,\r\n      desktopMinWidth,\r\n      mobileType,\r\n      tabletType,\r\n      desktopType,\r\n      constantType,\r\n    } = props;\r\n    if (typeof window === 'undefined') {\r\n      const type = constantType && props.type ? props.type : mobileType;\r\n      return { mobile: true, tablet: false, desktop: false, type };\r\n    }\r\n\r\n    const mobile = Drawer.matchesMedia(mobileMinWidth, tabletMinWidth - 1);\r\n    const tablet = Drawer.matchesMedia(tabletMinWidth, desktopMinWidth);\r\n    const desktop = Drawer.matchesMedia(desktopMinWidth);\r\n\r\n    let type;\r\n    if (constantType && props.type && isTemporary(props.type)) {\r\n      type = props.type;\r\n    } else if (desktop) {\r\n      type = desktopType;\r\n    } else if (tablet) {\r\n      type = tabletType;\r\n    } else {\r\n      type = mobileType;\r\n    }\r\n\r\n    return { type, mobile, tablet, desktop };\r\n  }\r\n\r\n  /**\r\n   * Simply does a `window.matchMedia(query)` where the query gets defined as a min width\r\n   * and optional max width.\r\n   *\r\n   * @param {number} min - The min width for the media query.\r\n   * @param {number=} max - An optional max width to include for the media query.\r\n   * @return {boolean} true if the media matches.\r\n   */\r\n  static matchesMedia(min, max) {\r\n    let media = `screen and (min-width: ${min}px)`;\r\n    if (max) {\r\n      media += ` and (max-width: ${max}px)`;\r\n    }\r\n\r\n    return window.matchMedia(media).matches;\r\n  }\r\n\r\n  static contextTypes = {\r\n    renderNode: PropTypes.object,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { defaultVisible, defaultMedia, overlay } = props;\r\n\r\n    this.state = {\r\n      mobile: defaultMedia === 'mobile',\r\n      tablet: defaultMedia === 'tablet',\r\n      desktop: defaultMedia === 'desktop',\r\n      animating: false,\r\n      overlayActive: false,\r\n      drawerActive: false,\r\n    };\r\n\r\n    if (typeof props.type === 'undefined') {\r\n      this.state.type = props[`${defaultMedia}Type`];\r\n    }\r\n\r\n    const type = getField(props, this.state, 'type');\r\n    this._initialFix = true;\r\n\r\n    if (typeof props.visible === 'undefined') {\r\n      let visible = isPermanent(type) || isMini(type);\r\n      if (!visible && typeof defaultVisible !== 'undefined') {\r\n        visible = defaultVisible;\r\n      }\r\n\r\n      this.state.visible = visible;\r\n    }\r\n\r\n    const visible = getField(props, this.state, 'visible');\r\n\r\n    this.state.overlayActive = (typeof overlay !== 'undefined' ? overlay : isTemporary(type) && !this.state.desktop)\r\n      && visible;\r\n    this.state.drawerActive = visible;\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (typeof window !== 'undefined') {\r\n      this._updateType(this.props);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!isMini(getField(this.props, this.state, 'type'))) {\r\n      window.addEventListener('resize', this._updateMedia);\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const {\r\n      mobileMinWidth,\r\n      mobileType,\r\n      tabletMinWidth,\r\n      tabletType,\r\n      desktopMinWidth,\r\n      desktopType,\r\n    } = this.props;\r\n\r\n    if (nextProps.mobileMinWidth !== mobileMinWidth || nextProps.mobileType !== mobileType\r\n      || nextProps.tabletMinWidth !== tabletMinWidth || nextProps.tabletType !== tabletType\r\n      || nextProps.desktopMinWidth !== desktopMinWidth || nextProps.desktopType !== desktopType) {\r\n      this._updateType(nextProps);\r\n    }\r\n\r\n    const { visible, transitionDuration, overlay } = nextProps;\r\n    if (this.props.visible === nextProps.visible) {\r\n      return;\r\n    }\r\n\r\n    const type = getField(nextProps, this.state, 'type');\r\n    this._animate(visible, type, transitionDuration, overlay, this.state.desktop);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this._timeout) {\r\n      clearTimeout(this._timeout);\r\n    }\r\n\r\n    if (this._closeTimeout) {\r\n      clearTimeout(this._closeTimeout);\r\n    }\r\n\r\n    window.removeEventListener('resize', this._updateMedia);\r\n  }\r\n\r\n  _updateType = (props) => {\r\n    const {\r\n      onMediaTypeChange,\r\n      overlay,\r\n      transitionDuration,\r\n    } = props;\r\n\r\n    const onVisibilityChange = props.onVisibilityToggle || props.onVisibilityChange;\r\n\r\n    let state = Drawer.getCurrentMedia(props);\r\n    const diffType = getField(props, this.state, 'type') !== state.type;\r\n    const diffMedia = state.mobile !== this.state.mobile\r\n      || state.tablet !== this.state.tablet\r\n      || state.desktop !== this.state.desktop;\r\n\r\n    if (onMediaTypeChange && (diffType || diffMedia)) {\r\n      onMediaTypeChange(state.type, { mobile: state.mobile, tablet: state.tablet, desktop: state.desktop });\r\n    }\r\n\r\n    if (diffType) {\r\n      let visible = isPermanent(state.type);\r\n      if (this._initialFix) {\r\n        if (props.defaultVisible) {\r\n          visible = props.defaultVisible;\r\n        } else if (props.visible) {\r\n          visible = props.visible;\r\n        }\r\n      }\r\n\r\n      const prevVisible = getField(props, this.state, 'visible');\r\n      if (onVisibilityChange && (visible !== prevVisible)) {\r\n        onVisibilityChange(visible);\r\n      }\r\n\r\n      if (typeof props.visible === 'undefined') {\r\n        state.visible = visible;\r\n        this._animate(visible, state.type, transitionDuration, overlay, state.desktop);\r\n      }\r\n    } else if (this._initialFix && diffMedia) {\r\n      state.overlayActive = (typeof overlay !== 'undefined' ? overlay : isTemporary(state.type) && !state.desktop)\r\n        && getField(props, this.state, 'visible');\r\n    }\r\n\r\n    if (typeof props.type !== 'undefined') {\r\n      const { type, ...realState } = state; // eslint-disable-line no-unused-vars\r\n      state = realState;\r\n    }\r\n\r\n    this._initialFix = false;\r\n    this.setState(state);\r\n  };\r\n\r\n  _updateMedia = () => {\r\n    this._updateType(this.props);\r\n  };\r\n\r\n  _animate = (visible, type, timeout, overlay, desktop) => {\r\n    if (this._timeout) {\r\n      clearTimeout(this._timeout);\r\n    }\r\n\r\n    if (visible) {\r\n      this._timeout = setTimeout(() => {\r\n        this._timeout = null;\r\n\r\n        this.setState({\r\n          overlayActive: overlay || (isTemporary(type) && !desktop),\r\n          drawerActive: true,\r\n          animating: true,\r\n        });\r\n      }, TICK);\r\n    } else {\r\n      this._timeout = setTimeout(() => {\r\n        this._timeout = null;\r\n\r\n        this.setState({ animating: false });\r\n      }, timeout);\r\n      this.setState({ animating: true, overlayActive: false, drawerActive: false });\r\n    }\r\n  };\r\n\r\n  _setNavigation = (navigation) => {\r\n    this._navigation = findDOMNode(navigation);\r\n  };\r\n\r\n  _handleNavClick = (e) => {\r\n    const { closeOnNavItemClick, autoclose, autocloseAfterInk } = this.props;\r\n    const enabled = typeof closeOnNavItemClick !== 'undefined' ? closeOnNavItemClick : autoclose;\r\n    if (!enabled || !isTemporary(getField(this.props, this.state, 'type'))) {\r\n      return;\r\n    }\r\n\r\n    let { target } = e;\r\n    while (target && this._navigation.contains(target)) {\r\n      if (target.classList.contains('md-list-tile')) {\r\n        // Clicked a nav item that has a nested list\r\n        if (target.getAttribute('aria-expanded') !== null) {\r\n          return;\r\n        }\r\n\r\n        this._closeTimeout = setTimeout(() => {\r\n          this._closeTimeout = null;\r\n\r\n          this._closeDrawer(e);\r\n        }, autocloseAfterInk ? 300 : TICK);\r\n        return;\r\n      }\r\n\r\n      target = target.parentNode;\r\n    }\r\n  };\r\n\r\n  _closeDrawer = () => {\r\n    const { onVisibilityChange, onVisibilityToggle, transitionDuration, overlay } = this.props;\r\n    const callback = onVisibilityToggle || onVisibilityChange;\r\n    if (callback) {\r\n      callback(false);\r\n    }\r\n\r\n    if (typeof this.props.visible === 'undefined') {\r\n      this.setState({ visible: false });\r\n      this._animate(false, getField(this.props, this.state, 'type'), transitionDuration, overlay, this.state.desktop);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { overlayActive, drawerActive, animating } = this.state;\r\n    const {\r\n      id,\r\n      style,\r\n      className,\r\n      navStyle,\r\n      navClassName,\r\n      component,\r\n      navItems,\r\n      header,\r\n      children,\r\n      inline,\r\n      position,\r\n      overlay,\r\n      clickableDesktopOverlay,\r\n      lastChild,\r\n      portal,\r\n      overlayStyle,\r\n      overlayClassName,\r\n      /* eslint-disable no-unused-vars */\r\n      type: propType,\r\n      visible: propVisible,\r\n      renderNode: propRenderNode,\r\n      navItemsId: propNavItemsId,\r\n      zDepth: propZDepth,\r\n      constantType,\r\n      defaultVisible,\r\n      defaultMedia,\r\n      mobileType,\r\n      mobileMinWidth,\r\n      tabletType,\r\n      tabletMinWidth,\r\n      desktopType,\r\n      desktopMinWidth,\r\n      transitionDuration,\r\n      onMediaTypeChange,\r\n      onVisibilityChange,\r\n      autoclose,\r\n      autocloseAfterInk,\r\n      // deprecated\r\n      onVisibilityToggle,\r\n      closeOnNavItemClick,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    let { navItemsId, zDepth } = this.props;\r\n    if (!navItemsId && id) {\r\n      navItemsId = `${id}-nav-items`;\r\n    }\r\n\r\n    const { desktop } = this.state;\r\n    const renderNode = getField(this.props, this.context, 'renderNode');\r\n    const type = getField(this.props, this.state, 'type');\r\n    const visible = getField(this.props, this.state, 'visible');\r\n    const mini = isMini(type);\r\n    const temporary = isTemporary(type);\r\n    const floating = DrawerTypes.FLOATING === type;\r\n    const permanent = isPermanent(type);\r\n\r\n    let Component;\r\n    if (component) {\r\n      Component = component;\r\n    } else if (navItems) {\r\n      Component = 'nav';\r\n    } else {\r\n      Component = 'aside';\r\n    }\r\n\r\n    let navigation;\r\n    if (navItems) {\r\n      navigation = (\r\n        <List\r\n          ref={this._setNavigation}\r\n          key=\"navigation\"\r\n          id={navItemsId}\r\n          style={navStyle}\r\n          className={cn('md-list--drawer', {\r\n            'md-toolbar-relative': mini && !visible,\r\n            'md-background': floating,\r\n          }, navClassName)}\r\n          onClick={this._handleNavClick}\r\n        >\r\n          {navItems.map(mapToListParts)}\r\n        </List>\r\n      );\r\n    }\r\n\r\n    if (typeof zDepth === 'undefined') {\r\n      zDepth = 1;\r\n      if (floating || inline) {\r\n        zDepth = 0;\r\n      } else if (!mini && temporary) {\r\n        zDepth = 5;\r\n      }\r\n    }\r\n\r\n    let overlayVisible = overlay;\r\n    if (typeof overlayVisible !== 'boolean') {\r\n      overlayVisible = temporary && !mini && (!desktop || clickableDesktopOverlay) && (animating || visible);\r\n    }\r\n\r\n    const drawer = (\r\n      <Paper\r\n        {...props}\r\n        id={id}\r\n        key=\"drawer\"\r\n        component={Component}\r\n        zDepth={zDepth}\r\n        raiseOnHover={false}\r\n        style={style}\r\n        className={cn('md-drawer', {\r\n          [`md-drawer--${position}`]: !inline,\r\n          'md-drawer--fixed': !inline,\r\n          'md-drawer--inline': inline,\r\n          'md-drawer--active': mini || drawerActive,\r\n          'md-drawer--mini': mini,\r\n          'md-transition--deceleration': !mini && !permanent && visible,\r\n          'md-transition--acceleration': !mini && !permanent && !visible,\r\n          'md-background': inline || floating,\r\n          'md-background--card': !floating && !inline,\r\n        }, className)}\r\n      >\r\n        {header}\r\n        {navigation}\r\n        {children}\r\n        <Overlay\r\n          style={overlayStyle}\r\n          className={overlayClassName}\r\n          active={overlayActive}\r\n          onClick={this._closeDrawer}\r\n          visible={overlayVisible}\r\n          renderNode={renderNode}\r\n        />\r\n      </Paper>\r\n    );\r\n\r\n    if (inline || permanent) {\r\n      return drawer;\r\n    } else if (!portal) {\r\n      return mini || animating || visible ? drawer : null;\r\n    }\r\n\r\n    return (\r\n      <Portal visible={animating || visible} renderNode={renderNode} lastChild={lastChild}>\r\n        {drawer}\r\n      </Portal>\r\n    );\r\n  }\r\n}\r\n"]}