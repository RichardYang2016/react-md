{"version":3,"sources":["../../src/js/Badges/Badge.js"],"names":["Badge","props","single","_isSingleChild","state","element","children","count","_normalizeCount","nextProps","badgeContent","max","nextState","setState","n","parseInt","Number","isNaN","toString","className","badgeStyle","badgeClassName","Component","component","primary","secondary","defaultTheme","default","circular","badgeId","invisibleOnZero","useCircular","content","c","only","badge","text","themeText","propTypes","style","object","string","oneOfType","number","node","isRequired","func","bool","defaultProps"],"mappings":"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","file":"Badge.js","sourcesContent":["import React, { PureComponent, Children, cloneElement, isValidElement } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\r\n\r\nimport themeColors from '../utils/themeColors';\r\n\r\n/**\r\n * The main use case of the `Badge` component is for notifications. It can\r\n * however also place any content floating to whatever children are supplied.\r\n */\r\nexport default class Badge extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply to the badge's container.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the badge's container.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the badge.\r\n     */\r\n    badgeStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the badge.\r\n     */\r\n    badgeClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The id to give the badge's content. This is required to help with the\r\n     * `aria-describedby` attribute that should be applied to one of the children.\r\n     *\r\n     * If there is only one child that is a valid React element, the `aria-describedby`\r\n     * will automatically be cloned into that child (so make sure your component passes\r\n     * that prop correctly).\r\n     *\r\n     * If there is only one child, but it is a string or number, the badge's container\r\n     * will be updated to include the `aria-describedby`.\r\n     *\r\n     * If there is more than child, you are required to add it to a child yourself.\r\n     */\r\n    badgeId: isRequiredForA11y(PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ])),\r\n\r\n    /**\r\n     * The content to display with the badge's content. The size of this\r\n     * element is determinate of the location of the content. You might have\r\n     * to update the positioning yourself.\r\n     */\r\n    children: PropTypes.node.isRequired,\r\n\r\n    /**\r\n     * The component to render the badge as.\r\n     */\r\n    component: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.func,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * The content to display in the badge. If the content is a number or a number string,\r\n     * the number will be normalized if `normalizeContent` is enabled.\r\n     */\r\n    badgeContent: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n      PropTypes.node,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * This will basically update the display value of the content to only be 2 digits. If\r\n     * a number is greater than 99, 99+ will be displayed instead. This is really just to\r\n     * keep the count inside the circular bubble.\r\n     */\r\n    max: PropTypes.number,\r\n\r\n    /**\r\n     * Boolean if the primary color background should get applied to the badge's content.\r\n     */\r\n    primary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the secondary color background should get applied to the badge's content.\r\n     */\r\n    secondary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the default styles should be applied.\r\n     */\r\n    default: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the badge's content should appear in a circular container. If this is\r\n     * undefined, the content will be in a circular container if the badgeContent is a number.\r\n     */\r\n    circular: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the badge's notification should be invisible when the count is 0.\r\n     */\r\n    invisibleOnZero: PropTypes.bool,\r\n  };\r\n\r\n  static defaultProps = {\r\n    max: 99,\r\n    component: 'div',\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const single = this._isSingleChild(props);\r\n    this.state = {\r\n      single,\r\n      element: single && isValidElement(props.children),\r\n      count: this._normalizeCount(props),\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const { badgeContent, max, children } = this.props;\r\n    let nextState;\r\n    if (badgeContent !== nextProps.badgeContent || max !== nextProps.max) {\r\n      nextState = { count: this._normalizeCount(nextProps) };\r\n    }\r\n\r\n    if (children !== nextProps.children) {\r\n      nextState = nextState || {};\r\n      nextState.single = this._isSingleChild(nextProps);\r\n      nextState.element = nextState.single && isValidElement(nextProps.children);\r\n    }\r\n\r\n    if (nextState) {\r\n      this.setState(nextState);\r\n    }\r\n  }\r\n\r\n  _isSingleChild({ children }) {\r\n    return Children.count(children) === 1;\r\n  }\r\n\r\n  _normalizeCount({ badgeContent, max }) {\r\n    let count;\r\n    if (max) {\r\n      const n = parseInt(badgeContent, 10);\r\n      if (!Number.isNaN(n) && n.toString() === badgeContent.toString()) {\r\n        count = n > max ? `${max}+` : n;\r\n      }\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  render() {\r\n    const { count, single, element } = this.state;\r\n    const {\r\n      className,\r\n      badgeStyle,\r\n      badgeClassName,\r\n      badgeContent,\r\n      component: Component,\r\n      children,\r\n      primary,\r\n      secondary,\r\n      default: defaultTheme,\r\n      circular,\r\n      badgeId,\r\n      invisibleOnZero,\r\n      max, // eslint-disable-line no-unused-vars\r\n      ...props\r\n    } = this.props;\r\n\r\n    const useCircular = typeof circular !== 'undefined' ? circular : typeof count !== 'undefined';\r\n    let content = children;\r\n    if (single && element) {\r\n      const c = Children.only(content);\r\n      if (!c.props['aria-describedby']) {\r\n        content = cloneElement(c, { 'aria-describedby': badgeId });\r\n      }\r\n    } else if (single && !element && !props['aria-describedby']) {\r\n      props['aria-describedby'] = badgeId;\r\n    }\r\n\r\n    const badge = (\r\n      <span\r\n        id={badgeId}\r\n        key=\"badge\"\r\n        role=\"status\"\r\n        style={badgeStyle}\r\n        className={cn('md-badge', {\r\n          'md-badge--circular': useCircular,\r\n          'md-badge--default': defaultTheme,\r\n        }, themeColors({\r\n          primary,\r\n          secondary,\r\n          text: useCircular,\r\n          themeText: !primary && !secondary,\r\n        }, badgeClassName))}\r\n      >\r\n        {count || badgeContent}\r\n      </span>\r\n    );\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        className={cn('md-badge-container md-inline-block', className)}\r\n      >\r\n        {content}\r\n        {invisibleOnZero && count === 0 ? null : badge}\r\n      </Component>\r\n    );\r\n  }\r\n}\r\n"]}