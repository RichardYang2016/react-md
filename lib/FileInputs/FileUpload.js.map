{"version":3,"sources":["../../src/js/FileInputs/FileUpload.js"],"names":["FileUpload","state","abort","file","fileName","Object","keys","name","reader","querySelector","value","setState","_uploadFile","props","onAbort","onError","onLoad","onLoadStart","onLoadEnd","onProgress","readAs","type","fr","FileReader","onerror","e","target","error","onabort","onloadstart","onloadend","onload","result","onprogress","lengthComputable","loaded","total","match","readAsDataURL","readAsText","readAsArrayBuffer","_handleUpload","fileList","onChange","maxSize","onSizeError","files","Array","isArray","errorFiles","filter","size","length","nextState","forEach","fileReader","propTypes","style","object","className","string","labelStyle","labelClassName","primary","bool","secondary","flat","accept","multiple","label","node","iconChildren","iconClassName","number","propName","component","others","func","isRequired","oneOfType","oneOf","allowDuplicates"],"mappings":"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","file":"FileUpload.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { findDOMNode } from 'react-dom';\r\nimport FileInput from './FileInput';\r\nimport deprecated from 'react-prop-types/lib/deprecated';\r\n\r\nimport omit from '../utils/omit';\r\n\r\n/**\r\n * The `FileUpload` component is used to upload files locally This is a wrapper of the `FileInput` component\r\n * with some additional functionality so any props that are undocumented on `FileUpload` but are present\r\n * on `FileInput` are correctly provided. If you want to upload files to a server, use\r\n * [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\r\n * by attaching the `File`.\r\n *\r\n * Quick example:\r\n *\r\n * ```js\r\n * function upload(file) {\r\n *   fetch('/api/images', {\r\n *     method: 'POST',\r\n *     body: new FormData().append('file', file),\r\n *   });\r\n * }\r\n * ```\r\n *\r\n * An upload can be aborted by calling the `abort(file || fileName)` function. If\r\n * the file or fileName are omitted, it will *attempt* to abort the current\r\n * file that is uploading. Unreliable for multi-select.\r\n *\r\n * ```js\r\n * <FileUpload ref=\"upload\" />\r\n * <Button raised onClick={() => this.refs.upload.abort()} label=\"Abort! Abort!\" />\r\n * ```\r\n */\r\nexport default class FileUpload extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the label.\r\n     */\r\n    labelStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the label.\r\n     */\r\n    labelClassName: PropTypes.string,\r\n\r\n    /**\r\n     * Boolean if the `FileInput` should be styled with the primary color.\r\n     */\r\n    primary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the `FileInput` should be styled with the secondary color.\r\n     */\r\n    secondary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the `FileInput` should be styled as a flat button instead of a\r\n     * raised button.\r\n     */\r\n    flat: PropTypes.bool,\r\n\r\n    /**\r\n     * This should be a comma separated list of Media Types that the `FileInput` can\r\n     * accept. If this prop is left blank, any file will be accepted.\r\n     *\r\n     * The values can either be:\r\n     * - A file extension\r\n     * - audio/*\r\n     * - video/*\r\n     * - image/*\r\n     * - any valid [IANA Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml)\r\n     */\r\n    accept: PropTypes.string,\r\n\r\n    /**\r\n     * Boolean if multiple files will be accepted.\r\n     */\r\n    multiple: PropTypes.bool,\r\n\r\n    /**\r\n     * A label to display on the `FileInput`.\r\n     */\r\n    label: PropTypes.node,\r\n\r\n    /**\r\n     * The icon children to use for the upload icon.\r\n     */\r\n    iconChildren: PropTypes.node,\r\n\r\n    /**\r\n     * The icon className to use for the upload icon.\r\n     */\r\n    iconClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional max size for the file. If the file is greater than\r\n     * this limit, the file will not be uploaded.\r\n     */\r\n    maxSize: PropTypes.number,\r\n\r\n    /**\r\n     * A required function to call when the `maxSize` prop is set. It will\r\n     * be given a list of files that were too big.\r\n     */\r\n    onSizeError: (props, propName, component, ...others) => {\r\n      if (typeof props.maxSize === 'number') {\r\n        return PropTypes.func.isRequired(props, propName, component, ...others);\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * You can force the `FileReader` to read the file as a specific type\r\n     * if you do not trust the *amazing* regex I have for choosing the correct\r\n     * one.\r\n     *\r\n     * ```js\r\n     * if(type.match(/image|video|audio/)) {\r\n     *   fr.readAsDataURL(file);\r\n     * } else if(type.match(/application|model|multipart/)) {\r\n     *   fr.readAsArrayBuffer(file);\r\n     * } else {\r\n     *   fr.readAsText(file);\r\n     * }\r\n     * ```\r\n     *\r\n     * > `.yml` and `.js` both are considered `application`, so it definitely fails there.\r\n     *\r\n     * If this prop is a function, you will be given the file's type, the file object, and\r\n     * the file reader. You will then need to call `fileReader.readAsYOUR_CORRECT_TYPE(file)`.\r\n     */\r\n    readAs: PropTypes.oneOfType([\r\n      PropTypes.oneOf(['DataURL', 'ArrayBuffer', 'Text']),\r\n      PropTypes.func,\r\n    ]),\r\n\r\n    /**\r\n     * An optional function to call when the `FileUpload` aborts. The current\r\n     * file and the abort event are given. This might not be the most useful\r\n     * function to use since you will need to manually call abort yourself anyways.\r\n     */\r\n    onAbort: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `FileUpload` errors. The current\r\n     * file, the error, and the error event are given.\r\n     *\r\n     * ```js\r\n     * onError(file, event.target.error, event);\r\n     * ```\r\n     */\r\n    onError: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `FileUpload` loads. The current\r\n     * file, the load result, and the load event are given.\r\n     *\r\n     * ```js\r\n     * onLoad(file, event.target.result, event);\r\n     * ```\r\n     *\r\n     * The load result will either be:\r\n     * - a data URL\r\n     * - a plain text string\r\n     * - an array buffer\r\n     *\r\n     * depending on what type the file is.\r\n     */\r\n    onLoad: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `FileUpload` starts loading. The current\r\n     * file and the load start event are given.\r\n     */\r\n    onLoadStart: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `FileUpload` finishes loading. The\r\n     * current file and the load end event are given.\r\n     */\r\n    onLoadEnd: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `FileUpload` progress. The current\r\n     * file, upload progress, and the progress event are given. The progress\r\n     * will be a number between 0 and 100 that has not been rounded.\r\n     *\r\n     * ```js\r\n     * onProgress(file, progress, event);\r\n     * ```\r\n     */\r\n    onProgress: PropTypes.func,\r\n\r\n    /**\r\n     * Boolean if the same file is allowed to be uploaded multiple times. This will basically make the\r\n     * `value` of the file input always blank.\r\n     */\r\n    allowDuplicates: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional function to call when a file selects or unselects a file.\r\n     * This will be called before any local uploading occurs.\r\n     *\r\n     * ```js\r\n     * onChange(file(s) || null, event);\r\n     * ```\r\n     */\r\n    onChange: PropTypes.func,\r\n    value: deprecated(\r\n      PropTypes.string,\r\n      'There should\\'t be a reason to set the value manually. Check out {@link #allowDuplicates} instead'\r\n    ),\r\n  };\r\n\r\n  state = {};\r\n\r\n  /**\r\n   * Attempts to abort the upload of a file. This function takes an optional `file` or `fileName`\r\n   * as it's parameter. If the parameter is omitted, it attempts to abort the first file that was\r\n   * added. If the `onAbort` function was given, it will be called as well.\r\n   *\r\n   * @param {Object|string} file - The file or the file name to use to find the\r\n   *     correct `FileReader`.\r\n   */\r\n  abort = (file) => {\r\n    let fileName = file;\r\n    if (!file) {\r\n      // Attempt to remove first file added...\r\n      fileName = Object.keys(this.state)[0];\r\n    } else if (typeof file.name === 'string') {\r\n      fileName = file.name;\r\n    }\r\n\r\n    const reader = this.state[fileName];\r\n    if (reader) {\r\n      reader.abort();\r\n      findDOMNode(this).querySelector('.md-file-input').value = '';\r\n\r\n      this.setState(omit(this.state, [fileName]));\r\n    }\r\n  };\r\n\r\n  _uploadFile = (file) => {\r\n    const {\r\n      onAbort,\r\n      onError,\r\n      onLoad,\r\n      onLoadStart,\r\n      onLoadEnd,\r\n      onProgress,\r\n      readAs,\r\n    } = this.props;\r\n\r\n    const { name, type } = file;\r\n\r\n    const fr = new FileReader();\r\n    if (onError) {\r\n      fr.onerror = e => {\r\n        onError(file, e.target.error, e);\r\n      };\r\n    }\r\n\r\n    if (onAbort) {\r\n      fr.onabort = e => {\r\n        onAbort(file, e);\r\n      };\r\n    }\r\n\r\n    if (onLoadStart) {\r\n      fr.onloadstart = e => {\r\n        onLoadStart(file, e);\r\n      };\r\n    }\r\n\r\n    if (onLoadEnd) {\r\n      fr.onloadend = e => {\r\n        onLoadEnd(file, e);\r\n      };\r\n    }\r\n\r\n    fr.onload = e => {\r\n      if (onLoad) {\r\n        onLoad(file, e.target.result, e);\r\n      }\r\n\r\n      this.setState(omit(this.state, [name]));\r\n    };\r\n\r\n    if (onProgress) {\r\n      fr.onprogress = e => {\r\n        if (e.lengthComputable) {\r\n          onProgress(file, (e.loaded / e.total) * 100, e);\r\n        }\r\n      };\r\n    }\r\n\r\n    if (readAs) {\r\n      if (typeof readAs === 'function') {\r\n        readAs(type, file, fr);\r\n      } else {\r\n        fr[`readAs${readAs}`](file);\r\n      }\r\n    } else if (type.match(/image|video|audio|application\\/pdf/) || name.match(/\\.mkv$/)) {\r\n      fr.readAsDataURL(file);\r\n    } else if (type.match(/application\\/json/)) {\r\n      fr.readAsText(file);\r\n    } else if (type.match(/application|model|multipart/) || name.match(/(w|e)ar$/)) {\r\n      fr.readAsArrayBuffer(file);\r\n    } else {\r\n      fr.readAsText(file);\r\n    }\r\n\r\n    return fr;\r\n  };\r\n\r\n  _handleUpload = (fileList, e) => {\r\n    if (this.props.onChange) {\r\n      this.props.onChange(fileList, e);\r\n    }\r\n\r\n    if (!fileList) { return; }\r\n    const { maxSize, onSizeError } = this.props;\r\n    let files = Array.isArray(fileList) ? fileList : [fileList];\r\n\r\n    let errorFiles = [];\r\n    if (maxSize) {\r\n      errorFiles = files.filter(file => file.size > maxSize);\r\n      files = files.filter(file => file.size <= maxSize);\r\n    }\r\n\r\n    if (errorFiles.length) {\r\n      onSizeError(errorFiles);\r\n    }\r\n\r\n    if (!files.length) {\r\n      return;\r\n    }\r\n\r\n    const nextState = {};\r\n    files.forEach(file => {\r\n      const fileReader = this._uploadFile(file);\r\n      nextState[file.name] = fileReader;\r\n    });\r\n\r\n    this.setState(nextState);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      /* eslint-disable no-unused-vars */\r\n      maxSize,\r\n      readAs,\r\n      onLoad,\r\n      onLoadStart,\r\n      onLoadEnd,\r\n      onProgress,\r\n      onAbort,\r\n      onError,\r\n      onSizeError,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    return <FileInput {...props} onChange={this._handleUpload} />;\r\n  }\r\n}\r\n"]}