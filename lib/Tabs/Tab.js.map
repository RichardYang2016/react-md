{"version":3,"sources":["../../src/js/Tabs/Tab.js"],"names":["Tab","_handleClick","e","props","onClick","index","id","controlsId","children","className","activeClassName","inactiveClassName","active","propIcon","icon","propLabel","label","iconEl","only","labelEl","propTypes","oneOfType","number","string","style","object","component","func","isRequired","node","element","bool","defaultProps"],"mappings":"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","file":"Tab.js","sourcesContent":["import React, { PureComponent, Children, cloneElement, isValidElement } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\n\r\nimport oneRequired from '../utils/PropTypes/oneRequired';\r\nimport AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';\r\n\r\n/**\r\n * The `Tab` component is used for rendering a single tab in the `Tabs` component.\r\n * It can optionally have either a `label`, an `icon` or both.\r\n */\r\nexport default class Tab extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An id for the tab. This is required for a11y. If you use the `Tabs` component, this\r\n     * will automatically be generated for you and injected into this component.\r\n     */\r\n    id: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An id for a `TabPanel` that holds the children from this tab. This is required for a11y.\r\n     * If you use the `Tabs` component, this will automatically be generated for you and injected\r\n     * into this component.\r\n     */\r\n    controlsId: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional style to apply.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * The className to use when the tab is currently active. The default className does\r\n     * not actually apply any styles.\r\n     *\r\n     * @see {@link Tabs/Tabs#activeTabClassName}\r\n     */\r\n    activeClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The className to use when the tab is not active. By default, this will set inactive\r\n     * tabs' color to `$md-white-base`. This works great if the tabs are placed on a\r\n     * colored toolbar but fails when the tabs are not colored or on a white background.\r\n     * In these cases, it is recommended to change this value to `md-text--secondary`\r\n     * or some other class name.\r\n     *\r\n     * @see {@link Tabs/Tabs#inactiveTabClassName}\r\n     */\r\n    inactiveClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The component to render as.\r\n     */\r\n    component: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.string,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * Any children to display once the tab has been selected.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * An optional icon to display in the tab. This can either be used alone, or it\r\n     * will be placed above the `label` if both are given.\r\n     */\r\n    icon: PropTypes.element,\r\n\r\n    /**\r\n     * An optional label to display in the tab. This can either be used alone, or it\r\n     * will be placed below the `icon` if both are given.\r\n     */\r\n    label: oneRequired(PropTypes.node, 'icon'),\r\n\r\n    /**\r\n     * An optional function to call when the tab is clicked. The callback includes this tab's index,\r\n     * id, controlsId, children, and finally click event. All the additional parameters are included\r\n     * if you are not using the `TabsContainer` component. The `id` and `controlsId` are mainly passed\r\n     * for accessibility.\r\n     *\r\n     * ```js\r\n     * onClick(index, id, controlsId, children, event);\r\n     * ```\r\n     */\r\n    onClick: PropTypes.func,\r\n\r\n    /**\r\n     * Boolean if the tab is currently active. If you use the `Tabs` component, this is automatically\r\n     * injected.\r\n     */\r\n    active: PropTypes.bool,\r\n\r\n    /**\r\n     * Tab's index. If you use the `Tabs` component, this is automatically injected.\r\n     */\r\n    index: PropTypes.number,\r\n  };\r\n\r\n  static defaultProps = {\r\n    component: 'li',\r\n    activeClassName: 'md-tab--active',\r\n    inactiveClassName: 'md-tab--inactive',\r\n  };\r\n\r\n  _handleClick = (e) => {\r\n    if (this.props.onClick) {\r\n      this.props.onClick(this.props.index, this.props.id, this.props.controlsId, this.props.children, e);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      controlsId,\r\n      className,\r\n      activeClassName,\r\n      inactiveClassName,\r\n      active,\r\n      /* eslint-disable no-unused-vars */\r\n      icon: propIcon,\r\n      label: propLabel,\r\n      index,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    let { icon, label } = this.props;\r\n    if (icon) {\r\n      const iconEl = Children.only(icon);\r\n      icon = cloneElement(icon, {\r\n        className: cn('md-icon--tab', iconEl.props.className),\r\n      });\r\n    }\r\n\r\n    if (isValidElement(label)) {\r\n      const labelEl = Children.only(label);\r\n      label = cloneElement(label, {\r\n        className: cn('md-tab-label', labelEl.props.className),\r\n      });\r\n    } else {\r\n      label = <div className=\"md-tab-label\">{label}</div>;\r\n    }\r\n    return (\r\n      <AccessibleFakeInkedButton\r\n        {...props}\r\n        id={id}\r\n        role=\"tab\"\r\n        onClick={this._handleClick}\r\n        className={cn('md-tab', {\r\n          'md-tab--icon': label && icon,\r\n          [activeClassName]: activeClassName && active,\r\n          [inactiveClassName]: inactiveClassName && !active,\r\n        }, className)}\r\n        aria-controls={controlsId}\r\n        aria-selected={active}\r\n      >\r\n        {icon}\r\n        {label}\r\n      </AccessibleFakeInkedButton>\r\n    );\r\n  }\r\n}\r\n"]}