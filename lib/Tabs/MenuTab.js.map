{"version":3,"sources":["../../src/js/Tabs/MenuTab.js"],"names":["MenuTab","state","visible","_toggleVisible","e","props","onClick","setState","_handleClose","id","style","className","tabStyle","tabClassName","tabs","label","activeTabIndex","overflowAtIndex","active","tab","map","propTypes","oneOfType","number","string","isRequired","arrayOf","element","shape","divider","bool","subheader","primaryText","node","object","func"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;IAKqBA,O;;;;;;;;;;;;;;wLAwEnBC,K,GAAQ,EAAEC,SAAS,KAAX,E,QAERC,c,GAAiB,UAACC,CAAD,EAAO;AACtB,UAAI,MAAKC,KAAL,CAAWC,OAAf,EAAwB;AACtB,cAAKD,KAAL,CAAWC,OAAX,CAAmBF,CAAnB;AACD;;AAED,YAAKG,QAAL,CAAc,EAAEL,SAAS,CAAC,MAAKD,KAAL,CAAWC,OAAvB,EAAd;AACD,K,QAEDM,Y,GAAe,YAAM;AACnB,YAAKD,QAAL,CAAc,EAAEL,SAAS,KAAX,EAAd;AACD,K;;;;;6BAEQ;AAAA,mBAYH,KAAKG,KAZF;AAAA,UAELI,EAFK,UAELA,EAFK;AAAA,UAGLC,KAHK,UAGLA,KAHK;AAAA,UAILC,SAJK,UAILA,SAJK;AAAA,UAKLC,QALK,UAKLA,QALK;AAAA,UAMLC,YANK,UAMLA,YANK;AAAA,UAOLC,IAPK,UAOLA,IAPK;AAAA,UAQLC,KARK,UAQLA,KARK;AAAA,UASLC,cATK,UASLA,cATK;AAAA,UAULC,eAVK,UAULA,eAVK;AAAA,UAWFZ,KAXE;;AAaP,UAAMa,SAASF,kBAAkBC,eAAjC;;AAEA,UAAME,MACJ;AAAA;AAAA,qBACMd,KADN;AAEE,mBAAS,KAAKF,cAFhB;AAGE,iBAAOS,QAHT;AAIE,qBAAW,0BAAG,qBAAH,EAA0BC,YAA1B;AAJb;AAMGE;AANH,OADF;;AAWA,aACE;AAAA;AAAA;AACE,cAAIN,EADN;AAEE,iBAAOC,KAFT;AAGE,qBAAW,0BAAG,cAAH,EAAmB;AAC5B,8BAAkBQ,MADU;AAE5B,gCAAoB,CAACA;AAFO,WAAnB,EAGRP,SAHQ,CAHb;AAOE,kBAAQQ,GAPV;AAQE,mBAAS,KAAKlB,KAAL,CAAWC,OARtB;AASE,mBAAS,KAAKM;AAThB;AAWGM,aAAKM,GAAL;AAXH,OADF;AAeD;;;;;;AA/HkBpB,O,CACZqB,S,GAAY;AACjB;;;AAGAZ,MAAI,iCAAkB,oBAAUa,SAAV,CAAoB,CACxC,oBAAUC,MAD8B,EAExC,oBAAUC,MAF8B,CAApB,CAAlB,CAJa;;AASjB;;;;;AAKAR,kBAAgB,oBAAUO,MAAV,CAAiBE,UAdhB;;AAgBjB;;;AAGAR,mBAAiB,oBAAUM,MAAV,CAAiBE,UAnBjB;;AAqBjB;;;;;;;;AAQAX,QAAM,oBAAUY,OAAV,CAAkB,oBAAUJ,SAAV,CAAoB,CAC1C,oBAAUK,OADgC,EAE1C,oBAAUH,MAFgC,EAG1C,oBAAUI,KAAV,CAAgB;AACdC,aAAS,oBAAUC,IADL;AAEdC,eAAW,oBAAUD,IAFP;AAGdE,iBAAa,oBAAUC;AAHT,GAAhB,CAH0C,CAApB,CAAlB,EAQFR,UArCa;;AAuCjB;;;AAGAf,SAAO,oBAAUwB,MA1CA;;AA4CjB;;;AAGAvB,aAAW,oBAAUa,MA/CJ;;AAiDjB;;;AAGAZ,YAAU,oBAAUsB,MApDH;;AAsDjB;;;AAGArB,gBAAc,oBAAUW,MAzDP;;AA2DjB;;;AAGAlB,WAAS,oBAAU6B,IA9DF;;AAgEjB;;;;AAIApB,SAAO,oBAAUkB,IAAV,CAAeR;AApEL,C;kBADAzB,O","file":"MenuTab.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\r\n\r\nimport Menu from '../Menus/Menu';\r\nimport AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';\r\nimport mapToListParts from '../utils/mapToListParts';\r\n\r\n/**\r\n * The `MenuTab` component is used when there are too many desktop tabs\r\n * to be displayed without any overflow. If the `Tabs` component is used,\r\n * this will automatically be included when the `menuOverflow` prop is true.\r\n */\r\nexport default class MenuTab extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An id to give the tab's menu.\r\n     */\r\n    id: isRequiredForA11y(PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ])),\r\n\r\n    /**\r\n     * The current active tab index. This is used to determine which list item\r\n     * is active in the menu, and if the styles for an active tab should be applied\r\n     * to the menu.\r\n     */\r\n    activeTabIndex: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * An tab index that caused the overflow to happen.\r\n     */\r\n    overflowAtIndex: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * A list of tabs that should be rendered in the menu once opened. This can either\r\n     * be:\r\n     *\r\n     * - a `ListItem`, `Divider`, or `Subheader` component\r\n     * - a string to use as the `primaryText` for a list item\r\n     * - an object that defines props to generate a `ListItem`, `Divider`, or `Subheader` component\r\n     */\r\n    tabs: PropTypes.arrayOf(PropTypes.oneOfType([\r\n      PropTypes.element,\r\n      PropTypes.string,\r\n      PropTypes.shape({\r\n        divider: PropTypes.bool,\r\n        subheader: PropTypes.bool,\r\n        primaryText: PropTypes.node,\r\n      }),\r\n    ])).isRequired,\r\n\r\n    /**\r\n     * An optional style to apply to the menu.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the menu.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the tab in the menu.\r\n     */\r\n    tabStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the tab in the menu.\r\n     */\r\n    tabClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional function to call when the tab is clicked.\r\n     */\r\n    onClick: PropTypes.func,\r\n\r\n    /**\r\n     * The label to display in the tab. This should normally be some text with\r\n     * a drop down arrow next to it.\r\n     */\r\n    label: PropTypes.node.isRequired,\r\n  };\r\n\r\n  state = { visible: false }\r\n\r\n  _toggleVisible = (e) => {\r\n    if (this.props.onClick) {\r\n      this.props.onClick(e);\r\n    }\r\n\r\n    this.setState({ visible: !this.state.visible });\r\n  };\r\n\r\n  _handleClose = () => {\r\n    this.setState({ visible: false });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      style,\r\n      className,\r\n      tabStyle,\r\n      tabClassName,\r\n      tabs,\r\n      label,\r\n      activeTabIndex,\r\n      overflowAtIndex,\r\n      ...props\r\n    } = this.props;\r\n    const active = activeTabIndex >= overflowAtIndex;\r\n\r\n    const tab = (\r\n      <AccessibleFakeInkedButton\r\n        {...props}\r\n        onClick={this._toggleVisible}\r\n        style={tabStyle}\r\n        className={cn('md-tab md-tab--menu', tabClassName)}\r\n      >\r\n        {label}\r\n      </AccessibleFakeInkedButton>\r\n    );\r\n\r\n    return (\r\n      <Menu\r\n        id={id}\r\n        style={style}\r\n        className={cn('md-menu--tab', {\r\n          'md-tab--active': active,\r\n          'md-tab--inactive': !active,\r\n        }, className)}\r\n        toggle={tab}\r\n        visible={this.state.visible}\r\n        onClose={this._handleClose}\r\n      >\r\n        {tabs.map(mapToListParts)}\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n"]}