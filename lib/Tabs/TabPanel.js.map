{"version":3,"sources":["../../src/js/Tabs/TabPanel.js"],"names":["TabPanel","props","Component","component","id","active","className","controlledById","children","propTypes","oneOfType","number","string","style","object","func","isRequired","bool","node","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;IAKqBA,Q;;;;;;;;;;;6BAsDV;AAAA,mBASH,KAAKC,KATF;AAAA,UAEMC,SAFN,UAELC,SAFK;AAAA,UAGLC,EAHK,UAGLA,EAHK;AAAA,UAILC,MAJK,UAILA,MAJK;AAAA,UAKLC,SALK,UAKLA,SALK;AAAA,UAMLC,cANK,UAMLA,cANK;AAAA,UAOLC,QAPK,UAOLA,QAPK;AAAA,UAQFP,KARE;;AAWP,aACE;AAAC,iBAAD;AAAA,qBACMA,KADN;AAEE,cAAIG,EAFN;AAGE,qBAAW,0BAAG,cAAH,EAAmBE,SAAnB,CAHb;AAIE,gBAAK,UAJP;AAKE,yBAAa,CAACD,MALhB;AAME,6BAAiBE;AANnB;AAQGC;AARH,OADF;AAYD;;;;;;AA7EkBR,Q,CACZS,S,GAAY;AACjB;;;;AAIAL,MAAI,iCAAkB,oBAAUM,SAAV,CAAoB,CACxC,oBAAUC,MAD8B,EAExC,oBAAUC,MAF8B,CAApB,CAAlB,CALa;;AAUjB;;;;AAIAL,kBAAgB,iCAAkB,oBAAUG,SAAV,CAAoB,CACpD,oBAAUC,MAD0C,EAEpD,oBAAUC,MAF0C,CAApB,CAAlB,CAdC;;AAmBjB;;;AAGAC,SAAO,oBAAUC,MAtBA;;AAwBjB;;;AAGAR,aAAW,oBAAUM,MA3BJ;;AA6BjB;;;AAGAT,aAAW,oBAAUO,SAAV,CAAoB,CAC7B,oBAAUK,IADmB,EAE7B,oBAAUH,MAFmB,CAApB,EAGRI,UAnCc;;AAqCjB;;;;AAIAX,UAAQ,oBAAUY,IAzCD;;AA2CjB;;;AAGAT,YAAU,oBAAUU;AA9CH,C;AADAlB,Q,CAkDZmB,Y,GAAe;AACpBhB,aAAW;AADS,C;kBAlDHH,Q","file":"TabPanel.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\r\n\r\n/**\r\n * This component is just a simple accessibility wrapper when using tabs. If you use the\r\n * `TabsContainer` component, you *should* not manually use this as the `TabsContainer`\r\n * generates this for you.\r\n */\r\nexport default class TabPanel extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An id for the panel. This is used for a11y. This should equal the `controlsId`\r\n     * of whichever tab's children will be placed in here.\r\n     */\r\n    id: isRequiredForA11y(PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ])),\r\n\r\n    /**\r\n     * An id for the tab that owns this panel. This should equal the `id` of whichever\r\n     * tab's children will be placed in here.\r\n     */\r\n    controlledById: isRequiredForA11y(PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ])),\r\n\r\n    /**\r\n     * An optional style to apply.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * The component to render the panel as.\r\n     */\r\n    component: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.string,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * Boolean if the panel is currently active. This is used to generated the `aria-hidden`\r\n     * attribute.\r\n     */\r\n    active: PropTypes.bool,\r\n\r\n    /**\r\n     * Any children to display.\r\n     */\r\n    children: PropTypes.node,\r\n  };\r\n\r\n  static defaultProps = {\r\n    component: 'div',\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      component: Component,\r\n      id,\r\n      active,\r\n      className,\r\n      controlledById,\r\n      children,\r\n      ...props\r\n    } = this.props;\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        id={id}\r\n        className={cn('md-tab-panel', className)}\r\n        role=\"tabpanel\"\r\n        aria-hidden={!active}\r\n        aria-labelledby={controlledById}\r\n      >\r\n        {children}\r\n      </Component>\r\n    );\r\n  }\r\n}\r\n"]}