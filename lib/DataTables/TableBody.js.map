{"version":3,"sources":["../../src/js/DataTables/TableBody.js"],"names":["TableBody","props","children","className","selectedRows","context","rows","map","toArray","row","i","uncontrolled","selected","cloneElement","propTypes","style","object","string","oneOfType","element","arrayOf","contextTypes"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;AAEA;;;;IAIqBA,S;;;;;;;;;;;6BAuBV;AAAA,mBACmC,KAAKC,KADxC;AAAA,UACCC,QADD,UACCA,QADD;AAAA,UACWC,SADX,UACWA,SADX;AAAA,UACyBF,KADzB;;AAAA,UAECG,YAFD,GAEkB,KAAKC,OAFvB,CAECD,YAFD;;;AAIP,UAAME,OAAOJ,WAAW,gBAASK,GAAT,CAAa,gBAASC,OAAT,CAAiBN,QAAjB,CAAb,EAAyC,UAACO,GAAD,EAAMC,CAAN,EAAY;AAC3E,YAAMC,eAAe,OAAOF,IAAIR,KAAJ,CAAUW,QAAjB,KAA8B,WAAnD;AACA,eAAO,gBAAMC,YAAN,CAAmBJ,GAAnB,EAAwB;AAC7BG,oBAAUD,eAAeP,aAAaM,CAAb,CAAf,GAAiCD,IAAIR,KAAJ,CAAUW;AADxB,SAAxB,CAAP;AAGD,OALuB,CAAX,GAKR,IALL;;AAOA,aACE;AAAA;AAAA,qBAAWX,KAAX,IAAkB,WAAW,0BAAG,eAAH,EAAoBE,SAApB,CAA7B;AACGG;AADH,OADF;AAKD;;;;;;AAvCkBN,S,CACZc,S,GAAY;AACjB;;;AAGAC,SAAO,oBAAUC,MAJA;;AAMjB;;;AAGAb,aAAW,oBAAUc,MATJ;;AAWjB;;;AAGAf,YAAU,oBAAUgB,SAAV,CAAoB,CAC5B,oBAAUC,OADkB,EAE5B,oBAAUC,OAAV,CAAkB,oBAAUD,OAA5B,CAF4B,CAApB;AAdO,C;AADAnB,S,CAqBZqB,Y;kBArBYrB,S","file":"TableBody.js","sourcesContent":["import React, { Component, Children } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\n\r\nimport contextTypes from './contextTypes';\r\n\r\n/**\r\n * The `TableBody` component is used for managing the state of all\r\n * `TableRow` inside of it.\r\n */\r\nexport default class TableBody extends Component {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply to the tbody.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the tbody.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * A list or a single item of `TableRow` components to render.\r\n     */\r\n    children: PropTypes.oneOfType([\r\n      PropTypes.element,\r\n      PropTypes.arrayOf(PropTypes.element),\r\n    ]),\r\n  };\r\n\r\n  static contextTypes = contextTypes;\r\n\r\n  render() {\r\n    const { children, className, ...props } = this.props;\r\n    const { selectedRows } = this.context;\r\n\r\n    const rows = children ? Children.map(Children.toArray(children), (row, i) => {\r\n      const uncontrolled = typeof row.props.selected === 'undefined';\r\n      return React.cloneElement(row, {\r\n        selected: uncontrolled ? selectedRows[i] : row.props.selected,\r\n      });\r\n    }) : null;\r\n\r\n    return (\r\n      <tbody {...props} className={cn('md-table-body', className)}>\r\n        {rows}\r\n      </tbody>\r\n    );\r\n  }\r\n}\r\n"]}