{"version":3,"sources":["../../src/js/DataTables/TableHeader.js"],"names":["TableHeader","context","header","props","className","children","allSelected","Children","only","selected","row","cloneElement","contextTypes","childContextTypes","propTypes","style","object","string","propName","component","e","amt","length","Error"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;;;IAOqBA,W;;;;;;;;;;;sCA+BD;AAChB,0BACK,KAAKC,OADV;AAEEC,gBAAQ;AAFV;AAID;;;6BAEQ;AAAA,mBACmC,KAAKC,KADxC;AAAA,UACCC,SADD,UACCA,SADD;AAAA,UACYC,QADZ,UACYA,QADZ;AAAA,UACyBF,KADzB;;AAAA,UAECG,WAFD,GAEiB,KAAKL,OAFtB,CAECK,WAFD;;AAGP,UAAMJ,SAAS,gBAAMK,QAAN,CAAeC,IAAf,CAAoBH,QAApB,CAAf;AACA,UAAMI,WAAW,OAAOP,OAAOC,KAAP,CAAaM,QAApB,KAAiC,WAAjC,GACbH,WADa,GAEbJ,OAAOC,KAAP,CAAaM,QAFjB;;AAIA,UAAMC,MAAM,gBAAMC,YAAN,CAAmBT,MAAnB,EAA2B,EAAEO,kBAAF,EAA3B,CAAZ;;AAEA,aACE;AAAA;AAAA,qBAAWN,KAAX,IAAkB,WAAW,0BAAG,iBAAH,EAAsBC,SAAtB,CAA7B;AACGM;AADH,OADF;AAKD;;;;;;AArDkBV,W,CACZY,Y;AADYZ,W,CAEZa,iB;AAFYb,W,CAGZc,S,GAAY;AACjB;;;AAGAC,SAAO,oBAAUC,MAJA;;AAMjB;;;AAGAZ,aAAW,oBAAUa,MATJ;;AAWjB;;;;AAIAZ,YAAU,kBAACF,KAAD,EAAQe,QAAR,EAAkBC,SAAlB,EAAgC;AACxC,QAAI;AACF,sBAAMZ,QAAN,CAAeC,IAAf,CAAoBL,MAAME,QAA1B;AACA,aAAO,IAAP;AACD,KAHD,CAGE,OAAOe,CAAP,EAAU;AACV,UAAMC,MAAMlB,MAAME,QAAN,GAAiBF,MAAME,QAAN,CAAeiB,MAAhC,GAAyC,CAArD;AACA,aAAO,IAAIC,KAAJ,0CACiCJ,SADjC,gBACoDE,GADpD,kBAAP;AAGD;AACF;AAzBgB,C;kBAHArB,W","file":"TableHeader.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport contextTypes from './contextTypes';\r\nimport headerContextTypes from './headerContextTypes';\r\n\r\n/**\r\n * A `thead` component to use in the `DataTable` component. This\r\n * will automatically update the header row to check if it is selected\r\n * and inject a function to toggle all rows selected if the row is\r\n * uncontrolled. It will also automatically attempt to set the `TableColumn`\r\n * components to be the header type.\r\n */\r\nexport default class TableHeader extends Component {\r\n  static contextTypes = contextTypes;\r\n  static childContextTypes = headerContextTypes;\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the table header\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * This should be a single `TableRow` component. The `custom` validation will\r\n     * warn you if there are more than one children given or none at all.\r\n     */\r\n    children: (props, propName, component) => {\r\n      try {\r\n        React.Children.only(props.children);\r\n        return null;\r\n      } catch (e) {\r\n        const amt = props.children ? props.children.length : 0;\r\n        return new Error(\r\n          `There must only be one child in a '${component}', but ${amt} were given.`\r\n        );\r\n      }\r\n    },\r\n  };\r\n\r\n  getChildContext() {\r\n    return {\r\n      ...this.context,\r\n      header: true,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { className, children, ...props } = this.props;\r\n    const { allSelected } = this.context;\r\n    const header = React.Children.only(children);\r\n    const selected = typeof header.props.selected === 'undefined'\r\n      ? allSelected\r\n      : header.props.selected;\r\n\r\n    const row = React.cloneElement(header, { selected });\r\n\r\n    return (\r\n      <thead {...props} className={cn('md-table-header', className)}>\r\n        {row}\r\n      </thead>\r\n    );\r\n  }\r\n}\r\n"]}