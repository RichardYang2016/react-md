{"version":3,"sources":["../../src/js/DataTables/EditDialogColumn.js"],"names":["EditDialogColumn","props","state","visible","defaultVisible","value","defaultValue","cancelValue","actions","_makeActions","cellIndex","undefined","_column","_table","_fixedTo","columns","slice","call","parentNode","querySelectorAll","setState","indexOf","nextProps","okLabel","okPrimary","okSecondary","okProps","cancelLabel","cancelPrimary","cancelSecondary","cancelProps","rowId","context","style","className","layoverStyle","layoverClassName","dialogStyle","dialogClassName","dialogContentStyle","dialogContentClassName","dialogZDepth","textFieldStyle","textFieldClassName","inputClassName","large","title","inline","inlineIcon","maxLength","label","placeholder","header","anchor","belowAnchor","fixedTo","animationPosition","xThreshold","yThreshold","centered","sameWidth","repositionOnScroll","repositionOnResize","transitionName","transitionEnterTimeout","transitionLeaveTimeout","tooltipLabel","tooltipDelay","tooltipPosition","onClick","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","onMouseEnter","onMouseOver","onMouseLeave","onTouchMove","simplifiedDialog","minLeft","minRight","minBottom","noIcon","inlineIconChildren","inlineIconClassName","propId","id","propDialogId","dialogId","propCellIndex","onOkClick","onCancelClick","okOnOutsideClick","adjusted","scrollIntoView","scrollIntoViewPadding","visibleOnFocus","scrollThreshold","enforceMinWidth","transitionDuration","inlineEditIcon","icon","cloneElement","key","numeric","type","field","_setField","hint","_handleFocus","_handleChange","_handleKeyDown","children","dialogLabel","_handleOpen","_handleClose","VerticalAnchors","HorizontalAnchors","Positions","propTypes","oneOfType","number","string","object","isRequired","inputStyle","disabled","bool","element","onChange","func","onFocus","onKeyDown","node","onOutsideClick","closeOnOutsideClick","oneOf","defaultProps","BELOW","contextTypes","_field","primary","secondary","_handleCancel","_handleOk","e","_skipNextOpen","vp","scrollLeft","offsetLeft","target","which","keyCode","shiftKey"],"mappings":"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","file":"EditDialogColumn.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { findDOMNode } from 'react-dom';\r\nimport cn from 'classnames';\r\nimport deprecated from 'react-prop-types/lib/deprecated';\r\n\r\nimport { ENTER, ESC, TAB } from '../constants/keyCodes';\r\nimport getField from '../utils/getField';\r\nimport themeColors from '../utils/themeColors';\r\nimport viewport from '../utils/Positioning/viewport';\r\nimport controlled from '../utils/PropTypes/controlled';\r\nimport anchorShape from '../Helpers/anchorShape';\r\nimport fixedToShape from '../Helpers/fixedToShape';\r\nimport positionShape from '../Helpers/positionShape';\r\nimport Layover from '../Helpers/Layover';\r\nimport FontIcon from '../FontIcons/FontIcon';\r\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\r\nimport TextField from '../TextFields/TextField';\r\nimport TableColumn from './TableColumn';\r\nimport EditDialog from './EditDialog';\r\nimport findTable from './findTable';\r\nimport findFixedTo from './findFixedTo';\r\n\r\n/**\r\n * The `EditDialogColumn` is used when there should be used when a table column's value\r\n * can be changed. It can either be displayed as a dialog or inline.\r\n *\r\n * All props that are not documented but provided will be passed on to the `TextField`\r\n * component.\r\n */\r\nexport default class EditDialogColumn extends PureComponent {\r\n  static VerticalAnchors = Layover.VerticalAnchors;\r\n  static HorizontalAnchors = Layover.HorizontalAnchors;\r\n  static Positions = Layover.Positions;\r\n\r\n  static propTypes = {\r\n    /**\r\n     * An optional id to use for the text field in the column. If this is omitted,\r\n     * the id will be `${dialogId}-field`.\r\n     *\r\n     * @see {@link #dialogId}\r\n     */\r\n    id: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional id to use for the dialog that appears in the column. If this is omitted,\r\n     * the id will be `${rowId}-${cellIndex}-edit-dialog-field`.\r\n     */\r\n    dialogId: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * The optional style to apply to the edit dialog's column.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * The optional className to apply to the edit dialog's column.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the dialog's surrounding `Layover` component.\r\n     */\r\n    layoverStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to the dialog's surrounding `Layover` component.\r\n     */\r\n    layoverClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The optional style to apply to the edit dialog.\r\n     */\r\n    dialogStyle: PropTypes.object,\r\n\r\n    /**\r\n     * The optional className to apply to the edit dialog.\r\n     */\r\n    dialogClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the dialog's content area. This is the area\r\n     * that holds the text field.\r\n     */\r\n    dialogContentStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional class name to apply to the dialog's content area. This is the area\r\n     * that holds the text field.\r\n     */\r\n    dialogContentClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The zDepth to apply to the dialog when not inline.\r\n     *\r\n     * @see {@link Papers/Paper#zDepth}\r\n     */\r\n    dialogZDepth: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * An optional style to apply to the text field.\r\n     */\r\n    textFieldStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional class name to apply to the text field.\r\n     */\r\n    textFieldClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the text field's input.\r\n     */\r\n    inputStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional class name to apply to the text field's input.\r\n     */\r\n    inputClassName: PropTypes.string,\r\n\r\n    /**\r\n     * Boolean if the edit dialog is currently disabled.\r\n     */\r\n    disabled: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the text field should be editable inline instead of in a dialog.\r\n     *\r\n     * @see {@link #inlineIcon}\r\n     */\r\n    inline: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional icon to set for the inline edit dialog column. Setting this prop to null\r\n     * will not render an icon.\r\n     */\r\n    inlineIcon: PropTypes.element,\r\n\r\n    /**\r\n     * The default value to use for the text field.\r\n     */\r\n    defaultValue: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * A value to use for the edit dialog text field. This will make the component controlled\r\n     * so you will need to provide an `onChange` function.\r\n     */\r\n    value: controlled(PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]), 'onChange', 'defaultValue'),\r\n\r\n    /**\r\n     * An optional function to call when the text field's value has changed. This is required\r\n     * if the `value` prop has been defined.\r\n     *\r\n     * @see {@link TextFields/TextField#onChange}\r\n     */\r\n    onChange: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the text field gains focus.\r\n     */\r\n    onFocus: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the keydown event is triggered on the text field.\r\n     */\r\n    onKeyDown: PropTypes.func,\r\n\r\n    /**\r\n     * An optional label for the text field. When displaying an `inline` edit dialog column,\r\n     * the `placeholder` prop should be used instead. This is because the text field changes\r\n     * to the `block` type when `inline`.\r\n     *\r\n     * @see {@link #inline}\r\n     * @see {@link #placeholder}\r\n     * @see {@link TextFields/TextField#block}\r\n     */\r\n    label: PropTypes.node,\r\n\r\n    /**\r\n     * An optional placeholder for the text field.\r\n     */\r\n    placeholder: PropTypes.string,\r\n\r\n    /**\r\n     * Boolean if the edit dialog should become a large dialog. When the dialog is large,\r\n     * the `title` prop is required.\r\n     *\r\n     * A large dialog has a Title followed by the text field, and then a cancel and ok action\r\n     * buttons below.\r\n     */\r\n    large: PropTypes.bool,\r\n\r\n    /**\r\n     * The title to use for the large edit dialog. This prop is required if the `large` prop\r\n     * is enabled.\r\n     */\r\n    title: PropTypes.node,\r\n\r\n    /**\r\n     * An optional `maxLength` to apply to the text field.\r\n     *\r\n     * @see {@link TextFields/TextField#maxLength}\r\n     */\r\n    maxLength: PropTypes.number,\r\n\r\n    /**\r\n     * An optional function to call when the \"Ok\" button has been clicked, the user presses enter\r\n     * on * the text field or when the `okOnOutsideClick` prop has been enabled and the user clicks\r\n     * somewhere on the page.\r\n     *\r\n     * The callback will include the current value and the click or keypress event.\r\n     * ```js\r\n     * onOkClick(value, event)\r\n     * ```\r\n     *\r\n     * @see {@link #large}\r\n     */\r\n    onOkClick: PropTypes.func,\r\n\r\n    /**\r\n     * The label to use for the \"Ok\" button in large dialogs.\r\n     *\r\n     * @see {@link #large}\r\n     */\r\n    okLabel: PropTypes.node.isRequired,\r\n\r\n    /**\r\n     * Boolean if the \"Ok\" button in large dialogs should be styled with the primary color.\r\n     * To get a `default` styled button, set both `okPrimary` and `okSecondary` (or omit `okSecondary`)\r\n     * to `false`.\r\n     *\r\n     * @see {@link #large}\r\n     * @see {@link #okSecondary}\r\n     */\r\n    okPrimary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the \"Ok\" button in large dialogs should be styled with the secondary color.\r\n     *\r\n     * @see {@link #large}\r\n     * @see {@link #okPrimary}\r\n     */\r\n    okSecondary: PropTypes.bool,\r\n\r\n    /**\r\n     * Any additional props to apply to the \"Ok\" button. This will override any of the other\r\n     * button props.\r\n     *\r\n     * @see {@link #okLabel}\r\n     * @see {@link #okPrimary}\r\n     * @see {@link #okSecondary}\r\n     */\r\n    okProps: PropTypes.object,\r\n\r\n    /**\r\n     * An optional function to call when the \"Cancel\" button has been clicked in large edit dialogs.\r\n     * The callback will include the text field's value before any edits occurred and the click event.\r\n     *\r\n     * ```js\r\n     * onCancelClick(previousValue, event)\r\n     * ```\r\n     *\r\n     * @see {@link #large}\r\n     */\r\n    onCancelClick: PropTypes.func,\r\n\r\n    /**\r\n     * The label to give to the \"Cancel\" button in large edit dialogs.\r\n     *\r\n     * @see {@link #large}\r\n     */\r\n    cancelLabel: PropTypes.node.isRequired,\r\n\r\n    /**\r\n     * Boolean if the \"Cancel\" button in large dialogs should be styled with the primary color.\r\n     * To get a `default` styled button, set both `cancelPrimary` and `cancelSecondary` (or\r\n     * omit `cancelSecondary`) to `false`.\r\n     *\r\n     * @see {@link #large}\r\n     * @see {@link #cancelSecondary}\r\n     */\r\n    cancelPrimary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the \"Cancel\" button in large dialogs should be styled with the secondary color.\r\n     *\r\n     * @see {@link #large}\r\n     * @see {@link #cancelPrimary}\r\n     */\r\n    cancelSecondary: PropTypes.bool,\r\n\r\n    /**\r\n     * Any additional props to apply to the \"Cancel\" button. This will override any of the other\r\n     * button props.\r\n     *\r\n     * @see {@link #cancelLabel}\r\n     * @see {@link #cancelPrimary}\r\n     * @see {@link #cancelSecondary}\r\n     */\r\n    cancelProps: PropTypes.object,\r\n\r\n    /**\r\n     * Boolean if the action for clicking somewhere on on the page while the dialog is open\r\n     * saves the changes or cancels to the previous value before opening the dialog.\r\n     *\r\n     * @see {@link #onOkClick}\r\n     * @see {@link #onCancelClick}\r\n     */\r\n    okOnOutsideClick: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional function to call when a user clicks out of the text field.\r\n     */\r\n    onOutsideClick: PropTypes.func,\r\n\r\n    /**\r\n     * Boolean if the edit dialog should be closed if the user clicks somewhere else on the page\r\n     * while the dialog is open.\r\n     */\r\n    closeOnOutsideClick: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the Edit Dialog should be visible by default. This only applies when the `inline` prop\r\n     * is not enabled.\r\n     */\r\n    defaultVisible: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the edit dialog should automatically open when the text field is focused for non-inline\r\n     * dialogs. This is enabled by default for backwards compatibility.\r\n     */\r\n    visibleOnFocus: PropTypes.bool,\r\n\r\n    /**\r\n     * The type for the text field in the edit dialog.\r\n     *\r\n     * @see {@link TextFields/TextField#type}\r\n     */\r\n    type: PropTypes.string,\r\n\r\n    /**\r\n     * This is how the dialog gets \"anchored\" to the table column.\r\n     *\r\n     * @see {@link Helpers/Layover#anchor}\r\n     */\r\n    anchor: anchorShape,\r\n\r\n    /**\r\n     * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\r\n     *\r\n     * @see {@link Helpers/Layover#belowAnchor}\r\n     */\r\n    belowAnchor: anchorShape,\r\n\r\n    /**\r\n     * This is the animation position to use for the dialog.\r\n     *\r\n     * @see {@link Helpers/Layover#animationPosition}\r\n     */\r\n    animationPosition: positionShape,\r\n\r\n    /**\r\n     * This is how the dialog should be fixed within the table. When this is omitted, it will\r\n     * automatically use the responsive table as the fixture so that the dialog will close/adjust itself\r\n     * to the scrolling of the table.\r\n     *\r\n     * @see {@link Helpers/Layover#fixedTo}\r\n     */\r\n    fixedTo: fixedToShape,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#xThreshold}\r\n     */\r\n    xThreshold: PropTypes.number,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#yThreshold}\r\n     */\r\n    yThreshold: PropTypes.number,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#centered}\r\n     */\r\n    centered: PropTypes.bool,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#sameWidth}\r\n     */\r\n    sameWidth: PropTypes.bool,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#transitionName}\r\n     */\r\n    transitionName: PropTypes.string,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#transitionEnterTimeout}\r\n     */\r\n    transitionEnterTimeout: PropTypes.number,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#transitionLeaveTimeout}\r\n     */\r\n    transitionLeaveTimeout: PropTypes.number,\r\n\r\n    /**\r\n     * The optional tooltip to render on hover.\r\n     */\r\n    tooltipLabel: PropTypes.node,\r\n\r\n    /**\r\n     * An optional delay to apply to the tooltip before it appears.\r\n     */\r\n    tooltipDelay: PropTypes.number,\r\n\r\n    /**\r\n     * The position of the tooltip.\r\n     */\r\n    tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\r\n\r\n    /**\r\n     * Boolean if the menu should automatically try to reposition itself to stay within\r\n     * the viewport when the `fixedTo` element scrolls.\r\n     *\r\n     * @see {@link Helpers/Layover#repositionOnScroll}\r\n     */\r\n    repositionOnScroll: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the menu should automatically try to reposition itself to stay within\r\n     * the viewport when the window resizes.\r\n     *\r\n     * @see {@link Helpers/Layover#repositionOnResize}\r\n     */\r\n    repositionOnResize: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the dialog logic should be simplified without any viewport logic and position\r\n     * based on the relative position of the menu. This will most like require some additional\r\n     * styles applied to the dialog.\r\n     *\r\n     * @see {@link Helpers/Layover#simplified}\r\n     */\r\n    simplifiedDialog: PropTypes.bool,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#minLeft}\r\n     */\r\n    minLeft: Layover.propTypes.minLeft,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#minRight}\r\n     */\r\n    minRight: Layover.propTypes.minLeft,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#minBottom}\r\n     */\r\n    minBottom: Layover.propTypes.minBottom,\r\n\r\n    /**\r\n     * Boolean if the edit dialog should attempt to scroll into view if the full\r\n     * dialog can not be displayed in the viewport when it was toggled open.\r\n     *\r\n     * @see {@link #scrollIntoViewPadding}\r\n     */\r\n    scrollIntoView: PropTypes.bool,\r\n\r\n    /**\r\n     * The amount of padding that should be applied when the cell is scrolled into view.\r\n     * This will be applied to the left of the cell.\r\n     */\r\n    scrollIntoViewPadding: PropTypes.number,\r\n\r\n    /**\r\n     * An optional function to call when the `click` event is triggered in the column.\r\n     */\r\n    onClick: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `mousedown` event is triggered in the column.\r\n     */\r\n    onMouseDown: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `mouseup` event is triggered in the column.\r\n     */\r\n    onMouseUp: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `touchstart` event is triggered in the column.\r\n     */\r\n    onTouchStart: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `touchend` event is triggered in the column.\r\n     */\r\n    onTouchEnd: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `mouseenter` event is triggered in the column.\r\n     */\r\n    onMouseEnter: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `mouseover` event is triggered in the column.\r\n     */\r\n    onMouseOver: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `mouseleave` event is triggered in the column.\r\n     */\r\n    onMouseLeave: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `touchmove` event is triggered in the column.\r\n     */\r\n    onTouchMove: PropTypes.func,\r\n\r\n    /**\r\n     * This is injected by the `TableRow` component.\r\n     * @access private\r\n     */\r\n    header: PropTypes.bool,\r\n\r\n    /**\r\n     * This is injected by the `TableRow` component and used to help generate the unique id for the text\r\n     * field.\r\n     *\r\n     * @access private\r\n     */\r\n    cellIndex: PropTypes.number,\r\n\r\n    /**\r\n     * @access private\r\n     */\r\n    adjusted: PropTypes.bool,\r\n\r\n    inlineIconChildren: deprecated(PropTypes.node, 'Use the `inlineIcon` prop instead'),\r\n    inlineIconClassName: deprecated(PropTypes.string, 'Use the `inlineIcon` prop instead'),\r\n    noIcon: deprecated(PropTypes.bool, 'Set the `inlineIcon` prop to `null` instead'),\r\n    enforceMinWidth: deprecated(\r\n      PropTypes.bool,\r\n      'The min width will always be enforced based on the `$md-edit-dialog-min-width` Sass variable'\r\n    ),\r\n    scrollThreshold: deprecated(\r\n      PropTypes.number,\r\n      'Use `xThreshold` and `yThreshold` instead'\r\n    ),\r\n    transitionDuration: deprecated(\r\n      PropTypes.number,\r\n      'use `transitionEnterTimeout` and `transitionLeaveTimeout` instead'\r\n    ),\r\n  };\r\n\r\n  static defaultProps = {\r\n    type: 'text',\r\n    defaultValue: '',\r\n    okOnOutsideClick: true,\r\n    inlineIcon: <FontIcon>edit</FontIcon>,\r\n    okLabel: 'Save',\r\n    okPrimary: true,\r\n    cancelLabel: 'Cancel',\r\n    cancelPrimary: true,\r\n    animationPosition: EditDialogColumn.Positions.BELOW,\r\n    dialogZDepth: 1,\r\n    repositionOnScroll: true,\r\n    repositionOnResize: false,\r\n    scrollIntoView: true,\r\n    scrollIntoViewPadding: 16,\r\n    minLeft: 0,\r\n    minRight: 0,\r\n    minBottom: 0,\r\n    visibleOnFocus: true,\r\n    defaultVisible: false,\r\n  };\r\n\r\n  static contextTypes = {\r\n    rowId: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      visible: props.defaultVisible,\r\n      value: props.defaultValue,\r\n      cancelValue: props.defaultValue,\r\n      actions: this._makeActions(props),\r\n      cellIndex: undefined,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._column = findDOMNode(this);\r\n    this._table = findTable(this._column);\r\n    this._fixedTo = findFixedTo(this._table);\r\n\r\n    // If a developer creates their own component to wrap the EditDialogColumn, the cellIndex prop\r\n    // might not be defined if they don't pass ...props\r\n    const { cellIndex } = this.props;\r\n    if (!cellIndex && cellIndex !== 0) {\r\n      const columns = [].slice.call(this._column.parentNode.querySelectorAll('th,td'));\r\n      this.setState({ cellIndex: columns.indexOf(this._column) }); // eslint-disable-line react/no-did-mount-set-state\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const {\r\n      okLabel,\r\n      okPrimary,\r\n      okSecondary,\r\n      okProps,\r\n      cancelLabel,\r\n      cancelPrimary,\r\n      cancelSecondary,\r\n      cancelProps,\r\n    } = this.props;\r\n\r\n    if (okLabel !== nextProps.okLabel || okPrimary !== nextProps.okPrimary\r\n      || okSecondary !== nextProps.okSecondary || cancelLabel !== nextProps.cancelLabel\r\n      || cancelPrimary !== nextProps.cancelPrimary || cancelSecondary !== nextProps.cancelSecondary\r\n      || okProps !== nextProps.okProps || cancelProps !== nextProps.cancelProps\r\n    ) {\r\n      this.setState({ actions: this._makeActions(nextProps) });\r\n    }\r\n  }\r\n\r\n  _setField = (field) => {\r\n    this._field = field;\r\n  };\r\n\r\n  _makeActions = (props) => {\r\n    const {\r\n      okLabel,\r\n      okPrimary,\r\n      okSecondary,\r\n      okProps,\r\n      cancelLabel,\r\n      cancelPrimary,\r\n      cancelSecondary,\r\n      cancelProps,\r\n    } = props;\r\n\r\n    return [{\r\n      key: 'cancel',\r\n      children: cancelLabel,\r\n      primary: cancelPrimary && !cancelSecondary,\r\n      secondary: cancelSecondary,\r\n      ...cancelProps,\r\n      onClick: this._handleCancel,\r\n    }, {\r\n      key: 'ok',\r\n      children: okLabel,\r\n      primary: okPrimary && !okSecondary,\r\n      secondary: okSecondary,\r\n      ...okProps,\r\n      onClick: this._handleOk,\r\n    }];\r\n  };\r\n\r\n  _handleOpen = (e) => {\r\n    if (this._skipNextOpen) {\r\n      this._skipNextOpen = false;\r\n    } else if (this.props.visibleOnFocus || !e || e.type !== 'focus') {\r\n      const { scrollIntoView, scrollIntoViewPadding } = this.props;\r\n      if (scrollIntoView) {\r\n        const vp = viewport(this._column);\r\n        if (vp !== true && this._table && this._column && !this.props.inline) {\r\n          this._table.scrollLeft = this._column.offsetLeft - scrollIntoViewPadding;\r\n        }\r\n      }\r\n\r\n      this.setState({ visible: true, cancelValue: getField(this.props, this.state, 'value') });\r\n    }\r\n  };\r\n\r\n  _handleClose = (e) => {\r\n    const { onOutsideClick, okOnOutsideClick } = this.props;\r\n    if (onOutsideClick) {\r\n      onOutsideClick(e);\r\n    }\r\n\r\n    if (okOnOutsideClick) {\r\n      this._handleOk(e);\r\n    } else {\r\n      this._handleCancel(e);\r\n    }\r\n  };\r\n\r\n  _handleChange = (value, e) => {\r\n    if (this.props.onChange) {\r\n      this.props.onChange(value, e);\r\n    }\r\n\r\n    if (typeof this.props.value === 'undefined') {\r\n      this.setState({ value });\r\n    }\r\n  };\r\n\r\n  _handleFocus = (e) => {\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(e);\r\n    }\r\n\r\n    if (this.props.inline) {\r\n      this.setState({ cancelValue: e.target.value });\r\n    }\r\n  };\r\n\r\n  _handleKeyDown = (e) => {\r\n    const { onKeyDown, okOnOutsideClick, large } = this.props;\r\n    if (onKeyDown) {\r\n      onKeyDown(e);\r\n    }\r\n\r\n    const key = e.which || e.keyCode;\r\n    if (key === ENTER) {\r\n      this._handleOk(e);\r\n    } else if (key === ESC) {\r\n      this._handleCancel(e);\r\n    } else if (key === TAB && !large) {\r\n      // infinitely opens otherwise...\r\n      this._skipNextOpen = e.shiftKey;\r\n\r\n      if (okOnOutsideClick) {\r\n        this._handleOk(e);\r\n      } else {\r\n        this._handleCancel(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  _handleOk = (e) => {\r\n    if (this.props.onOkClick) {\r\n      this.props.onOkClick(getField(this.props, this.state, 'value'), e);\r\n    }\r\n\r\n    this.setState({ visible: false });\r\n  };\r\n\r\n  _handleCancel = (e) => {\r\n    const value = this.state.cancelValue;\r\n    if (this.props.onCancelClick) {\r\n      this.props.onCancelClick(value, e);\r\n    }\r\n\r\n    const state = { visible: false };\r\n    if (typeof this.props.value === 'undefined') {\r\n      state.value = value;\r\n    }\r\n\r\n    this.setState(state);\r\n  };\r\n\r\n  render() {\r\n    const { rowId } = this.context;\r\n    const {\r\n      style,\r\n      className,\r\n      layoverStyle,\r\n      layoverClassName,\r\n      dialogStyle,\r\n      dialogClassName,\r\n      dialogContentStyle,\r\n      dialogContentClassName,\r\n      dialogZDepth,\r\n      textFieldStyle,\r\n      textFieldClassName,\r\n      inputClassName,\r\n      large,\r\n      title,\r\n      inline,\r\n      inlineIcon,\r\n      maxLength,\r\n      label,\r\n      placeholder,\r\n      header,\r\n      anchor,\r\n      belowAnchor,\r\n      fixedTo,\r\n      animationPosition,\r\n      xThreshold,\r\n      yThreshold,\r\n      centered,\r\n      sameWidth,\r\n      repositionOnScroll,\r\n      repositionOnResize,\r\n      transitionName,\r\n      transitionEnterTimeout,\r\n      transitionLeaveTimeout,\r\n      tooltipLabel,\r\n      tooltipDelay,\r\n      tooltipPosition,\r\n      onClick,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      onTouchStart,\r\n      onTouchEnd,\r\n      onMouseEnter,\r\n      onMouseOver,\r\n      onMouseLeave,\r\n      onTouchMove,\r\n      simplifiedDialog,\r\n      minLeft,\r\n      minRight,\r\n      minBottom,\r\n\r\n      // deprecated\r\n      noIcon,\r\n      inlineIconChildren,\r\n      inlineIconClassName,\r\n      /* eslint-disable no-unused-vars */\r\n      id: propId,\r\n      dialogId: propDialogId,\r\n      cellIndex: propCellIndex,\r\n      onOkClick,\r\n      okLabel,\r\n      okPrimary,\r\n      okSecondary,\r\n      okProps,\r\n      onCancelClick,\r\n      cancelLabel,\r\n      cancelPrimary,\r\n      cancelSecondary,\r\n      cancelProps,\r\n      okOnOutsideClick,\r\n      defaultValue,\r\n      adjusted,\r\n      scrollIntoView,\r\n      scrollIntoViewPadding,\r\n      defaultVisible,\r\n      visibleOnFocus,\r\n\r\n      // deprecated\r\n      scrollThreshold,\r\n      enforceMinWidth,\r\n      transitionDuration,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n    const { visible, actions } = this.state;\r\n    const value = getField(this.props, this.state, 'value');\r\n    const cellIndex = getField(this.props, this.state, 'cellIndex');\r\n\r\n    let { id, dialogId } = this.props;\r\n    if (!dialogId) {\r\n      dialogId = `${id || `${rowId}-${cellIndex}`}-edit-dialog`;\r\n    }\r\n\r\n    if (!id) {\r\n      id = `${dialogId}-field`;\r\n    }\r\n\r\n    let inlineEditIcon;\r\n    if (inline && !noIcon) {\r\n      const icon = getDeprecatedIcon(inlineIconClassName, inlineIconChildren, inlineIcon);\r\n      if (icon) {\r\n        inlineEditIcon = React.cloneElement(icon, { key: 'edit-icon' });\r\n      }\r\n    }\r\n\r\n    const numeric = props.type === 'number';\r\n    const field = (\r\n      <TextField\r\n        {...props}\r\n        ref={this._setField}\r\n        style={textFieldStyle}\r\n        className={cn({ 'md-edit-dialog__blocked-field': inline }, textFieldClassName)}\r\n        inputClassName={cn({\r\n          'md-edit-dialog__header': header && inline,\r\n          'md-text-right': numeric,\r\n        }, themeColors({ hint: header && inline }), inputClassName)}\r\n        id={id}\r\n        label={label}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onFocus={this._handleFocus}\r\n        onChange={this._handleChange}\r\n        onKeyDown={this._handleKeyDown}\r\n        block={inline}\r\n        maxLength={visible ? maxLength : null}\r\n        rightIcon={inlineEditIcon}\r\n      />\r\n    );\r\n\r\n    let children;\r\n    if (inline) {\r\n      children = field;\r\n    } else {\r\n      const dialogLabel = value || value === 0 ? value : placeholder || label;\r\n      children = (\r\n        <EditDialog\r\n          style={layoverStyle}\r\n          className={layoverClassName}\r\n          dialogStyle={dialogStyle}\r\n          dialogClassName={dialogClassName}\r\n          dialogContentStyle={dialogContentStyle}\r\n          dialogContentClassName={dialogContentClassName}\r\n          id={dialogId}\r\n          textFieldId={id}\r\n          visible={visible}\r\n          onOpen={this._handleOpen}\r\n          onClose={this._handleClose}\r\n          label={dialogLabel}\r\n          actions={actions}\r\n          large={large}\r\n          title={title}\r\n          header={header}\r\n          placeholder={dialogLabel === placeholder || dialogLabel === label}\r\n          simplified={simplifiedDialog}\r\n          anchor={anchor}\r\n          belowAnchor={belowAnchor}\r\n          animationPosition={animationPosition}\r\n          xThreshold={xThreshold}\r\n          yThreshold={yThreshold}\r\n          centered={centered}\r\n          sameWidth={sameWidth}\r\n          minLeft={minLeft}\r\n          minRight={minRight}\r\n          minBottom={minBottom}\r\n          fixedTo={typeof fixedTo !== 'undefined' ? fixedTo : this._fixedTo}\r\n          dialogZDepth={dialogZDepth}\r\n          repositionOnScroll={repositionOnScroll}\r\n          repositionOnResize={repositionOnResize}\r\n          transitionName={transitionName}\r\n          transitionEnterTimeout={transitionEnterTimeout}\r\n          transitionLeaveTimeout={transitionLeaveTimeout}\r\n        >\r\n          {field}\r\n        </EditDialog>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <TableColumn\r\n        style={style}\r\n        numeric={numeric}\r\n        className={cn('md-edit-dialog-column', className)}\r\n        header={header}\r\n        adjusted={false}\r\n        tooltipLabel={tooltipLabel}\r\n        tooltipDelay={tooltipDelay}\r\n        tooltipPosition={tooltipPosition}\r\n        onClick={onClick}\r\n        onMouseDown={onMouseDown}\r\n        onMouseUp={onMouseUp}\r\n        onTouchStart={onTouchStart}\r\n        onTouchMove={onTouchMove}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseOver={onMouseOver}\r\n        onMouseLeave={onMouseLeave}\r\n        onTouchEnd={onTouchEnd}\r\n      >\r\n        {children}\r\n      </TableColumn>\r\n    );\r\n  }\r\n}\r\n"]}