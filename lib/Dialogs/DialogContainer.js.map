{"version":3,"sources":["../../src/js/Dialogs/DialogContainer.js"],"names":["DialogContainer","props","visible","isOpen","dialogVisible","defaultVisibleTransitionable","state","active","fullPage","portalVisible","_mountDialog","nextProps","el","context","window","pageX","scrollX","pageY","scrollY","scrollTop","scrollLeft","_pageX","_pageY","_inTimeout","clearTimeout","_activeElement","document","activeElement","_mountPortal","setState","prevProps","closeOnEsc","modal","escapable","prevEscapable","add","remove","addEventListener","_handleEscClose","removeEventListener","style","className","dialogStyle","dialogClassName","component","transitionEnterTimeout","transitionLeaveTimeout","lastChild","portal","propVisible","propRenderNode","renderNode","onShow","onHide","disableScrollLocking","close","actionLeft","actionRight","transitionName","transitionEnter","transitionLeave","dialog","_handleDialogMounting","_unmountPortal","container","_setContainer","_handleClick","propTypes","id","oneOfType","number","string","object","titleStyle","titleClassName","footerStyle","footerClassName","contentStyle","contentClassName","func","isRequired","contentComponent","children","node","actions","element","arrayOf","bool","propName","args","validator","componentName","componentNameSafe","err","title","Error","location","additionalFocusKeys","initialFocus","focusOnMount","containFocus","autopadContent","autosizeContent","height","width","stackedActions","defaultProps","contextTypes","_container","e","which","keyCode","setTimeout","target","focus","scrollEl","getElementById","parentNode","classList","contains"],"mappings":"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","file":"DialogContainer.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { findDOMNode } from 'react-dom';\r\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\r\nimport cn from 'classnames';\r\nimport deprecated from 'react-prop-types/lib/deprecated';\r\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\r\n\r\nimport { ESC } from '../constants/keyCodes';\r\nimport TICK from '../constants/CSSTransitionGroupTick';\r\nimport getField from '../utils/getField';\r\nimport toggleScroll from '../utils/toggleScroll';\r\nimport oneRequiredForA11y from '../utils/PropTypes/oneRequiredForA11y';\r\nimport Dialog from './Dialog';\r\nimport Portal from '../Helpers/Portal';\r\n\r\n/**\r\n * The `DialogContainer` component is used for dynamically creating the `Dialog` with\r\n * transitions.\r\n */\r\nexport default class DialogContainer extends PureComponent {\r\n  /* eslint-disable max-len */\r\n  static propTypes = {\r\n    /**\r\n     * An id to use for the `Dialog` once it has been opened. This is used for the\r\n     * [dialog role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_dialog_role).\r\n     * This is used to generate an `id` for the `title` prop when it has been defined.\r\n     */\r\n    id: isRequiredForA11y(PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ])),\r\n    /* eslint-enable max-len */\r\n\r\n    /**\r\n     * An optional accessibility prop to use when the `Dialog` is opened. This should be an id\r\n     * pointing to some text that describes the content of the dialog. For accessibility\r\n     * reasons, one of the following props must be defined:\r\n     * - `title`\r\n     * - `aria-describedby`\r\n     * - `aria-labelledby`\r\n     * - `aria-label`\r\n     *\r\n     * An example usage:\r\n     *\r\n     * ```js\r\n     * <Dialog id=\"accessible-example\" visible aria-describedby=\"accessible-content\">\r\n     *   <p id=\"accessible-content\">This is some content that describes the dialog.</p>\r\n     * </Dialog>\r\n     * ```\r\n     */\r\n    'aria-describedby': oneRequiredForA11y(PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]), 'title', 'aria-labelledby', 'aria-label'),\r\n\r\n    /**\r\n     * An optional accessibility prop to use when the `title` prop is not given. This should be\r\n     * an id pointing to a `h` tag that labels the dialog.\r\n     *\r\n     * An example usage:\r\n     *\r\n     * ```js\r\n     * <Dialog visible id=\"accessible-example\" aria-labelledby=\"accessible-dialog-label\">\r\n     *   <h2 id=\"accessible-dialog-label\">Some Accessible Dialog</h2>\r\n     * </Dialog>\r\n     * ```\r\n     */\r\n    'aria-labelledby': PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional accessibility prop to use when the `title` and `aria-labelledby` props are\r\n     * not defined. This should be a string that describes what is in the `Dialog`.\r\n     *\r\n     * An example usage:\r\n     *\r\n     * ```js\r\n     * <Dialog visible id=\"accessible-example\" aria-label=\"Some Accessible Dialog\">\r\n     *   <p>Lorem Ipsum</p>\r\n     * </Dialog>\r\n     * ```\r\n     */\r\n    'aria-label': PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the dialog's container.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the dialog's container.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the dialog itself when the `visible` prop is `true`.\r\n     */\r\n    dialogStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the dialog itself when the `visible` prop is `true`.\r\n     */\r\n    dialogClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional styke to apply to the title.\r\n     */\r\n    titleStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the title.\r\n     */\r\n    titleClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the footer. This is used when the `actions`\r\n     * prop is defined.\r\n     */\r\n    footerStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the footer. This is used when the `actions`\r\n     * prop is defined.\r\n     */\r\n    footerClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the dialog's content.\r\n     */\r\n    contentStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the dialog's content.\r\n     */\r\n    contentClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The component to render the dialog's container in.\r\n     */\r\n    component: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.string,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * The component to render the dialog's content in.\r\n     */\r\n    contentComponent: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.string,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * The content to display in the dialog once open.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * A single action or a list of actions to display in the dialog. This can either be a list\r\n     * of `FlatButton` props or `<Button flat {...props} />` elements.\r\n     */\r\n    actions: PropTypes.oneOfType([\r\n      PropTypes.element,\r\n      PropTypes.object,\r\n      PropTypes.arrayOf(PropTypes.oneOfType([\r\n        PropTypes.element,\r\n        PropTypes.object,\r\n      ])),\r\n    ]),\r\n\r\n    /**\r\n     * Boolean if the `Dialog` is current visible.\r\n     */\r\n    visible: PropTypes.bool.isRequired,\r\n\r\n    /**\r\n     * An optional function to call when the `visible` prop is changed from `false` to `true`.\r\n     */\r\n    onShow: PropTypes.func,\r\n\r\n    /**\r\n     * A function to call that will close the dialog. This is required when the `modal` and `fullPage`\r\n     * props are not `true`.\r\n     */\r\n    onHide: (props, propName, ...args) => {\r\n      let validator = PropTypes.func;\r\n      if (!props.modal && !props.fullPage) {\r\n        validator = validator.isRequired;\r\n      }\r\n\r\n      return validator(props, propName, ...args);\r\n    },\r\n\r\n    /**\r\n     * Boolean if the dialog should behave like a modal. This means that the dialog can only\r\n     * be closed by clicking on an action instead of also clicking on the overlay.\r\n     */\r\n    modal: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the dialog should be displayed as a full page dialog.\r\n     */\r\n    fullPage: (props, propName, componentName, ...args) => {\r\n      const componentNameSafe = componentName || '<<anonymous>>';\r\n      let err = PropTypes.bool(props, propName, componentName, ...args);\r\n\r\n      if (!err && props[propName] && typeof props.title !== 'undefined') {\r\n        err = new Error(\r\n          `You provided a \\`title\\` ${location} to the \\`${componentNameSafe}\\` when \\`fullPage\\` ` +\r\n          'has been set to true. A title for a full page dialog should be rendered as a child instead.'\r\n        );\r\n      }\r\n\r\n      return err;\r\n    },\r\n\r\n    /**\r\n     * An optional pageX location to use when rendering a full page dialog. This is used to set the location\r\n     * the dialog should appear from.\r\n     */\r\n    pageX: PropTypes.number,\r\n\r\n    /**\r\n     * An optional pageY location to use when rendering a full page dialog. This is used to set the location\r\n     * the dialog should appear from.\r\n     */\r\n    pageY: PropTypes.number,\r\n\r\n    /**\r\n     * @see {@link Helpers/FocusContainer#additionalFocusKeys}\r\n     */\r\n    additionalFocusKeys: Dialog.propTypes.additionalFocusKeys,\r\n\r\n    /**\r\n     * @see {@link Helpers/FocusContainer#initialFocus}\r\n     */\r\n    initialFocus: Dialog.propTypes.initialFocus,\r\n\r\n    /**\r\n     * @see {@link Helpers/FocusContainer#focusOnMount}\r\n     */\r\n    focusOnMount: Dialog.propTypes.focusOnMount,\r\n\r\n    /**\r\n     * @see {@link Helpers/FocusContainer#containFocus}\r\n     */\r\n    containFocus: Dialog.propTypes.containFocus,\r\n\r\n    /**\r\n     * The transition enter timeout for the dialog.\r\n     */\r\n    transitionEnterTimeout: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * The transition leave timeout for the dialog.\r\n     */\r\n    transitionLeaveTimeout: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * Boolean if the dialog should be closable by pressing the escape key.\r\n     * This will always be considered `false` of the `modal` props is `true`.\r\n     */\r\n    closeOnEsc: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the Portal's functionality of rendering in a separate react tree should be applied\r\n     * to the dialog.\r\n     *\r\n     * @see {@link Helpers/Portal}\r\n     */\r\n    portal: PropTypes.bool,\r\n\r\n    /**\r\n     * Since the `Dialog` uses the `Portal` component, you can pass an optional HTML Node to render\r\n     * the dialog in instead of the `document.body`.\r\n     */\r\n    renderNode: PropTypes.object,\r\n\r\n    /**\r\n     * Boolean if the dialog should be rendered as the last child in the `renderNode` or `body` instead\r\n     * of as the first.\r\n     */\r\n    lastChild: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional title for the dialog.\r\n     */\r\n    title: PropTypes.node,\r\n\r\n    /**\r\n     * Boolean if the dialog should animate into view if it is constructed with `visible` enabled.\r\n     *\r\n     * This basically means that if the `Dialog` has `visible` enabled on initial page load, does it animate?\r\n     * In some cases, it can also mean if the `Dialog` is added to the render tree with `visible` enabled,\r\n     * does it animate?\r\n     */\r\n    defaultVisibleTransitionable: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the Dialog should no longer try to prevent the parent container from scrolling while visible.\r\n     * In most cases, this will attempt to prevent the main window scrolling. If this dialog is nested in another\r\n     * dialog, it will attempt to prevent the parent dialog from scrolling.\r\n     */\r\n    disableScrollLocking: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the dialog should automatically try to determine if the content\r\n     * should be padded. It will be padded if the dialog does not contain a `List`.\r\n     */\r\n    autopadContent: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the dialog content's size should automatically be resized to overflow\r\n     * correctly when there is a lot of content. This will calculate and apply some `maxHeight`\r\n     * to the `contentStyle`.\r\n     */\r\n    autosizeContent: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional height to apply to the dialog. This is used if it is easier to just apply height/width\r\n     * with for specific dialogs instead of in CSS.\r\n     *\r\n     * **This prop should not be used if the `fullPage` prop is enabled.**\r\n     *\r\n     * @see {@link #fullPage}\r\n     * @see {@link #width}\r\n     */\r\n    height: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional width to apply to the dialog. This is used if it is easier to just apply height/width\r\n     * with for specific dialogs instead of in CSS.\r\n     *\r\n     * **This prop should not be used if the `fullPage` prop is enabled.**\r\n     *\r\n     * @see {@link #fullPage}\r\n     * @see {@link #height}\r\n     */\r\n    width: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * Boolean if the actions should be stacked on top of each other. If this value is `undefined`, it will\r\n     * automatically attempt to guess if the items should be stacked.\r\n     */\r\n    stackedActions: PropTypes.bool,\r\n\r\n    isOpen: deprecated(PropTypes.bool, 'Use `visible` instead'),\r\n    transitionName: deprecated(PropTypes.string, 'The transition name will be managed by the component'),\r\n    transitionEnter: deprecated(PropTypes.bool, 'The transition will always be enforced'),\r\n    transitionLeave: deprecated(PropTypes.bool, 'The transition will always be enforced'),\r\n    actionLeft: deprecated(PropTypes.node, 'Use the `fullPage` prop instead'),\r\n    actionRight: deprecated(PropTypes.node, 'Use the `fullPage` prop instead'),\r\n    close: deprecated(PropTypes.func, 'Use `onHide` instead'),\r\n  };\r\n\r\n  static defaultProps = {\r\n    autopadContent: true,\r\n    autosizeContent: true,\r\n    component: 'span',\r\n    closeOnEsc: true,\r\n    contentComponent: 'section',\r\n    focusOnMount: true,\r\n    transitionEnterTimeout: 300,\r\n    transitionLeaveTimeout: 300,\r\n    defaultVisibleTransitionable: false,\r\n  };\r\n\r\n  static contextTypes = {\r\n    renderNode: PropTypes.object,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const visible = typeof props.isOpen !== 'undefined' ? props.isOpen : props.visible;\r\n    const dialogVisible = visible && !props.defaultVisibleTransitionable;\r\n\r\n    this.state = {\r\n      active: visible && !props.fullPage,\r\n      portalVisible: visible,\r\n      dialogVisible,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.props.isOpen && !this.props.visible) {\r\n      return;\r\n    }\r\n\r\n    this._mountDialog(this.props);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const visible = typeof nextProps.isOpen !== 'undefined' ? nextProps.isOpen : nextProps.visible;\r\n    if (this.props.isOpen === visible || this.props.visible === visible) {\r\n      return;\r\n    }\r\n\r\n    const el = getField(this.props, this.context, 'renderNode') || window;\r\n    let { scrollX: pageX, scrollY: pageY } = el;\r\n    if (typeof el.scrollTop !== 'undefined' && typeof el.scrollLeft !== 'undefined') {\r\n      pageX = el.scrollLeft;\r\n      pageY = el.scrollTop;\r\n    } else if (typeof el.scrollY !== 'undefined' && typeof el.scrollX !== 'undefined') {\r\n      pageX = el.scrollX;\r\n      pageY = el.scrollY;\r\n    }\r\n\r\n    this._pageX = pageX;\r\n    this._pageY = pageY;\r\n\r\n    if (this._inTimeout) {\r\n      clearTimeout(this._inTimeout);\r\n      this._inTimeout = null;\r\n    }\r\n\r\n    if (visible) {\r\n      this._activeElement = document.activeElement;\r\n      this._mountPortal(nextProps);\r\n    } else {\r\n      this.setState({ dialogVisible: false, active: false });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { visible, closeOnEsc, modal } = this.props;\r\n    const escapable = !modal && closeOnEsc;\r\n    const prevEscapable = !prevProps.modal && prevProps.closeOnEsc;\r\n\r\n    // Only going to support visible here since it was not implemented before.\r\n    if (visible === prevProps.visible && escapable === prevEscapable) {\r\n      return;\r\n    }\r\n\r\n    let add = false;\r\n    let remove = false;\r\n\r\n    if (escapable !== prevEscapable) {\r\n      add = visible && escapable;\r\n      remove = !visible || (prevEscapable && !escapable);\r\n    } else if (escapable) {\r\n      add = visible;\r\n      remove = !visible;\r\n    }\r\n\r\n    if (add) {\r\n      window.addEventListener('keydown', this._handleEscClose);\r\n    } else if (remove) {\r\n      window.removeEventListener('keydown', this._handleEscClose);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.props.isOpen || this.props.visible) {\r\n      toggleScroll(false);\r\n    }\r\n\r\n    if (this.props.visible && (this.props.closeOnEsc && !this.props.modal)) {\r\n      window.removeEventListener('keydown', this._handleEscClose);\r\n    }\r\n\r\n    if (this._inTimeout) {\r\n      clearTimeout(this._inTimeout);\r\n    }\r\n  }\r\n\r\n  _setContainer = (container) => {\r\n    if (container !== null) {\r\n      this._container = findDOMNode(container);\r\n    }\r\n  };\r\n\r\n  _handleEscClose = (e) => {\r\n    if ((e.which || e.keyCode) === ESC) {\r\n      (this.props.onHide || this.props.close)(e);\r\n    }\r\n  };\r\n\r\n  _mountPortal = (props) => {\r\n    this._mountDialog(props);\r\n    this.setState({ portalVisible: true });\r\n  };\r\n\r\n  _mountDialog = (props) => {\r\n    const { fullPage, onShow } = props;\r\n    this._inTimeout = setTimeout(() => {\r\n      this._inTimeout = fullPage ? null : setTimeout(() => {\r\n        this._inTimeout = null;\r\n        this.setState({ active: true });\r\n      }, TICK);\r\n      this.setState({ dialogVisible: true }, onShow);\r\n    }, TICK);\r\n  };\r\n\r\n  _unmountPortal = () => {\r\n    this.setState({ portalVisible: false });\r\n  };\r\n\r\n  _handleClick = (e) => {\r\n    const visible = typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : this.props.visible;\r\n    if (this.props.modal || !visible || e.target !== this._container) {\r\n      return;\r\n    }\r\n\r\n    (this.props.onHide || this.props.close)(e);\r\n  };\r\n\r\n  _handleDialogMounting = (dialog) => {\r\n    const { disableScrollLocking } = this.props;\r\n    if (dialog === null) {\r\n      if (this._activeElement) {\r\n        this._activeElement.focus();\r\n      }\r\n\r\n      if (!disableScrollLocking) {\r\n        toggleScroll(false, this.scrollEl);\r\n      }\r\n\r\n      this._activeElement = null;\r\n    } else {\r\n      const container = document.getElementById(this.props.id);\r\n      if (!container || disableScrollLocking) {\r\n        return;\r\n      }\r\n\r\n      let el = getField(this.props, this.context, 'renderNode');\r\n      let node = container.parentNode;\r\n      while (node && node.classList && !el) {\r\n        if (node.classList.contains('md-dialog')) {\r\n          el = node;\r\n        }\r\n\r\n        node = node.parentNode;\r\n      }\r\n\r\n      this.scrollEl = el;\r\n      toggleScroll(true, el);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { active, dialogVisible, portalVisible } = this.state;\r\n    const {\r\n      style,\r\n      className,\r\n      dialogStyle,\r\n      dialogClassName,\r\n      modal,\r\n      fullPage,\r\n      component,\r\n      transitionEnterTimeout,\r\n      transitionLeaveTimeout,\r\n      lastChild,\r\n      portal,\r\n      /* eslint-disable no-unused-vars */\r\n      visible: propVisible,\r\n      renderNode: propRenderNode,\r\n      closeOnEsc,\r\n      onShow,\r\n      onHide,\r\n      disableScrollLocking,\r\n      defaultVisibleTransitionable,\r\n\r\n      // deprecated\r\n      close,\r\n      isOpen,\r\n      actionLeft,\r\n      actionRight,\r\n      transitionName,\r\n      transitionEnter,\r\n      transitionLeave,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    const renderNode = getField(this.props, this.context, 'renderNode');\r\n    const dialog = (\r\n      <Dialog\r\n        key=\"dialog\"\r\n        style={dialogStyle}\r\n        className={cn('md-background--card', dialogClassName)}\r\n        ref={this._handleDialogMounting}\r\n        centered={!fullPage}\r\n        fullPage={fullPage}\r\n        {...props}\r\n        containerX={this._pageX}\r\n        containerY={this._pageY}\r\n        onLeave={this._unmountPortal}\r\n      />\r\n    );\r\n\r\n    const container = (\r\n      <CSSTransitionGroup\r\n        component={component}\r\n        ref={this._setContainer}\r\n        style={style}\r\n        className={cn('md-dialog-container', {\r\n          'md-overlay': !fullPage,\r\n          'md-overlay--active': !fullPage && active && propVisible,\r\n          'md-pointer--hover': !fullPage && !modal && propVisible,\r\n        }, className)}\r\n        transitionName={`md-dialog--${fullPage ? 'full-page' : 'centered'}`}\r\n        transitionEnterTimeout={transitionEnterTimeout}\r\n        transitionLeaveTimeout={transitionLeaveTimeout}\r\n        tabIndex={-1}\r\n        onClick={this._handleClick}\r\n      >\r\n        {dialogVisible ? dialog : null}\r\n      </CSSTransitionGroup>\r\n    );\r\n\r\n    if (!portal) {\r\n      return portalVisible ? container : null;\r\n    }\r\n\r\n    return (\r\n      <Portal visible={portalVisible} renderNode={renderNode} lastChild={lastChild}>\r\n        {container}\r\n      </Portal>\r\n    );\r\n  }\r\n}\r\n"]}