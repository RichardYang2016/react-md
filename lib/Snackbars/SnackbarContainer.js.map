{"version":3,"sources":["../../src/js/Snackbars/SnackbarContainer.js"],"names":["CHAINED_TOAST_DELAY","SnackbarContainer","props","visible","toasts","length","state","toast","_initAndToast","nextProps","prevToast","_createLeaveTimer","_createSwapTimer","_initTimeout","clearTimeout","_leaveTimeout","_swapTimeout","_dismissTimeout","multiline","transitionName","transitionEnterTimeout","transitionLeaveTimeout","dismiss","onDismiss","lastChild","portal","propRenderNode","renderNode","context","snackbar","container","_setContainer","propTypes","id","oneOfType","number","string","style","object","className","arrayOf","shape","text","node","isRequired","action","onClick","func","children","label","autohide","bool","autohideTimeout","fab","propName","componentName","location","propFullName","propValue","propType","render","componentNameSafe","propFullNameSafe","Error","defaultProps","contextTypes","_container","_isMultiline","message","document","createElement","classList","add","innerHTML","appendChild","maxWidth","offsetHeight","removeChild","setTimeout","setState","time"],"mappings":"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","file":"SnackbarContainer.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { findDOMNode } from 'react-dom';\r\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\r\nimport deprecated from 'react-prop-types/lib/deprecated';\r\n\r\nimport getField from '../utils/getField';\r\nimport TICK from '../constants/CSSTransitionGroupTick';\r\nimport isInvalidAnimate from './isInvalidAnimate';\r\nimport Portal from '../Helpers/Portal';\r\nimport Snackbar from './Snackbar';\r\n\r\nconst CHAINED_TOAST_DELAY = 50;\r\n\r\n/**\r\n * The `Snackbar` component is used for displaying a concise and small message to the user about\r\n * an operation performed.\r\n *\r\n * > The main component for the `Snackbar` is actually named the `SnackbarContainer`, so you need\r\n * to make sure the import is `react-md/lib/Snackbars` or `react-md/lib/Snackbars/SnackbarContainer`.\r\n * The first import is preferable.\r\n */\r\nexport default class SnackbarContainer extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An id for the Snackbar once a toast has been added and is visible. This is a recommended\r\n     * prop for accessibility concerns. If it is omitted, the id will become `'snackbar-alert'`\r\n     * when there is no action on the toast, or `'snackbar-alert-dialog'` when there is an action\r\n     * on the toast.\r\n     */\r\n    id: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional style to apply to the snackbar once it appears.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the snackbar once it appears.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An immutable controlled queue of toasts that should appear in the snackbar.\r\n     * The snackbar will always display the first toast in this list. When the user has\r\n     * either clicked the action of the toast, or the `autohideTimeout` has been reached,\r\n     * the `onDismiss` function will be called. The `onDismiss` function should remove the\r\n     * first toast and return a new list of remaining toasts.\r\n     *\r\n     * ```js\r\n     * let toasts = [];\r\n     * const onDismiss = () => {\r\n     *   const [, ...remainingToasts] = toasts;\r\n     *   toasts = remainingToasts;\r\n     * };\r\n     * ```\r\n     */\r\n    toasts: PropTypes.arrayOf(PropTypes.shape({\r\n      /**\r\n       * The text to display in the toast.\r\n       */\r\n      text: PropTypes.node.isRequired,\r\n\r\n      /**\r\n       * An optional action to take. If this value is a string, the `label` for the\r\n       * button will be this value, Otherwise, all the keys in the action object will\r\n       * be applied to the `Button`.\r\n       */\r\n      action: PropTypes.oneOfType([\r\n        PropTypes.node,\r\n        PropTypes.shape({\r\n          onClick: PropTypes.func,\r\n          children: PropTypes.node,\r\n          // Deprecated\r\n          label: PropTypes.node,\r\n        }),\r\n      ]),\r\n    })).isRequired,\r\n\r\n    /**\r\n     * A function to call that will dismiss a toast. This will automatically be bound to\r\n     * any toast that has an `action` and it will also be called when the `autohideTimeout`\r\n     * has been reached.\r\n     */\r\n    onDismiss: PropTypes.func.isRequired,\r\n\r\n    /**\r\n     * Boolean if the snackbar's toasts should automatically be dismissed after the\r\n     * `autohideTimeout` has been reached.\r\n     */\r\n    autohide: PropTypes.bool,\r\n\r\n    /**\r\n     * The amount of time before the snackbar should be dequeued and the next toast\r\n     * should be displayed.\r\n     */\r\n    autohideTimeout: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * The transition name to use for the snackbar appearing and disappearing.\r\n     */\r\n    transitionName: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * The transition time for the snackbar to enter. This should match the `$md-snackbar-transition-time`\r\n     * sass variable.\r\n     */\r\n    transitionEnterTimeout: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * The transition time for the snackbar to leave. This should match the `$md-snackbar-transition-time`\r\n     * sass variable.\r\n     */\r\n    transitionLeaveTimeout: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * When the app contains a floating action button that is fixed to the bottom of the screen,\r\n     * you should set this to be a ref of the floating action button. When a snackbar appears,\r\n     * the FAB will be moved to not overlay the snackbar.\r\n     */\r\n    fab: (props, propName, componentName, location, propFullName) => {\r\n      const propValue = props[propName];\r\n      const propType = typeof propValue;\r\n\r\n      if (!propValue) {\r\n        return null;\r\n      }\r\n\r\n      if (propType !== 'object' || typeof propValue.render !== 'function' || isInvalidAnimate(propValue)) {\r\n        const componentNameSafe = componentName || '<<anonymous>>';\r\n        const propFullNameSafe = propFullName || propName;\r\n        return new Error(\r\n          `Invalid ${location} \\`${propFullNameSafe}\\` supplied to \\`${componentNameSafe}\\`, expected a ` +\r\n          'ref to a floating `Button` component. This should not be a DOMElement from `findDOMNode` but instead ' +\r\n          'the React ref object.'\r\n        );\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Boolean if the Portal's functionality of rendering in a separate react tree should be applied\r\n     * to the snackbar.\r\n     *\r\n     * @see {@link Helpers/Portal}\r\n     */\r\n    portal: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional DOM node to render the Snackbar in. If this is omitted, it will render as the first\r\n     * child in the `body`.\r\n     */\r\n    renderNode: PropTypes.object,\r\n\r\n    /**\r\n     * Boolean if the snackbar should render as the last child in the `renderNode` or `body` instead of\r\n     * as the first.\r\n     */\r\n    lastChild: PropTypes.bool,\r\n    dismiss: deprecated(PropTypes.func, 'Use `onDismiss` instead'),\r\n  };\r\n\r\n  static defaultProps = {\r\n    autohide: true,\r\n    toasts: [],\r\n    autohideTimeout: 3000,\r\n    transitionName: 'md-snackbar',\r\n    transitionEnterTimeout: 300,\r\n    transitionLeaveTimeout: 300,\r\n  };\r\n\r\n  static contextTypes = {\r\n    renderNode: PropTypes.object,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const visible = !!props.toasts.length;\r\n    this.state = {\r\n      visible,\r\n      toast: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { toasts } = this.props;\r\n    if (toasts.length) {\r\n      this._initAndToast(toasts[0]);\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const [toast] = nextProps.toasts;\r\n    const [prevToast] = this.props.toasts;\r\n    if (toast === prevToast || toast === this.state.toast) {\r\n      return;\r\n    }\r\n\r\n    if (!toast) {\r\n      this._createLeaveTimer();\r\n    } else if (!this.state.visible) {\r\n      this._initAndToast(toast);\r\n    } else {\r\n      this._createSwapTimer(toast);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this._initTimeout) {\r\n      clearTimeout(this._initTimeout);\r\n    }\r\n\r\n    if (this._leaveTimeout) {\r\n      clearTimeout(this._leaveTimeout);\r\n    }\r\n\r\n    if (this._swapTimeout) {\r\n      clearTimeout(this._swapTimeout);\r\n    }\r\n\r\n    if (this._dismissTimeout) {\r\n      clearTimeout(this._dismissTimeout);\r\n    }\r\n  }\r\n\r\n  _setContainer = (container) => {\r\n    this._container = findDOMNode(container);\r\n  };\r\n\r\n  /**\r\n   * This function takes in a new toast object and checks if the message will span\r\n   * multiple lines of text by creating the new snackbar before the `Snackbar` component\r\n   * gets made, checking the height of the message, and then removing the temporary\r\n   * snackbar.\r\n   */\r\n  _isMultiline = (toast) => {\r\n    const container = this._container;\r\n    if (container === null) {\r\n      return false;\r\n    }\r\n\r\n    const message = document.createElement('p');\r\n    message.classList.add('md-snackbar--toast');\r\n    message.innerHTML = toast.text;\r\n\r\n    let snackbar;\r\n    if (toast.action) {\r\n      message.classList.add('md-snackbar--action');\r\n\r\n      snackbar = document.createElement('section');\r\n      snackbar.className = 'md-snackbar';\r\n      snackbar.appendChild(message);\r\n\r\n      const action = document.createElement('button');\r\n      action.innerHTML = typeof toast.action === 'string' ? toast.action : toast.action.label;\r\n      action.className = 'md-btn md-btn--flat md-btn--text md-btn--snackbar';\r\n      snackbar.appendChild(action);\r\n    } else {\r\n      snackbar = message;\r\n    }\r\n\r\n    // Only style we really want from the .md-snackbar\r\n    snackbar.style.maxWidth = '568px';\r\n\r\n    container.appendChild(snackbar);\r\n    const multiline = message.offsetHeight > 20;\r\n    container.removeChild(snackbar);\r\n\r\n    return multiline;\r\n  };\r\n\r\n  _initAndToast = (toast) => {\r\n    this._initTimeout = setTimeout(() => {\r\n      this._initTimeout = null;\r\n\r\n      this.setState({ toast, multiline: this._isMultiline(toast) });\r\n    }, TICK);\r\n\r\n    this.setState({ visible: true });\r\n  };\r\n\r\n  _createLeaveTimer = () => {\r\n    const { transitionLeaveTimeout: time } = this.props;\r\n    this._leaveTimeout = setTimeout(() => {\r\n      this._leaveTimeout = null;\r\n\r\n      this.setState({ visible: false });\r\n    }, time + TICK);\r\n\r\n    this.setState({ toast: null });\r\n  };\r\n\r\n  _createSwapTimer = (toast) => {\r\n    this._swapTimeout = setTimeout(() => {\r\n      this._swapTimeout = null;\r\n\r\n      this.setState({ toast, multiline: this._isMultiline(toast) });\r\n    }, this.props.transitionLeaveTimeout + CHAINED_TOAST_DELAY);\r\n\r\n    this.setState({ toast: null });\r\n  };\r\n\r\n  render() {\r\n    const { visible, toast, multiline } = this.state;\r\n    const {\r\n      transitionName,\r\n      transitionEnterTimeout,\r\n      transitionLeaveTimeout,\r\n      dismiss,\r\n      onDismiss,\r\n      lastChild,\r\n      portal,\r\n      renderNode: propRenderNode, // eslint-disable-line no-unused-vars\r\n      toasts, // eslint-disable-line no-unused-vars\r\n      ...props\r\n    } = this.props;\r\n    const renderNode = getField(this.props, this.context, 'renderNode');\r\n\r\n    let snackbar;\r\n    if (toast) {\r\n      snackbar = (\r\n        <Snackbar\r\n          {...props}\r\n          key=\"snackbar\"\r\n          leaveTimeout={transitionLeaveTimeout}\r\n          toast={toast}\r\n          multiline={multiline}\r\n          onDismiss={onDismiss || dismiss}\r\n        />\r\n      );\r\n    }\r\n\r\n    const container = (\r\n      <CSSTransitionGroup\r\n        ref={this._setContainer}\r\n        key=\"container\"\r\n        className=\"md-snackbar-container\"\r\n        transitionName={transitionName}\r\n        transitionEnterTimeout={transitionEnterTimeout}\r\n        transitionLeaveTimeout={transitionLeaveTimeout}\r\n      >\r\n        {snackbar}\r\n      </CSSTransitionGroup>\r\n    );\r\n\r\n    if (!portal) {\r\n      return visible ? container : null;\r\n    }\r\n\r\n    return (\r\n      <Portal visible={visible} renderNode={renderNode} lastChild={lastChild}>\r\n        {container}\r\n      </Portal>\r\n    );\r\n  }\r\n}\r\n"]}