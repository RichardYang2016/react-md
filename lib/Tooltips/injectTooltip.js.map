{"version":3,"sources":["../../src/js/Tooltips/injectTooltip.js"],"names":["_composed","getComposedComponent","_setComposedComponent","component","props","tooltipLabel","tooltipDelay","tooltipPosition","tooltipStyle","tooltipClassName","tooltipContainerStyle","tooltipContainerClassName","tooltipTransitionEnterTimeout","tooltipTransitionLeaveTimeout","tooltip","ref","displayName","ComposedComponent","propTypes","object","string","node","delay","position","enterTimeout","leaveTimeout"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;kBAae;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,gNAiDbA,SAjDa,GAiDD,IAjDC,QAiEbC,oBAjEa,GAiEU;AAAA,eAAM,MAAKD,SAAX;AAAA,OAjEV,QAmEbE,qBAnEa,GAmEW,UAACC,SAAD,EAAe;AACrC,cAAKH,SAAL,GAAiBG,SAAjB;AACD,OArEY;AAAA;;AAmDb;;;;;;;;;;;;;;;;AAnDa;AAAA;AAAA,+BAuEJ;AAAA,qBAYH,KAAKC,KAZF;AAAA,YAELC,YAFK,UAELA,YAFK;AAAA,YAGLC,YAHK,UAGLA,YAHK;AAAA,YAILC,eAJK,UAILA,eAJK;AAAA,YAKLC,YALK,UAKLA,YALK;AAAA,YAMLC,gBANK,UAMLA,gBANK;AAAA,YAOLC,qBAPK,UAOLA,qBAPK;AAAA,YAQLC,yBARK,UAQLA,yBARK;AAAA,YASLC,6BATK,UASLA,6BATK;AAAA,YAULC,6BAVK,UAULA,6BAVK;AAAA,YAWFT,KAXE;;AAcP,YAAIC,YAAJ,EAAkB;AAChBD,gBAAMU,OAAN,GACE;AACE,iBAAI,kBADN;AAEE,mBAAOT,YAFT;AAGE,mBAAOC,YAHT;AAIE,sBAAUC,eAJZ;AAKE,0BAAcK,6BALhB;AAME,0BAAcC,6BANhB;AAOE,mBAAOH,qBAPT;AAQE,uBAAWC,yBARb;AASE,0BAAcH,YAThB;AAUE,8BAAkBC;AAVpB,YADF;AAcD;;AAEDL,cAAMW,GAAN,GAAY,KAAKb,qBAAjB;;AAEA,eAAO,8BAAC,iBAAD,EAAuBE,KAAvB,CAAP;AACD;AAzGY;;AAAA;AAAA,kCACNY,WADM,GACQ,8BAAeC,iBAAf,EAAkC,SAAlC,CADR,SAENC,SAFM,GAEM;AACjB;;;AAGAR,2BAAuB,oBAAUS,MAJhB;;AAMjB;;;AAGAR,+BAA2B,oBAAUS,MATpB;;AAWjB;;;AAGAZ,kBAAc,oBAAUW,MAdP;;AAgBjB;;;AAGAV,sBAAkB,oBAAUW,MAnBX;;AAqBjB;;;AAGAf,kBAAc,oBAAUgB,IAxBP;;AA0BjB;;;AAGAf,kBAAc,2BAAiBY,SAAjB,CAA2BI,KA7BxB;;AA+BjB;;;AAGAf,qBAAiB,2BAAiBW,SAAjB,CAA2BK,QAlC3B;;AAoCjB;;;AAGAX,mCAA+B,2BAAiBM,SAAjB,CAA2BM,YAvCzC;;AAyCjB;;;AAGAX,mCAA+B,2BAAiBK,SAAjB,CAA2BO;AA5CzC,GAFN;AAAA,C","file":"injectTooltip.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport getDisplayName from '../utils/StringUtils/getDisplayName';\r\nimport TooltipContainer from './TooltipContainer';\r\n\r\n\r\n/**\r\n * Takes any component and injects a tooltip container as a prop. The tooltip container\r\n * will add event listeners for touch, mouse, and keyboard events so that a tooltip will appear\r\n * in the ComposedComponent.\r\n *\r\n * If the `tooltipLabel` prop is omitted, the tooltip and event listeners will not\r\n * be included.\r\n *\r\n * ```js\r\n * @param {function} ComposedComponent the component to compose with the tooltip functionality.\r\n * @return {function} the ComposedComponent with a tooltip.\r\n * ```\r\n */\r\nexport default ComposedComponent => class TooltipedComponent extends PureComponent {\r\n  static displayName = getDisplayName(ComposedComponent, 'Tooltip');\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply to the tooltip container.\r\n     */\r\n    tooltipContainerStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the tooltip container.\r\n     */\r\n    tooltipContainerClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the tooltip itself.\r\n     */\r\n    tooltipStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to the tooltip itself.\r\n     */\r\n    tooltipClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The tooltip to display. If omitted, the `tooltip` prop will not be injected.\r\n     */\r\n    tooltipLabel: PropTypes.node,\r\n\r\n    /**\r\n     * The amount of delay before the tooltip will appear on hover, touch, or keyboard focus.\r\n     */\r\n    tooltipDelay: TooltipContainer.propTypes.delay,\r\n\r\n    /**\r\n     * The position that the tooltip should appear related to the composed component.\r\n     */\r\n    tooltipPosition: TooltipContainer.propTypes.position,\r\n\r\n    /**\r\n     * The transition time for the tooltip appearing.\r\n     */\r\n    tooltipTransitionEnterTimeout: TooltipContainer.propTypes.enterTimeout,\r\n\r\n    /**\r\n     * The transition time for the tooltip disappearing.\r\n     */\r\n    tooltipTransitionLeaveTimeout: TooltipContainer.propTypes.leaveTimeout,\r\n  };\r\n\r\n  _composed = null;\r\n\r\n  /**\r\n   * Gets the composed component as a ref. This is useful if you need to access the ref of the\r\n   * composed component instead of the `injectTooltip` HOC to use some publicly accessible methods.\r\n   *\r\n   * ```js\r\n   * <SomeTooltippedComponent\r\n   *   ref={tooltipHOC => {\r\n   *     tooltipHOC.getComposedComponent().focus();\r\n   *   }}\r\n   * />\r\n   * ```\r\n   *\r\n   * > NOTE: This can be `null`, so make sure to do a null check before using.\r\n   */\r\n  getComposedComponent = () => this._composed;\r\n\r\n  _setComposedComponent = (component) => {\r\n    this._composed = component;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      tooltipLabel,\r\n      tooltipDelay,\r\n      tooltipPosition,\r\n      tooltipStyle,\r\n      tooltipClassName,\r\n      tooltipContainerStyle,\r\n      tooltipContainerClassName,\r\n      tooltipTransitionEnterTimeout,\r\n      tooltipTransitionLeaveTimeout,\r\n      ...props\r\n    } = this.props;\r\n\r\n    if (tooltipLabel) {\r\n      props.tooltip = (\r\n        <TooltipContainer\r\n          key=\"tooltipContainer\"\r\n          label={tooltipLabel}\r\n          delay={tooltipDelay}\r\n          position={tooltipPosition}\r\n          enterTimeout={tooltipTransitionEnterTimeout}\r\n          leaveTimeout={tooltipTransitionLeaveTimeout}\r\n          style={tooltipContainerStyle}\r\n          className={tooltipContainerClassName}\r\n          tooltipStyle={tooltipStyle}\r\n          tooltipClassName={tooltipClassName}\r\n        />\r\n      );\r\n    }\r\n\r\n    props.ref = this._setComposedComponent;\r\n\r\n    return <ComposedComponent {...props} />;\r\n  }\r\n};\r\n"]}