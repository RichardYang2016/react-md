{"version":3,"sources":["../../src/js/Helpers/IconSeparator.js"],"names":["IconSeparator","props","className","labelStyle","labelClassName","component","label","iconBefore","children","text","labelProps","only","style","Component","propTypes","object","string","node","isRequired","bool","oneOfType","func","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;IAKqBA,a;;;;;;;;;;;6BAkDV;AAAA,mBAUH,KAAKC,KAVF;AAAA,UAELC,SAFK,UAELA,SAFK;AAAA,UAGLC,UAHK,UAGLA,UAHK;AAAA,UAILC,cAJK,UAILA,cAJK;AAAA,UAKLC,SALK,UAKLA,SALK;AAAA,UAMLC,KANK,UAMLA,KANK;AAAA,UAOLC,UAPK,UAOLA,UAPK;AAAA,UAQLC,QARK,UAQLA,QARK;AAAA,UASFP,KATE;;AAYP,UAAIQ,aAAJ;AACA,UAAI,2BAAeH,KAAf,CAAJ,EAA2B;AACzB,YAAMI,aAAa,gBAASC,IAAT,CAAcL,KAAd,EAAqBL,KAAxC;AACAQ,eAAO,yBAAaH,KAAb,EAAoB;AACzBJ,qBAAW,0BAAG,cAAH,EAAmBE,cAAnB,EAAmCM,WAAWR,SAA9C,CADc;AAEzBU,8BAAYT,UAAZ,EAA2BO,WAAWE,KAAtC;AAFyB,SAApB,CAAP;AAID,OAND,MAMO;AACLH,eAAO;AAAA;AAAA,YAAM,OAAON,UAAb,EAAyB,WAAW,0BAAG,cAAH,EAAmBC,cAAnB,CAApC;AAAyEE;AAAzE,SAAP;AACD;;AAED,UAAMO,YAAYR,SAAlB;;AAEA,aACE;AAAC,iBAAD;AAAA,qBAAeJ,KAAf,IAAsB,WAAW,0BAAG,mBAAH,EAAwBC,SAAxB,CAAjC;AACGK,sBAAcC,QADjB;AAEGC,YAFH;AAGG,SAACF,UAAD,IAAeC;AAHlB,OADF;AAOD;;;;;;AAlFkBR,a,CACZc,S,GAAY;AACjB;;;AAGAF,SAAO,oBAAUG,MAJA;;AAMjB;;;AAGAb,aAAW,oBAAUc,MATJ;;AAWjB;;;AAGAb,cAAY,oBAAUY,MAdL;;AAgBjB;;;AAGAX,kBAAgB,oBAAUY,MAnBT;;AAqBjB;;;AAGAV,SAAO,oBAAUW,IAAV,CAAeC,UAxBL;;AA0BjB;;;AAGAV,YAAU,oBAAUS,IAAV,CAAeC,UA7BR;;AA+BjB;;;AAGAX,cAAY,oBAAUY,IAlCL;;AAoCjB;;;AAGAd,aAAW,oBAAUe,SAAV,CAAoB,CAC7B,oBAAUJ,MADmB,EAE7B,oBAAUK,IAFmB,CAApB,EAGRH;AA1Cc,C;AADAlB,a,CA8CZsB,Y,GAAe;AACpBjB,aAAW;AADS,C;kBA9CHL,a","file":"IconSeparator.js","sourcesContent":["import React, { PureComponent, cloneElement, isValidElement, Children } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\n\r\n/**\r\n * The `IconSeparator` component is a simple helper component to render some text and\r\n * an icon with some space between them while centering the text. The icon can either\r\n * come before or after the text.\r\n */\r\nexport default class IconSeparator extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the label.\r\n     */\r\n    labelStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the label.\r\n     */\r\n    labelClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The label to display.\r\n     */\r\n    label: PropTypes.node.isRequired,\r\n\r\n    /**\r\n     * The icon to display.\r\n     */\r\n    children: PropTypes.node.isRequired,\r\n\r\n    /**\r\n     * Boolean if the icon should appear before or after the text\r\n     */\r\n    iconBefore: PropTypes.bool,\r\n\r\n    /**\r\n     * The component to be rendered as.\r\n     */\r\n    component: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.func,\r\n    ]).isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    component: 'div',\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      className,\r\n      labelStyle,\r\n      labelClassName,\r\n      component,\r\n      label,\r\n      iconBefore,\r\n      children,\r\n      ...props\r\n    } = this.props;\r\n\r\n    let text;\r\n    if (isValidElement(label)) {\r\n      const labelProps = Children.only(label).props;\r\n      text = cloneElement(label, {\r\n        className: cn('md-icon-text', labelClassName, labelProps.className),\r\n        style: { ...labelStyle, ...labelProps.style },\r\n      });\r\n    } else {\r\n      text = <span style={labelStyle} className={cn('md-icon-text', labelClassName)}>{label}</span>;\r\n    }\r\n\r\n    const Component = component;\r\n\r\n    return (\r\n      <Component {...props} className={cn('md-icon-separator', className)}>\r\n        {iconBefore && children}\r\n        {text}\r\n        {!iconBefore && children}\r\n      </Component>\r\n    );\r\n  }\r\n}\r\n"]}