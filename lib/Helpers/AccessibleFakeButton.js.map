{"version":3,"sources":["../../src/js/Helpers/AccessibleFakeButton.js"],"names":["AccessibleFakeButton","state","pressed","tabFocused","focus","_node","blur","_setNode","node","_handleClick","e","props","disabled","onClick","setState","_handleKeyDown","onKeyDown","listenToEnter","listenToSpace","_handleKeyUp","onKeyUp","onTabFocus","which","keyCode","_handleBlur","onBlur","Component","component","children","className","tabbedClassName","tabIndex","ink","noFocusOutline","childElements","toArray","unshift","propTypes","style","object","string","func","oneOfType","isRequired","bool","number","role","defaultProps"],"mappings":"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","file":"AccessibleFakeButton.js","sourcesContent":["import React, { PureComponent, Children } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { findDOMNode } from 'react-dom';\r\nimport cn from 'classnames';\r\nimport { TAB } from '../constants/keyCodes';\r\nimport handleKeyboardAccessibility from '../utils/EventUtils/handleKeyboardAccessibility';\r\n\r\n/**\r\n * The `AccessibleFakeButton` is a generic component that can be used to render\r\n * a `div` or any other non `button` components as a button. This should not be\r\n * used often.\r\n *\r\n * The `AccessibleFakeButton` allows the user to tab focus the element, use the\r\n * space or enter key to trigger the `onClick` event, and toggles the `aria-pressed`\r\n * attribute.\r\n */\r\nexport default class AccessibleFakeButton extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional function to call only when the button has been focused with the tab key.\r\n     */\r\n    tabbedClassName: PropTypes.string,\r\n\r\n    /**\r\n     * Any children to display in the Accessible Fake Button.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * An optional onClick function to call when the user clicks the\r\n     * button or presses space || enter.\r\n     */\r\n    onClick: PropTypes.func,\r\n\r\n    /**\r\n     * An optional onKeyDown function to call.\r\n     */\r\n    onKeyDown: PropTypes.func,\r\n\r\n    /**\r\n     * An optional onBlur function to call.\r\n     */\r\n    onBlur: PropTypes.func,\r\n\r\n    /**\r\n     * An optional onKeyUp function to call.\r\n     */\r\n    onKeyUp: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the element is focused with the tab key.\r\n     */\r\n    onTabFocus: PropTypes.func,\r\n\r\n    /**\r\n     * The component to render the Fake button as.\r\n     */\r\n    component: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.string,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * Boolean if the default outline should be removed the when the fake button has been focused.\r\n     *\r\n     * @see {@link #tabbedClassName}\r\n     */\r\n    noFocusOutline: PropTypes.bool,\r\n\r\n    /**\r\n     * The tab index to use for the Fake button so it is keyboard focusable.\r\n     */\r\n    tabIndex: PropTypes.number,\r\n\r\n    /**\r\n     * Boolean if the Button is disabled. This will prevent tab focus.\r\n     */\r\n    disabled: PropTypes.bool,\r\n\r\n    /**\r\n     * The role for the accessible fake button. It is recommended to keep it\r\n     * the default of `button` unless you are rendering it as an `a` tag.\r\n     */\r\n    role: PropTypes.string,\r\n\r\n    /**\r\n     * The ink when coming from the AccessibleFakeInkedButton\r\n     * @access private\r\n     */\r\n    ink: PropTypes.node,\r\n\r\n    /**\r\n     * Boolean if the spacebar should be used to trigger the click event. This _should_ be `true`\r\n     * is almost all cases.\r\n     */\r\n    listenToSpace: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the enter key should be used to trigger the click event. This _should_ be `true`\r\n     * in most cases. By default, the param will be ignored if the `role` attribute is for a `checkbox`\r\n     * or `radio`. When it is a checkbox or radio, it will attempt to submit the form on the enter\r\n     * keypress instead like the native elements.\r\n     */\r\n    listenToEnter: PropTypes.bool,\r\n  };\r\n\r\n  static defaultProps = {\r\n    component: 'div',\r\n    tabIndex: 0,\r\n    role: 'button',\r\n    noFocusOutline: true,\r\n    listenToEnter: true,\r\n    listenToSpace: true,\r\n  };\r\n\r\n  state = { pressed: false, tabFocused: false };\r\n\r\n  /**\r\n   * Focuses the button.\r\n   */\r\n  focus = () => {\r\n    if (this._node) {\r\n      this._node.focus();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Blurs the button.\r\n   */\r\n  blur = () => {\r\n    if (this._node) {\r\n      this._node.blur();\r\n    }\r\n  };\r\n\r\n  _setNode = (node) => {\r\n    if (node) {\r\n      this._node = findDOMNode(node);\r\n    }\r\n  };\r\n\r\n  _handleClick = (e) => {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    if (this.props.onClick) {\r\n      this.props.onClick(e);\r\n    }\r\n\r\n    this._node.focus();\r\n    this.setState({ pressed: !this.state.pressed });\r\n  };\r\n\r\n  _handleKeyDown = (e) => {\r\n    const { disabled, onKeyDown, listenToEnter, listenToSpace } = this.props;\r\n    if (disabled) {\r\n      return;\r\n    }\r\n\r\n    if (onKeyDown) {\r\n      onKeyDown(e);\r\n    }\r\n\r\n    handleKeyboardAccessibility(e, this._handleClick, listenToEnter, listenToSpace);\r\n  };\r\n\r\n  _handleKeyUp = (e) => {\r\n    const { onKeyUp, onTabFocus } = this.props;\r\n    if (onKeyUp) {\r\n      onKeyUp(e);\r\n    }\r\n\r\n    if ((e.which || e.keyCode) === TAB) {\r\n      if (onTabFocus) {\r\n        onTabFocus(e);\r\n      }\r\n\r\n      this.setState({ tabFocused: true });\r\n    }\r\n  };\r\n\r\n  _handleBlur = (e) => {\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(e);\r\n    }\r\n\r\n    if (this.state.tabFocused) {\r\n      this.setState({ tabFocused: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      component: Component,\r\n      children,\r\n      className,\r\n      tabbedClassName,\r\n      disabled,\r\n      tabIndex,\r\n      ink,\r\n      noFocusOutline,\r\n      /* eslint-disable no-unused-vars */\r\n      onBlur,\r\n      onClick,\r\n      onKeyUp,\r\n      onKeyDown,\r\n      onTabFocus,\r\n      listenToEnter,\r\n      listenToSpace,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    let childElements = children;\r\n    if (ink) {\r\n      childElements = Children.toArray(children);\r\n      childElements.unshift(ink);\r\n    }\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        ref={this._setNode}\r\n        className={cn('md-fake-btn', {\r\n          'md-pointer--hover': !disabled,\r\n          'md-fake-btn--no-outline': noFocusOutline,\r\n          [tabbedClassName]: tabbedClassName && this.state.tabFocused,\r\n        }, className)}\r\n        disabled={disabled}\r\n        tabIndex={disabled ? null : tabIndex}\r\n        onBlur={this._handleBlur}\r\n        onClick={this._handleClick}\r\n        onKeyUp={this._handleKeyUp}\r\n        onKeyDown={this._handleKeyDown}\r\n        aria-pressed={this.state.pressed}\r\n      >\r\n        {childElements}\r\n      </Component>\r\n    );\r\n  }\r\n}\r\n"]}