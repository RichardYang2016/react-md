{"version":3,"sources":["../../src/js/Helpers/ResizeObserver.js"],"names":["ResizeObserver","_container","_target","_observer","_height","_width","_scrollHeight","_scrollWidth","_measure","entries","entry","contentRect","height","width","target","scrollHeight","scrollWidth","_isHeightChange","_isWidthChange","props","onResize","el","watchHeight","watchWidth","_handleRef","container","_getTarget","observe","disconnect","elRef","nextProps","nextTarget","unobserve","t","document","getElementById","querySelector","parentNode","Error","Component","component","propTypes","bool","oneOfType","object","string","func","isRequired","defaultProps"],"mappings":"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","file":"ResizeObserver.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ResizeObserverAPI from 'resize-observer-polyfill';\r\n\r\n/**\r\n * The `ResizeObserver` component is a component hook for the\r\n * [ResizeObserver](http://rawgit.com/WICG/ResizeObserver/master/index.html)\r\n * using the [resize-observer-polyfill](https://github.com/que-etc/resize-observer-polyfill)\r\n * for browsers that don't support it yet.\r\n *\r\n * This component displays an empty `span` with `aria-hidden` to allow access to the DOM. By\r\n * default it will attempt to watch changes on its parent component, but it can be configured\r\n * to watch any element by using the `target` prop.\r\n */\r\nexport default class ResizeObserver extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * Boolean if the height should be watched for the resize target.\r\n     */\r\n    watchHeight: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the width should be watched for the resize target.\r\n     */\r\n    watchWidth: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional target that should be used for detecting resize events. This can either\r\n     * be a HTMLDOMNode or a string to use with `document.getElementById` or `document.querySelector`.\r\n     *\r\n     * If this prop is not provided and not null, it will default to the parent node of this component.\r\n     * If the provided `target={null}`, the observer will not begin until the `target` is `undefined` or\r\n     * it has been correctly passed a target string or object.\r\n     */\r\n    target: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * The component to be rendered as. This should normally just be the default `span`, but there are cases\r\n     * where the component should be switched to something else for valid html.\r\n     */\r\n    component: PropTypes.string,\r\n\r\n    /**\r\n     * A function to call when the height or width has been changed and that attribute is being watched.\r\n     * The callback will include the current height, width, scrollHeight and scrollWidth of the target.\r\n     *\r\n     * ```js\r\n     * onResize({\r\n     *   height: nextHeight,\r\n     *   width: nextWidth,\r\n     *   scrollHeight: nextScrollHeight,\r\n     *   scrollWidth: nextScrollWidth,\r\n     *   el: resizeTarget,\r\n     * });\r\n     * ```\r\n     */\r\n    onResize: PropTypes.func.isRequired,\r\n\r\n    /**\r\n     * An optional ref callback that will include the `target` or the parent node of the resize observer. Just\r\n     * like other refs, this will provide null when it unmounts.\r\n     *\r\n     * This is really only helpful if you'd like the DOM node for a parent Component without needing to use\r\n     * `ReactDOM.findDOMNode(this)`.\r\n     */\r\n    elRef: PropTypes.func,\r\n  };\r\n\r\n  static defaultProps = {\r\n    watchHeight: false,\r\n    watchWidth: false,\r\n    component: 'span',\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const { target } = this.props;\r\n    const nextTarget = nextProps.target;\r\n    if (target === nextTarget) {\r\n      return;\r\n    } else if (nextTarget) {\r\n      if (this._target) {\r\n        this._observer.unobserve(this._target);\r\n      }\r\n      this._target = this._getTarget(this._container, nextTarget);\r\n      this._observer.observe(this._target);\r\n    }\r\n  }\r\n\r\n  _container = null;\r\n  _target = null;\r\n  _observer = null;\r\n  _height = null;\r\n  _width = null;\r\n  _scrollHeight = null;\r\n  _scrollWidth = null;\r\n\r\n  _getTarget(container, target) {\r\n    if (target === null || (target && typeof target !== 'string')) {\r\n      return target;\r\n    }\r\n\r\n    let t = null;\r\n    if (target) {\r\n      t = document.getElementById(target) || document.querySelector(target);\r\n    } else {\r\n      t = container.parentNode;\r\n    }\r\n\r\n    if (!t) {\r\n      throw new Error(\r\n        'An HTMLDOMNode is required as the `ResizeObserver`\\'s watch target but none were provided/found. ' +\r\n        `Please update the target prop to find a valid node since the provided target is invalid. \\`${target}\\`.`\r\n      );\r\n    }\r\n\r\n    return t;\r\n  }\r\n\r\n  _measure = (entries) => {\r\n    if (!this._observer || !this._target) {\r\n      return;\r\n    }\r\n\r\n    for (const entry of entries) {\r\n      if (!entry) {\r\n        return;\r\n      }\r\n\r\n      const { height, width } = entry.contentRect;\r\n      const { scrollHeight, scrollWidth } = entry.target;\r\n      if (this._isHeightChange(height, scrollHeight) || this._isWidthChange(width, scrollWidth)) {\r\n        this._height = height;\r\n        this._width = width;\r\n        this._scrollHeight = scrollHeight;\r\n        this._scrollWidth = scrollWidth;\r\n        this.props.onResize({ height, width, scrollHeight, scrollWidth, el: entry.target });\r\n      }\r\n    }\r\n  };\r\n\r\n  _isHeightChange = (height, scrollHeight) => this.props.watchHeight\r\n    && (height !== this._height || scrollHeight !== this._scrollHeight);\r\n  _isWidthChange = (width, scrollWidth) => this.props.watchWidth\r\n    && (width !== this._width || scrollWidth !== this._scrollWidth);\r\n\r\n  _handleRef = (container) => {\r\n    if (container) {\r\n      this._container = container;\r\n      this._target = this._getTarget(container, this.props.target);\r\n      this._observer = new ResizeObserverAPI(this._measure);\r\n\r\n      if (this._target) {\r\n        this._observer.observe(this._target);\r\n      }\r\n    } else {\r\n      if (this._observer) {\r\n        this._observer.disconnect();\r\n      }\r\n\r\n      this._container = null;\r\n      this._target = null;\r\n      this._observer = null;\r\n      this._height = null;\r\n      this._width = null;\r\n      this._scrollHeight = null;\r\n      this._scrollWidth = null;\r\n    }\r\n\r\n    if (this.props.elRef) {\r\n      this.props.elRef(this._target);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { component: Component } = this.props;\r\n    return <Component ref={this._handleRef} aria-hidden />;\r\n  }\r\n}\r\n"]}