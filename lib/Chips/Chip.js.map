{"version":3,"sources":["../../src/js/Chips/Chip.js"],"names":["Chip","state","hover","_handleMouseEnter","e","props","onMouseEnter","setState","_handleMouseLeave","onMouseLeave","label","className","labelStyle","labelClassName","avatar","children","removable","remove","onClick","rotateIcon","iconClassName","removeIconChildren","removeIconClassName","icon","chipIconCN","isValidElement","Children","only","cloneElement","propTypes","style","object","string","bool","node","isRequired","element","func","defaultProps"],"mappings":"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","file":"Chip.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport deprecated from 'react-prop-types/lib/deprecated';\r\n\r\nimport FontIcon from '../FontIcons/FontIcon';\r\n\r\nexport default class Chip extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the chip's label.\r\n     */\r\n    labelStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the chip's label.\r\n     */\r\n    labelClassName: PropTypes.string,\r\n\r\n    /**\r\n     * Boolean if the `.md-chip-icon--rotate` style should be applied to the remove icon.\r\n     * The `.md-chip-icon--rotate` just rotates the icon 45 degrees.\r\n     */\r\n    rotateIcon: PropTypes.bool,\r\n\r\n    /**\r\n     * Any children used to display the remove icon when `removable`.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * The label to display on the chip.\r\n     */\r\n    label: PropTypes.node.isRequired,\r\n\r\n    /**\r\n     * Boolean if the chip is removable.\r\n     */\r\n    removable: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional avatar to display on the chip.\r\n     */\r\n    avatar: PropTypes.element,\r\n\r\n    /**\r\n     * An optional function to call when the `click` event is triggered.\r\n     */\r\n    onClick: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `mouseenter` event is triggered.\r\n     */\r\n    onMouseEnter: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `mouseleave` event is triggered.\r\n     */\r\n    onMouseLeave: PropTypes.func,\r\n\r\n    iconClassName: deprecated(PropTypes.string, 'Use the `children` prop as a single FontIcon or SVGIcon instead'),\r\n    remove: deprecated(PropTypes.func, 'Use `removable` and `onClick` instead'),\r\n    removeIconChildren: deprecated(PropTypes.node, 'Use `children` instead'),\r\n    removeIconClassName: deprecated(PropTypes.string, 'Use `children` prop as a single FontIcon or SVGIcon instead'),\r\n  };\r\n\r\n  static defaultProps = {\r\n    rotateIcon: true,\r\n    children: <FontIcon>add_circle</FontIcon>,\r\n  };\r\n\r\n  state = { hover: false };\r\n\r\n  _handleMouseEnter = (e) => {\r\n    if (this.props.onMouseEnter) {\r\n      this.props.onMouseEnter(e);\r\n    }\r\n\r\n    this.setState({ hover: true });\r\n  };\r\n\r\n  _handleMouseLeave = (e) => {\r\n    if (this.props.onMouseLeave) {\r\n      this.props.onMouseLeave(e);\r\n    }\r\n\r\n    this.setState({ hover: false });\r\n  };\r\n\r\n  render() {\r\n    const { hover } = this.state;\r\n    const {\r\n      label,\r\n      className,\r\n      labelStyle,\r\n      labelClassName,\r\n      avatar,\r\n      children,\r\n      removable,\r\n      remove,\r\n      onClick,\r\n      rotateIcon,\r\n\r\n      /* eslint-disable no-unused-vars */\r\n      // deprecated\r\n      iconClassName,\r\n      removeIconChildren,\r\n      removeIconClassName,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    let icon;\r\n    if (removable || remove) {\r\n      const chipIconCN = cn('md-chip-icon', {\r\n        'md-chip-icon--rotate': rotateIcon,\r\n        'md-chip-text--hover': hover,\r\n      });\r\n\r\n      if (React.isValidElement(children)) {\r\n        icon = React.Children.only(children);\r\n        icon = React.cloneElement(icon, { className: cn(chipIconCN, icon.props.className) });\r\n      } else {\r\n        icon = (\r\n          <FontIcon className={chipIconCN} iconClassName={iconClassName}>\r\n            {children}\r\n          </FontIcon>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        {...props}\r\n        className={cn('md-chip', {\r\n          'md-chip--avatar': avatar,\r\n          'md-chip--remove': removable,\r\n          'md-chip--hover': hover,\r\n        }, className)}\r\n        onClick={remove || onClick}\r\n        onMouseEnter={this._handleMouseEnter}\r\n        onMouseLeave={this._handleMouseLeave}\r\n      >\r\n        {avatar}\r\n        <span\r\n          style={labelStyle}\r\n          className={cn('md-chip-text', {\r\n            'md-chip-text--hover': hover,\r\n          }, labelClassName)}\r\n        >\r\n          {label}\r\n        </span>\r\n        {icon}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n"]}