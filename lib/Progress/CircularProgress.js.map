{"version":3,"sources":["../../src/js/Progress/CircularProgress.js"],"names":["ROATE_DISTANCE","BASE_SIZE","CircularProgress","props","scale","style","className","value","determinateDashoffset","centered","isDeterminate","circleStyle","svgStyle","rotate","strokeDashoffset","Object","assign","WebkitTransform","MozTransform","transform","accessibilityProps","role","propTypes","id","oneOfType","number","string","object","isRequired","bool","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;AAEA,IAAMA,iBAAiB,MAAM,IAA7B;AACA,IAAMC,YAAY,EAAlB,C,CAAsB;;AAEtB;;;;;;;;;;;;;IAYqBC,gB;;;;;;;;;;;;AACnB;6BA+DS;AAAA,mBASH,KAAKC,KATF;AAAA,UAELC,KAFK,UAELA,KAFK;AAAA,UAGLC,KAHK,UAGLA,KAHK;AAAA,UAILC,SAJK,UAILA,SAJK;AAAA,UAKLC,KALK,UAKLA,KALK;AAAA,UAMLC,qBANK,UAMLA,qBANK;AAAA,UAOLC,QAPK,UAOLA,QAPK;AAAA,UAQFN,KARE;;AAWP,UAAMO,gBAAgB,OAAOH,KAAP,KAAiB,QAAvC;AACA,UAAII,oBAAJ;AACA,UAAIC,WAAWP,KAAf;AACA,UAAIK,aAAJ,EAAmB;AACjB,YAAMG,gCAA8Bb,iBAAiB,GAAjB,GAAuBO,KAArD,SAAN;AACAI,sBAAc;AACZG,4BAAkBN,wBAAyBA,wBAAwB,GAAxB,GAA8BD;AAD7D,SAAd;;AAIAK,mBAAWG,OAAOC,MAAP,CAAc,EAAd,EAAkBX,KAAlB,EAAyB;AAClCY,2BAAiB,0BAAGZ,MAAMY,eAAT,EAA0BJ,MAA1B,CADiB;AAElCK,wBAAc,0BAAGb,MAAMa,YAAT,EAAuBL,MAAvB,CAFoB;AAGlCM,qBAAW,0BAAGd,MAAMc,SAAT,EAAoBN,MAApB;AAHuB,SAAzB,CAAX;AAKD;;AAED,UAAMO,qBAAqB;AACzBC,cAAM,aADmB;AAEzB,yBAAiB,CAFQ;AAGzB,yBAAiB;AAHQ,OAA3B;;AAMA,UAAIX,aAAJ,EAAmB;AACjBU,2BAAmB,eAAnB,IAAsCb,KAAtC;AACD;;AAED,aACE;AAAA;AAAA,qBACMJ,KADN,EAEMiB,kBAFN;AAGE,iBAAOR,QAHT;AAIE,qBAAW,0BAAG,mCAAH,EAAwC;AACjD,iCAAqBH,QAD4B;AAEjD,iDAAqCC,aAFY;AAGjD,mDAAuC,CAACA;AAHS,WAAxC,EAIRJ,SAJQ,CAJb;AASE,iBAAOF,QAAQH,SATjB;AAUE,kBAAQG,QAAQH,SAVlB;AAWE,mBAAQ;AAXV;AAaE;AACE,qBAAW,0BAAG,2BAAH,EAAgC;AACzC,mDAAuC,CAACS;AADC,WAAhC,CADb;AAIE,uBAAY,GAJd;AAKE,yBAAc,OALhB;AAME,iBAAOC,WANT;AAOE,cAAG,IAPL;AAQE,cAAG,IARL;AASE,aAAE;AATJ;AAbF,OADF;AA2BD;;;;;;AAhIkBT,gB,CAEZoB,S,GAAY;AACjB;;;;;;;;;AASAC,MAAI,iCAAkB,oBAAUC,SAAV,CAAoB,CACxC,oBAAUC,MAD8B,EAExC,oBAAUC,MAF8B,CAApB,CAAlB,CAVa;;AAejB;;AAEA;;;;;AAKArB,SAAO,oBAAUsB,MAAV,CAAiBC,UAtBP;;AAwBjB;;;AAGAtB,aAAW,oBAAUoB,MA3BJ;;AA6BjB;;;;;;;AAOAnB,SAAO,uBAAQ,oBAAUkB,MAAlB,EAA0B,CAA1B,EAA6B,GAA7B,CApCU;;AAsCjB;;;AAGArB,SAAO,oBAAUqB,MAAV,CAAiBG,UAzCP;;AA2CjB;;;;AAIApB,yBAAuB,oBAAUiB,MAAV,CAAiBG,UA/CvB;;AAiDjB;;;AAGAnB,YAAU,oBAAUoB;AApDH,C;AAFA3B,gB,CAyDZ4B,Y,GAAe;AACpBzB,SAAO,EADa;AAEpBD,SAAO,CAFa;AAGpBI,yBAAuB,GAHH;AAIpBC,YAAU;AAJU,C;kBAzDHP,gB","file":"CircularProgress.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\r\n\r\nimport between from '../utils/PropTypes/between';\r\n\r\nconst ROATE_DISTANCE = 360 * 1.75;\r\nconst BASE_SIZE = 24; // font-icon font size\r\n\r\n/**\r\n * The `CircularProgress` component is used to give visual feedback while your app\r\n * is loading.\r\n *\r\n * There are two different types of circular progress bars: `Determinate` and `Indeterminate`.\r\n *\r\n * A `Determinate` circular progress bar should be used when you want to keep track of the current\r\n * progress. An example would be downloading a file.\r\n *\r\n * An `Indeterminate` circular progress bar should be used when you can not keep track of the progress\r\n * yourself. An example would be waiting for some API call to complete.\r\n */\r\nexport default class CircularProgress extends PureComponent {\r\n  /* eslint-disable max-len */\r\n  static propTypes = {\r\n    /**\r\n     * The `id` prop is required for accessibility concerns.\r\n     * [Progress Bar Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role)\r\n     *\r\n     * > If the progressbar is describing the loading progress of a particular region of a page, the author\r\n     * __SHOULD__ use aria-describedby to point to the status, and set the aria-busy attribute to true on the\r\n     * region until it is finished loading. It is not possible for the user to alter the value of a progressbar\r\n     * because it is always readonly.\r\n     */\r\n    id: isRequiredForA11y(PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ])),\r\n\r\n    /* eslint-enable max-len */\r\n\r\n    /**\r\n     * A style object to apply to the SVG. If this is a determinate `CircularProgress`,\r\n     * the `transform` (and vendor prefixes) styles will be merged with the current\r\n     * progress rotation.\r\n     */\r\n    style: PropTypes.object.isRequired,\r\n\r\n    /**\r\n     * An optional className to apply to the SVG.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * The current value of the progress. If this value is defined, it will\r\n     * be converted to a determinate circular progress. The progress will not\r\n     * advance unless this value changes.\r\n     *\r\n     * This value should also be a number between 0 and 100.\r\n     */\r\n    value: between(PropTypes.number, 0, 100),\r\n\r\n    /**\r\n     * The scale for the circular progress.\r\n     */\r\n    scale: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * You probably don't want to update this. I'm not good at SVG. This should\r\n     * match the SCSS variable `$md-circular-progress-stroke-dashoffset`.\r\n     */\r\n    determinateDashoffset: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * Boolean if the progress should be centered in it's container.\r\n     */\r\n    centered: PropTypes.bool,\r\n  };\r\n\r\n  static defaultProps = {\r\n    style: {},\r\n    scale: 1,\r\n    determinateDashoffset: 187,\r\n    centered: true,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      scale,\r\n      style,\r\n      className,\r\n      value,\r\n      determinateDashoffset,\r\n      centered,\r\n      ...props\r\n    } = this.props;\r\n\r\n    const isDeterminate = typeof value === 'number';\r\n    let circleStyle;\r\n    let svgStyle = style;\r\n    if (isDeterminate) {\r\n      const rotate = `rotate3d(0, 0, 1, ${ROATE_DISTANCE / 100 * value}deg)`;\r\n      circleStyle = {\r\n        strokeDashoffset: determinateDashoffset - (determinateDashoffset / 100 * value),\r\n      };\r\n\r\n      svgStyle = Object.assign({}, style, {\r\n        WebkitTransform: cn(style.WebkitTransform, rotate),\r\n        MozTransform: cn(style.MozTransform, rotate),\r\n        transform: cn(style.transform, rotate),\r\n      });\r\n    }\r\n\r\n    const accessibilityProps = {\r\n      role: 'progressbar',\r\n      'aria-valuemin': 0,\r\n      'aria-valuemax': 100,\r\n    };\r\n\r\n    if (isDeterminate) {\r\n      accessibilityProps['aria-valuenow'] = value;\r\n    }\r\n\r\n    return (\r\n      <svg\r\n        {...props}\r\n        {...accessibilityProps}\r\n        style={svgStyle}\r\n        className={cn('md-progress md-progress--circular', {\r\n          'md-block-centered': centered,\r\n          'md-progress--circular-determinate': isDeterminate,\r\n          'md-progress--circular-indeterminate': !isDeterminate,\r\n        }, className)}\r\n        width={scale * BASE_SIZE}\r\n        height={scale * BASE_SIZE}\r\n        viewBox=\"0 0 66 66\"\r\n      >\r\n        <circle\r\n          className={cn('md-circular-progress-path', {\r\n            'md-circular-progress-path--animated': !isDeterminate,\r\n          })}\r\n          strokeWidth=\"6\"\r\n          strokeLinecap=\"round\"\r\n          style={circleStyle}\r\n          cx=\"33\"\r\n          cy=\"33\"\r\n          r=\"30\"\r\n        />\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n"]}