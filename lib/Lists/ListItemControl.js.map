{"version":3,"sources":["../../src/js/Lists/ListItemControl.js"],"names":["ListItemControl","props","className","tileStyle","tileClassName","primaryAction","secondaryAction","primaryText","secondaryText","threeLines","leftIcon","leftAvatar","rightIcon","rightAvatar","control","only","text","label","leftNode","rightNode","icond","avatard","propTypes","style","object","string","node","bool","element","number","propName","args","validator","isRequired"],"mappings":"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","file":"ListItemControl.js","sourcesContent":["import React, { PureComponent, Children, cloneElement } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\n\r\nimport themeColors from '../utils/themeColors';\r\nimport ListItemText from './ListItemText';\r\nimport TileAddon from './TileAddon';\r\n\r\nexport default class ListItemControl extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply to the `.md-list-item`.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the `.md-list-item`.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the `.md-list-tile`.\r\n     */\r\n    tileStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the `.md-list-tile`.\r\n     */\r\n    tileClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The primary text to display in the `ListItemControl`. The `primaryAction` or\r\n     * `secondaryAction` will end up getting the `label` prop injected into it with\r\n     * a combination of the `primaryText` and `secondaryText`. If the `primaryAction`\r\n     * or `secondaryAction` already have a label prop, the `label` prop will be used\r\n     * as the `primaryText`.\r\n     */\r\n    primaryText: PropTypes.node,\r\n\r\n    /**\r\n     * An optional secondary text that can be displayed in the label of the `primaryAction`\r\n     * or `secondaryAction`.\r\n     */\r\n    secondaryText: PropTypes.node,\r\n\r\n    /**\r\n     * Boolean if the primary and secondary text will span three lines.\r\n     */\r\n    threeLines: PropTypes.bool,\r\n\r\n    /**\r\n     * The primary action of the `ListItemControl`. This _should_ normally\r\n     * be a type of `SelectionControl`\r\n     */\r\n    primaryAction: PropTypes.element,\r\n\r\n    /**\r\n     * The secondary action of the `ListItemControl`. This _should_ normally\r\n     * be a type of `SelectionControl`. If it is a selection control,\r\n     * make sure to add the `labelBefore` prop to get correct positioning.\r\n     */\r\n    secondaryAction: PropTypes.element,\r\n\r\n    /**\r\n     * An optional `FontIcon` to display to the left of the action.\r\n     */\r\n    leftIcon: PropTypes.node,\r\n\r\n    /**\r\n     * An optional `Avatar` to display to the left of the action.\r\n     */\r\n    leftAvatar: PropTypes.node,\r\n\r\n    /**\r\n     * An optional `FontIcon` to display to the right of the action.\r\n     */\r\n    rightIcon: PropTypes.node,\r\n\r\n    /**\r\n     * An optional `FontIcon` to display to the right of the action.\r\n     */\r\n    rightAvatar: PropTypes.node,\r\n\r\n    /**\r\n     * Defines the number of items in the list. This is only required when all items in the\r\n     * list are not present in the DOM.\r\n     *\r\n     * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize\r\n     */\r\n    'aria-setsize': PropTypes.number,\r\n\r\n    /**\r\n     * Defines the items position in the list. This is only required when all items in the list\r\n     * are not present in the DOM. The custom validation just requires this prop if the `aria-setsize`\r\n     * prop is defined as a helpful reminder.\r\n     *\r\n     * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset\r\n     */\r\n    'aria-posinset': (props, propName, ...args) => {\r\n      let validator = PropTypes.number;\r\n      if (typeof props['aria-setsize'] !== 'undefined') {\r\n        validator = validator.isRequired;\r\n      }\r\n\r\n      return validator(props, propName, ...args);\r\n    },\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      className,\r\n      tileStyle,\r\n      tileClassName,\r\n      primaryAction,\r\n      secondaryAction,\r\n      primaryText,\r\n      secondaryText,\r\n      threeLines,\r\n      leftIcon,\r\n      leftAvatar,\r\n      rightIcon,\r\n      rightAvatar,\r\n      ...props\r\n    } = this.props;\r\n\r\n    let control = Children.only(primaryAction || secondaryAction);\r\n    const text = (\r\n      <ListItemText\r\n        key=\"text\"\r\n        primaryText={control.props.label || primaryText}\r\n        secondaryText={secondaryText}\r\n        className={cn({\r\n          'md-tile-content--left-icon': leftIcon,\r\n          'md-tile-content--left-avatar': leftAvatar,\r\n          'md-tile-content--left-button': primaryAction,\r\n          'md-tile-content--right-padding': primaryAction,\r\n        })}\r\n      />\r\n    );\r\n    control = cloneElement(control, {\r\n      className: cn('md-list-control', {\r\n        'md-list-control--right': secondaryAction,\r\n      }, control.props.className),\r\n      label: text,\r\n    });\r\n\r\n    const leftNode = (\r\n      <TileAddon\r\n        key=\"left-addon\"\r\n        icon={leftIcon}\r\n        avatar={leftAvatar}\r\n      />\r\n    );\r\n\r\n    const rightNode = (\r\n      <TileAddon\r\n        key=\"right-addon\"\r\n        icon={rightIcon}\r\n        avatar={rightAvatar}\r\n      />\r\n    );\r\n\r\n    const icond = !!leftIcon || !!rightIcon;\r\n    const avatard = !!leftAvatar || !!rightAvatar;\r\n\r\n    return (\r\n      <li {...props} className={cn('md-list-item', className)}>\r\n        <div\r\n          style={tileStyle}\r\n          className={cn('md-list-tile', {\r\n            'md-list-tile--icon': !secondaryText && icond && !avatard,\r\n            'md-list-tile--avatar': !secondaryText && avatard,\r\n            'md-list-tile--two-lines': secondaryText && !threeLines,\r\n            'md-list-tile--three-lines': secondaryText && threeLines,\r\n            'md-list-tile--control-left': primaryAction,\r\n            'md-list-tile--control-right': secondaryAction,\r\n          }, themeColors({ text: true }), tileClassName)}\r\n        >\r\n          {leftNode}\r\n          {control}\r\n          {rightNode}\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n"]}