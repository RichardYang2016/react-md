{"version":3,"sources":["../../src/js/NavigationDrawers/NavigationDrawer.js"],"names":["DrawerTypes","getNonMiniType","type","pMini","PERSISTENT_MINI","tMini","TEMPORARY_MINI","indexOf","PERSISTENT","TEMPORARY","toMiniListItem","item","index","divider","subheader","key","itemProps","NavigationDrawer","props","defaultProps","mobileType","mobileDrawerType","tabletType","tabletDrawerType","desktopType","desktopDrawerType","constantType","constantDrawerType","others","getCurrentMedia","defaultMedia","defaultVisible","initialDrawerType","state","mobile","tablet","desktop","drawerType","visible","persistentIcon","id","contentId","label","jumpLabel","persistentIconChildren","persistentIconClassName","closeIconChildren","closeIconClassName","closeIcon","onCloseClick","_toggleVisibility","renderNode","context","nextProps","nVisible","_animate","_timeout","clearTimeout","style","className","toolbarStyle","toolbarClassName","drawerStyle","drawerClassName","contentStyle","contentClassName","Content","contentComponent","miniDrawerStyle","miniDrawerClassName","miniNavStyle","miniNavClassName","miniDrawerId","miniNavItemsId","navItems","children","drawerId","drawerTitle","drawerZDepth","drawerChildren","drawerHeaderChildren","drawerTransitionDuration","toolbarId","toolbarTitle","toolbarTitleMenu","toolbarTitleStyle","toolbarTitleClassName","toolbarActions","toolbarProminent","toolbarProminentTitle","toolbarThemeType","toolbarSingleColor","toolbarChildren","toolbarZDepth","transitionName","transitionEnterTimeout","transitionLeaveTimeout","extractMini","miniDrawerHeader","miniDrawerChildren","footer","includeDrawerHeader","contentProps","temporaryIcon","temporaryIconChildren","temporaryIconClassName","menuIconChildren","menuIconClassName","propDrawerType","propDrawerHeader","drawerHeader","propRenderNode","onDrawerChange","contentActive","mini","temporary","persistent","clipped","CLIPPED","floating","FLOATING","offset","toolbarRelative","nav","closeButton","miniDrawer","miniList","map","desktopOffset","_handleVisibility","_handleTypeChange","DrawerType","_warned","_msg","FULL_HEIGHT","console","error","replace","propTypes","oneOfType","number","string","navItemsId","object","navStyle","navClassName","overlayStyle","overlayClassName","node","bool","position","oneOf","isRequired","arrayOf","element","shape","primaryText","mobileMinWidth","tabletMinWidth","desktopMinWidth","onMediaTypeChange","func","onVisibilityChange","autoclose","actions","portal","lastChild","onVisibilityToggle","contentTransitionName","contentTransitionEnterTimeout","contentTransitionLeaveTimeout","contextTypes","childContextTypes","transitionDuration","setTimeout","setState","e","callback","mediaState"],"mappings":"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","file":"NavigationDrawer.js","sourcesContent":["import React, { PureComponent, isValidElement } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\r\nimport deprecated from 'react-prop-types/lib/deprecated';\r\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\r\n\r\nimport getField from '../utils/getField';\r\nimport controlled from '../utils/PropTypes/controlled';\r\nimport invalidIf from '../utils/PropTypes/invalidIf';\r\nimport Button from '../Buttons/Button';\r\nimport Drawer from '../Drawers/Drawer';\r\nimport List from '../Lists/List';\r\nimport Toolbar from '../Toolbars/Toolbar';\r\nimport FontIcon from '../FontIcons/FontIcon';\r\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\r\n\r\nconst { DrawerTypes } = Drawer;\r\nimport { isTemporary, isPersistent, isPermanent, isMini } from '../Drawers/isType';\r\nimport JumpToContentLink from './JumpToContentLink';\r\nimport CloseButton from './CloseButton';\r\nimport MiniListItem from './MiniListItem';\r\n\r\nfunction getNonMiniType(type) {\r\n  const { PERSISTENT_MINI: pMini, TEMPORARY_MINI: tMini } = DrawerTypes;\r\n  if ([pMini, tMini].indexOf(type) === -1) {\r\n    return type;\r\n  }\r\n\r\n  return pMini === type ? DrawerTypes.PERSISTENT : DrawerTypes.TEMPORARY;\r\n}\r\n\r\nfunction toMiniListItem(item, index) {\r\n  if (isValidElement(item)) {\r\n    return item;\r\n  }\r\n\r\n  const { divider, subheader, key, ...itemProps } = item;\r\n  if (divider || subheader) {\r\n    return null;\r\n  }\r\n\r\n  return <MiniListItem key={key || index} {...itemProps} />;\r\n}\r\n\r\n/**\r\n * The `NavigationDrawer` is used when you want a full layout configuration. It is a combination\r\n * of the `Toolbar` component and the `Drawer` component. Any props that are not specifically\r\n * listed below will be provided to the `Drawer` component. So if there are props on the `Drawer`\r\n * that are not listed here, they will be passed along.\r\n *\r\n * The main benefit of using this component is that it will manage adding respective offset\r\n * classes automatically for you to the content and the drawer. It will also manage using\r\n * a mini drawer type for you.\r\n */\r\nexport default class NavigationDrawer extends PureComponent {\r\n  static DrawerType = { // deprecated\r\n    /* eslint-disable no-console */\r\n    _warned: false,\r\n    _msg: 'Invalid use of `NavigationDrawer.DrawerType.{{TYPE}}`. The `NavigationDrawer.DrawerType` ' +\r\n      'has been deprecated and will be removed in the next major release. Please use the ' +\r\n      '`NavigationDrawer.DrawerTypes.{{TYPE}}` instead.',\r\n\r\n    get FULL_HEIGHT() {\r\n      if (!this._warned) {\r\n        console.error(this._msg.replace(/{{TYPE}}/g, 'FULL_HEIGHT'));\r\n      }\r\n      this._warned = true;\r\n\r\n      return DrawerTypes.FULL_HEIGHT;\r\n    },\r\n\r\n    get CLIPPED() {\r\n      if (!this._warned) {\r\n        console.error(this._msg.replace(/{{TYPE}}/g, 'CLIPPED'));\r\n      }\r\n      this._warned = true;\r\n\r\n      return DrawerTypes.CLIPPED;\r\n    },\r\n\r\n    get FLOATING() {\r\n      if (!this._warned) {\r\n        console.error(this._msg.replace(/{{TYPE}}/g, 'FLOATING'));\r\n      }\r\n      this._warned = true;\r\n\r\n      return DrawerTypes.FLOATING;\r\n    },\r\n\r\n    get PERSISTENT() {\r\n      if (!this._warned) {\r\n        console.error(this._msg.replace(/{{TYPE}}/g, 'PERSISTENT'));\r\n      }\r\n      this._warned = true;\r\n\r\n      return DrawerTypes.PERSISTENT;\r\n    },\r\n\r\n    get PERSISTENT_MINI() {\r\n      if (!this._warned) {\r\n        console.error(this._msg.replace(/{{TYPE}}/g, 'PERSISTENT_MINI'));\r\n      }\r\n      this._warned = true;\r\n\r\n      return DrawerTypes.PERSISTENT_MINI;\r\n    },\r\n\r\n    get TEMPORARY() {\r\n      if (!this._warned) {\r\n        console.error(this._msg.replace(/{{TYPE}}/g, 'TEMPORARY'));\r\n      }\r\n      this._warned = true;\r\n\r\n      return DrawerTypes.TEMPORARY;\r\n    },\r\n\r\n    get TEMPORARY_MINI() {\r\n      if (!this._warned) {\r\n        console.error(this._msg.replace(/{{TYPE}}/g, 'TEMPORARY_MINI'));\r\n      }\r\n      this._warned = true;\r\n\r\n      return DrawerTypes.TEMPORARY_MINI;\r\n    },\r\n    /* eslint-enable no-console */\r\n  };\r\n\r\n  static DrawerTypes = DrawerTypes;\r\n\r\n  static propTypes = {\r\n    /**\r\n     * An optional id to provide to the entire div wrapper.\r\n     */\r\n    id: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional id to provide to the drawer. This is generally a good idea to provide if\r\n     * there are any `navItems` defined.\r\n     *\r\n     * @see {@link #navItemsId}\r\n     * @see {@link #miniDrawerId}\r\n     */\r\n    drawerId: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional id to provide to the navItems list. If this is omitted and the `drawerId` prop is\r\n     * defined, it will be defaulted to `${drawerId}-nav-items`.\r\n     *\r\n     * @see {@link #drawerId}\r\n     * @see {@link Drawer#navItemsId}\r\n     */\r\n    navItemsId: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional id to apply to mini drawer that gets created when the `drawerType` is set to\r\n     * one of the mini types.\r\n     *\r\n     * @see {@link #drawerId}\r\n     * @see {@link #miniNavItemsId}\r\n     */\r\n    miniDrawerId: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional id to apply to mini drawer's navigation list that gets created when the `drawerType`\r\n     * is set to one of the mini types.\r\n     *\r\n     * @see {@link #navItemsId}\r\n     * @see {@link #miniDrawerId}\r\n     */\r\n    miniNavItemsId: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional id to provide to the main toolbar.\r\n     */\r\n    toolbarId: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An id to give the main content. A hidden link is created in the main drawer's header that links to the main\r\n     * content. This is used for keyboard only users to jump the navigation and jump straight to the content.\r\n     *\r\n     * If you provide your own `drawerHeader`, it is suggested to include the link yourself.\r\n     */\r\n    contentId: isRequiredForA11y(PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ])),\r\n\r\n    /**\r\n     * An optional style to apply to the surrounding container.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the surrounding container.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the main toolbar.\r\n     */\r\n    toolbarStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the toolbar.\r\n     */\r\n    toolbarClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the main toolbar's title.\r\n     */\r\n    toolbarTitleStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the main toolbar's title.\r\n     */\r\n    toolbarTitleClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the drawer.\r\n     */\r\n    drawerStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the drawer.\r\n     */\r\n    drawerClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the `List` surrounding the `navItems`.\r\n     */\r\n    navStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the `List` surrounding the `navItems`.\r\n     */\r\n    navClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the mini drawer that gets created when the `drawerType` is set\r\n     * to one of the mini types.\r\n     *\r\n     * @see {@link #miniDrawerClassName}\r\n     * @see {@link #miniNavStyle}\r\n     * @see {@link #miniNavClassName}\r\n     */\r\n    miniDrawerStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the mini drawer that gets created when the `drawerType` is set\r\n     * to one of the mini types.\r\n     *\r\n     * @see {@link #miniDrawerStyle}\r\n     * @see {@link #miniNavStyle}\r\n     * @see {@link #miniNavClassName}\r\n     */\r\n    miniDrawerClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the mini drawer's navigation list when the `drawerType` is set\r\n     * to one of the mini types.\r\n     *\r\n     * @see {@link #miniDrawerStyle}\r\n     * @see {@link #miniDrawerClassName}\r\n     * @see {@link #miniNavClassName}\r\n     */\r\n    miniNavStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the mini drawer's navigation list when the `drawerType` is set\r\n     * to one of the mini types.\r\n     *\r\n     * @see {@link #miniDrawerStyle}\r\n     * @see {@link #miniDrawerClassName}\r\n     * @see {@link #miniNavStyle}\r\n     */\r\n    miniNavClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the content. This is the container surrounding whatever\r\n     * `children` are passed in.\r\n     */\r\n    contentStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the content. This is the container surrounding whatever\r\n     * `children` are passed in.\r\n     */\r\n    contentClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the overlay.\r\n     */\r\n    overlayStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the overlay.\r\n     */\r\n    overlayClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The children to display in the main content.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * Boolean if the `drawerHeader` component should be built if the `drawerHeader` prop is not\r\n     * passed in.\r\n     */\r\n    includeDrawerHeader: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional header to display in the drawer. This will normally be the `Toolbar` component\r\n     * or any other type of header. You can either use this prop with the `CloseButton` component\r\n     * when displaying a persistent drawer, or use the `drawerTitle` and `drawerHeaderChildren` prop\r\n     * to build a toolbar.\r\n     */\r\n    drawerHeader: PropTypes.node,\r\n\r\n    /**\r\n     * An optional title to use for the drawer's header toolbar. If the `drawerHeader` prop is defined,\r\n     * this is invalid.\r\n     */\r\n    drawerTitle: invalidIf(PropTypes.node, 'drawerHeader'),\r\n\r\n    /**\r\n     * An optional zDepth to apply to the drawer. If this is omitted, the value will be set as follows:\r\n     * - floating || inline = 1\r\n     * - temporary = 5\r\n     * - all others = 1\r\n     *\r\n     * @see {@link Papers/Paper#zDepth}\r\n     */\r\n    drawerZDepth: PropTypes.number,\r\n\r\n    /**\r\n     * Any additional children to display after the `drawerHeader` and `navItems` list in the drawer.\r\n     */\r\n    drawerChildren: PropTypes.node,\r\n\r\n    /**\r\n     * Any additional children to display in the drawer's header `Toolbar`. If the `drawerHeader` prop is defined,\r\n     * this is invalid.\r\n     */\r\n    drawerHeaderChildren: invalidIf(PropTypes.node, 'drawerHeader'),\r\n\r\n    /**\r\n     * The position for the drawer to be displayed.\r\n     */\r\n    position: PropTypes.oneOf(['left', 'right']).isRequired,\r\n\r\n    /**\r\n     * An optional list of elements or props to use to build a navigational list in the drawer.\r\n     * When the item is an object of props, it will build a `ListItem` component unless a key of\r\n     * `divider` or `subheader` is set to true. It will then create the Divider or Subheader component\r\n     * with any other remaining keys.\r\n     */\r\n    navItems: PropTypes.arrayOf(PropTypes.oneOfType([\r\n      PropTypes.element,\r\n      PropTypes.shape({\r\n        divider: PropTypes.bool,\r\n        subheader: PropTypes.bool,\r\n        primaryText: PropTypes.node,\r\n      }),\r\n    ])),\r\n\r\n    /**\r\n     * The drawer type to use for mobile devices.\r\n     */\r\n    mobileDrawerType: PropTypes.oneOf([\r\n      DrawerTypes.TEMPORARY,\r\n      DrawerTypes.TEMPORARY_MINI,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * The drawer type to use for tablets.\r\n     */\r\n    tabletDrawerType: PropTypes.oneOf([\r\n      DrawerTypes.FULL_HEIGHT,\r\n      DrawerTypes.CLIPPED,\r\n      DrawerTypes.FLOATING,\r\n      DrawerTypes.PERSISTENT,\r\n      DrawerTypes.PERSISTENT_MINI,\r\n      DrawerTypes.TEMPORARY,\r\n      DrawerTypes.TEMPORARY_MINI,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * The drawer type to use for desktop displays.\r\n     */\r\n    desktopDrawerType: PropTypes.oneOf([\r\n      DrawerTypes.FULL_HEIGHT,\r\n      DrawerTypes.CLIPPED,\r\n      DrawerTypes.FLOATING,\r\n      DrawerTypes.PERSISTENT,\r\n      DrawerTypes.PERSISTENT_MINI,\r\n      DrawerTypes.TEMPORARY,\r\n      DrawerTypes.TEMPORARY_MINI,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * An optional drawer type to enforce on all screen sizes. If the drawer type is not\r\n     * `temporary`, you are required to define the `onMediaTypeChange` prop to handle switching\r\n     * to temporary when the media matches a mobile device.\r\n     * ```\r\n     */\r\n    drawerType: PropTypes.oneOf([\r\n      DrawerTypes.FULL_HEIGHT,\r\n      DrawerTypes.CLIPPED,\r\n      DrawerTypes.FLOATING,\r\n      DrawerTypes.PERSISTENT,\r\n      DrawerTypes.PERSISTENT_MINI,\r\n      DrawerTypes.TEMPORARY,\r\n      DrawerTypes.TEMPORARY_MINI,\r\n    ]),\r\n\r\n    /**\r\n     * The default media match for the drawer. This will be what is displayed on first render.\r\n     * The component will adjust itself to the current media after it has mounted, but this\r\n     * is mostly used for server side rendering.\r\n     */\r\n    defaultMedia: PropTypes.oneOf(['mobile', 'tablet', 'desktop']),\r\n\r\n    /**\r\n     * The min width to use for a mobile media query. This prop should match the `md-mobile-min-width`\r\n     * variable.\r\n     *\r\n     * The media query for a mobile device will be:\r\n     *\r\n     * ```js\r\n     * window.matchMedia(\r\n     *   `screen and (min-width: ${mobileMinWidth}px) and (max-width: ${tabletMinWidth - 1}px`\r\n     * ).matches;\r\n     * ```\r\n     */\r\n    mobileMinWidth: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * The min width to use for a tablet media query. This prop should match the `md-tablet-min-width`\r\n     * variable.\r\n     *\r\n     * The media query for a tablet device will be:\r\n     *\r\n     * ```js\r\n     * window.matchMedia(\r\n     *   `screen and (min-width: ${tabletMinWidth}px) and (max-width: ${desktopWidth - 1}px`\r\n     * ).matches;\r\n     * ```\r\n     */\r\n    tabletMinWidth: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * The min width to use for a desktop media query. This prop should match the `md-desktop-min-width`\r\n     * variable.\r\n     *\r\n     * The media query for a tablet device will be:\r\n     *\r\n     * ```js\r\n     * window.matchMedia(`screen and (min-width: ${tabletMinWidth}px)`).matches;\r\n     * ```\r\n     */\r\n    desktopMinWidth: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * An optional function to call when the type of the drawer changes because of the\r\n     * new media queries. The callback will include the newly selected drawer type\r\n     * and an object containing the media matches of `mobile`, `tablet`, and `desktop`.\r\n     *\r\n     * ```js\r\n     * this.props.onMediaTypeChange(NavigationDrawer.DrawerTypes.TEMPORARY, {\r\n     *   mobile: true,\r\n     *   tablet: false,\r\n     *   desktop: false,\r\n     * });\r\n     * ```\r\n     */\r\n    onMediaTypeChange: PropTypes.func,\r\n\r\n    /**\r\n     * Boolean if the temporary or persistent drawers are visible by default.\r\n     */\r\n    defaultVisible: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the temporary or persistent drawers are visible. If this is defined,\r\n     * it will make the component controlled and require the `onVisibilityChange` prop\r\n     * to be defined.\r\n     */\r\n    visible: controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible'),\r\n\r\n    /**\r\n     * An optional function to call when the visibility of the drawer changes. The callback\r\n     * will include the new visibility.\r\n     *\r\n     * ```js\r\n     * onVisibilityChange(false);\r\n     * ```\r\n     */\r\n    onVisibilityChange: PropTypes.func,\r\n\r\n    /**\r\n     * A boolean if the mini drawer's list should be generated from the `navItems` prop. When building\r\n     * the list, it will extract the `leftIcon` or `leftAvatar` from the `navItem` and then create a\r\n     * mini `ListItem` containing only that icon or image. Any other event listeners will also be applied.\r\n     *\r\n     *\r\n     * @see {@link #miniDrawerHeader}\r\n     * @see {@link #miniDrawerChildren}\r\n     */\r\n    extractMini: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional header to display in the mini drawer. This will be displayed above the optional\r\n     * mini nav list that get generated if the `extractMini` prop is `true` and the `miniDrawerChildren`.\r\n     *\r\n     * @see {@link #extractMini}\r\n     */\r\n    miniDrawerHeader: PropTypes.node,\r\n\r\n    /**\r\n     * Any additional children to display in the mini drawer. This will be displayed after the `miniDrawerHeader`\r\n     * and the optional mini nav list that gets generated if the `extractMini` prop is `true`.\r\n     *\r\n     * @see {@link #extractMini}\r\n     */\r\n    miniDrawerChildren: PropTypes.node,\r\n\r\n    /**\r\n     * Boolean if the drawer should automatically close after a nav item has been clicked for `temporary` drawers.\r\n     */\r\n    autoclose: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional title to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`\r\n     * may be defined, not both.\r\n     */\r\n    toolbarTitle: invalidIf(PropTypes.node, 'toolbarTitleMenu'),\r\n\r\n    /**\r\n     * An optional select field menu to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`\r\n     * may be defined, not both.\r\n     */\r\n    toolbarTitleMenu: PropTypes.element,\r\n\r\n    /**\r\n     * The theme style for the main toolbar.\r\n     *\r\n     * @see {@link Toolbars/Toolbar}\r\n     */\r\n    toolbarThemeType: PropTypes.oneOf(['default', 'colored', 'themed']).isRequired,\r\n\r\n    /**\r\n     * Boolean if the toolbar's nav, actions, and title should share the same color.\r\n     */\r\n    toolbarSingleColor: PropTypes.bool,\r\n\r\n    /**\r\n     * A boolean if the toolbar should be prominent.\r\n     */\r\n    toolbarProminent: PropTypes.bool,\r\n\r\n    /**\r\n     * A boolean if the toolbar's title should be prominent.\r\n     */\r\n    toolbarProminentTitle: PropTypes.bool,\r\n\r\n    /**\r\n     * A list of elements or a single element to display to the right of the\r\n     * toolbar's nav, title, and children.\r\n     *\r\n     * @see {@link Toolbars/Toolbar#actions}\r\n     */\r\n    toolbarActions: Toolbar.propTypes.actions,\r\n\r\n    /**\r\n     * Any children to display in the toolbar. This will be displayed between the optional title and\r\n     * actions.\r\n     */\r\n    toolbarChildren: Toolbar.propTypes.children,\r\n\r\n    /**\r\n     * An optional zDepth to apply to the toolbar.\r\n     *\r\n     * @see {@link Toolbars/Toolbar#zDepth}\r\n     */\r\n    toolbarZDepth: PropTypes.number,\r\n\r\n    /**\r\n     * The component to render the content in.\r\n     */\r\n    contentComponent: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.string,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * An optional footer display after the main content.\r\n     */\r\n    footer: PropTypes.node,\r\n\r\n    /**\r\n     * The icon to use to render the button that will toggle the visibility of the\r\n     * navigation drawer for `temporary` and `persistent` drawers. This is normally a\r\n     * hamburger menu.\r\n     */\r\n    temporaryIcon: PropTypes.element,\r\n\r\n    /**\r\n     * The icon to use to render the button that appears on a persistent drawer's open\r\n     * header. This is used to create the `CloseButton` for drawers. When a persistent\r\n     * drawer is closed, the `temporaryIcon` will be used to create a button to open the drawer.\r\n     *\r\n     * If the `drawerHeader` prop is defined, you will have to either include the `CloseButton`\r\n     * in your header manually, or create your own controlled button to close the drawer.\r\n     */\r\n    persistentIcon: PropTypes.element,\r\n\r\n    /**\r\n     * The transition name to use when the page's content changes. If you want to disable\r\n     * transitions, set both the `transitionEnterTimeout` and `transitionLeaveTimeout` props\r\n     * to a false-ish value. (`null`, `undefined`, or `0`).\r\n     */\r\n    transitionName: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * The transition enter timeout when the page's content changes. If you want to disable\r\n     * the enter transition, set this to a false-ish value (`null`, `undefined`, or `0`).\r\n     */\r\n    transitionEnterTimeout: PropTypes.number,\r\n\r\n    /**\r\n     * The transition leave timeout when the page's content changes. If you want to disable\r\n     * the leave transition, set this to a false-ish value (`null`, `undefined`, or `0`).\r\n     */\r\n    transitionLeaveTimeout: PropTypes.number,\r\n\r\n    /**\r\n     * The transition duration for the drawer when sliding in and out of view.\r\n     */\r\n    drawerTransitionDuration: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * Any additional props to provide to the main content. This will be applied before any of the generated props,\r\n     * so this should not include `style`, `className`, or `component`.\r\n     */\r\n    contentProps: PropTypes.object,\r\n\r\n    /**\r\n     * The label to use for a keyboard accessibility link that jumps all the navigation and allows a user to focus\r\n     * the main content. This is created in the drawer's header.\r\n     */\r\n    jumpLabel: PropTypes.node.isRequired,\r\n\r\n    /**\r\n     * Boolean if the Portal's functionality of rendering in a separate react tree should be applied\r\n     * to the drawer. The overlay that appears for temporary type drawers will still appear in the\r\n     * separate subtree.\r\n     *\r\n     * @see {@link Helpers/Portal}\r\n     */\r\n    portal: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional DOM Node to render the drawer into. The default is to render as\r\n     * the first child in the `body`.\r\n     *\r\n     * > This prop will not be used when the drawer is of the permanent type or `inline` is specified\r\n     * since the `Portal` component will not be used.\r\n     */\r\n    renderNode: PropTypes.object,\r\n\r\n    /**\r\n     * Boolean if the drawer should be rendered as the last child instead of the first child\r\n     * in the `renderNode` or `body`.\r\n     *\r\n     * > This prop will not be used when the drawer is of the permanent type or `inline` is specified\r\n     * since the `Portal` component will not be used.\r\n     */\r\n    lastChild: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the `drawerType` should remain constant across all media. This is really only valid\r\n     * if the `drawerType` is one of the temporary types.\r\n     */\r\n    constantDrawerType: PropTypes.bool,\r\n\r\n    menuIconChildren: deprecated(PropTypes.node, 'Use `temporaryIcon` instead'),\r\n    menuIconClassName: deprecated(PropTypes.string, 'Use `temporaryIcon` instead'),\r\n    closeIconChildren: deprecated(PropTypes.node, 'Use `persistentIcon` instead'),\r\n    closeIconClassName: deprecated(PropTypes.string, 'Use `persistentIcon` instead'),\r\n    temporaryIconChildren: deprecated(PropTypes.node, 'Use the `temporaryIcon` instead'),\r\n    temporaryIconClassName: deprecated(PropTypes.string, 'Use the `temporaryIcon` instead'),\r\n    persistentIconChildren: deprecated(PropTypes.node, 'Use the `persistentIcon` instead'),\r\n    persistentIconClassName: deprecated(PropTypes.string, 'Use the `persistentIcon` prop instead'),\r\n    onDrawerChange: deprecated(PropTypes.func, 'Use `onVisibilityChange` or `onMediaTypeChange` instead'),\r\n    onVisibilityToggle: deprecated(PropTypes.func, 'Use `onVisibilityChange` instead'),\r\n    contentTransitionName: deprecated(PropTypes.string, 'Use `transitionName` instead'),\r\n    contentTransitionEnterTimeout: deprecated(PropTypes.number, 'Use `transtionEnterTimeout` instead'),\r\n    contentTransitionLeaveTimeout: deprecated(PropTypes.number, 'Use `transtionLeaveTimeout` instead'),\r\n    initialDrawerType: deprecated(\r\n      PropTypes.oneOf(['mobile', 'tablet', 'desktop']),\r\n      'Use `defaultMedia` instead'\r\n    ),\r\n  };\r\n\r\n  static contextTypes = {\r\n    renderNode: PropTypes.object,\r\n  };\r\n\r\n  static childContextTypes = {\r\n    closeIcon: PropTypes.element,\r\n    onCloseClick: PropTypes.func,\r\n    id: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]).isRequired,\r\n    label: PropTypes.node.isRequired,\r\n    renderNode: PropTypes.object,\r\n  }\r\n\r\n  static defaultProps = {\r\n    autoclose: Drawer.defaultProps.autoclose,\r\n    contentId: 'main-content',\r\n    // Defaults to false since it keeps the state of the drawerType in sync and makes the Drawer\r\n    // controlled. On initial mount without any defaultMedia updates, it would always be considered\r\n    // temporary\r\n    constantDrawerType: false,\r\n    jumpLabel: 'Jump to content',\r\n    extractMini: true,\r\n    position: Drawer.defaultProps.position,\r\n    defaultMedia: Drawer.defaultProps.defaultMedia,\r\n    mobileDrawerType: Drawer.defaultProps.mobileType,\r\n    tabletDrawerType: Drawer.defaultProps.tabletType,\r\n    desktopDrawerType: Drawer.defaultProps.desktopType,\r\n    mobileMinWidth: Drawer.defaultProps.mobileMinWidth,\r\n    tabletMinWidth: Drawer.defaultProps.tabletMinWidth,\r\n    desktopMinWidth: Drawer.defaultProps.desktopMinWidth,\r\n    includeDrawerHeader: true,\r\n    contentComponent: 'main',\r\n    temporaryIcon: <FontIcon>menu</FontIcon>,\r\n    toolbarThemeType: 'colored',\r\n    persistentIcon: <FontIcon>arrow_back</FontIcon>,\r\n    transitionName: 'md-cross-fade',\r\n    transitionEnterTimeout: 300,\r\n    drawerTransitionDuration: Drawer.defaultProps.transitionDuration,\r\n  };\r\n\r\n  /**\r\n   * Determines the current media and returns an object containing matches for `mobile`, `tablet`, `desktop`,\r\n   * and the current drawer type. This expects a `props` object of the drawer.\r\n   *\r\n   * If this is used server side, it will default to only matching mobile.\r\n   *\r\n   * @param {Object=} props - The current drawer's prop shape to extract the mobile, tablet, and desktop type/min\r\n   *    widths. This defaults to the drawer's default props.\r\n   * @return {Object} an object containing the media matches and the current type to use for the drawer.\r\n   */\r\n  static getCurrentMedia(props = NavigationDrawer.defaultProps) {\r\n    const {\r\n      mobileDrawerType: mobileType,\r\n      tabletDrawerType: tabletType,\r\n      desktopDrawerType: desktopType,\r\n      constantDrawerType: constantType,\r\n      ...others\r\n    } = props;\r\n\r\n    return Drawer.getCurrentMedia({ mobileType, tabletType, desktopType, constantType, ...others });\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { defaultMedia, defaultVisible, initialDrawerType } = props;\r\n\r\n    this.state = {\r\n      mobile: initialDrawerType || defaultMedia === 'mobile',\r\n      tablet: initialDrawerType || defaultMedia === 'tablet',\r\n      desktop: initialDrawerType || defaultMedia === 'desktop',\r\n    };\r\n\r\n    if (typeof props.drawerType === 'undefined') {\r\n      this.state.drawerType = props[`${initialDrawerType || defaultMedia}DrawerType`];\r\n    }\r\n\r\n    const type = getField(props, this.state, 'drawerType');\r\n\r\n    if (typeof props.visible === 'undefined') {\r\n      // The logic for determining the visibility is handled by the created mini drawer\r\n      this.state.visible = isPermanent(type);\r\n      if (!this.state.visible && typeof defaultVisible !== 'undefined') {\r\n        this.state.visible = defaultVisible;\r\n      }\r\n    }\r\n  }\r\n\r\n  getChildContext() {\r\n    const {\r\n      persistentIcon,\r\n      contentId: id,\r\n      jumpLabel: label,\r\n\r\n      // deprecated\r\n      persistentIconChildren,\r\n      persistentIconClassName,\r\n      closeIconChildren,\r\n      closeIconClassName,\r\n    } = this.props;\r\n\r\n    return {\r\n      id,\r\n      label,\r\n      closeIcon: getDeprecatedIcon(\r\n        closeIconClassName || persistentIconClassName,\r\n        closeIconChildren || persistentIconChildren,\r\n        persistentIcon,\r\n      ),\r\n      onCloseClick: this._toggleVisibility,\r\n      renderNode: this.context.renderNode,\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const visible = getField(this.props, this.state, 'visible');\r\n    const nVisible = getField(nextProps, this.state, 'visible');\r\n    if (visible !== nVisible) {\r\n      this._animate(nextProps);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this._timeout) {\r\n      clearTimeout(this._timeout);\r\n    }\r\n  }\r\n\r\n  _animate = (props = this.props, state = this.state) => {\r\n    if (isTemporary(getField(props, state, 'drawerType'))) {\r\n      return;\r\n    }\r\n\r\n    if (this._timeout) {\r\n      clearTimeout(this._timeout);\r\n    }\r\n\r\n    this._timeout = setTimeout(() => {\r\n      this.setState({ contentActive: false });\r\n    }, props.drawerTransitionDuration);\r\n\r\n    this.setState({ contentActive: true });\r\n  };\r\n\r\n  _toggleVisibility = (e) => {\r\n    const { onVisibilityToggle, onVisibilityChange, onDrawerChange } = this.props;\r\n    const visible = !getField(this.props, this.state, 'visible');\r\n    const callback = onVisibilityChange || onVisibilityToggle || onDrawerChange;\r\n    if (callback) {\r\n      callback(visible, e);\r\n    }\r\n\r\n    if (typeof this.props.visible === 'undefined') {\r\n      this.setState({ visible });\r\n      this._animate(this.props);\r\n    }\r\n  };\r\n\r\n  _handleVisibility = (visible) => {\r\n    const { onVisibilityToggle, onVisibilityChange, onDrawerChange } = this.props;\r\n    const callback = onVisibilityChange || onVisibilityToggle || onDrawerChange;\r\n    if (callback) {\r\n      callback(visible);\r\n    }\r\n\r\n    if (typeof this.props.visible === 'undefined') {\r\n      this.setState({ visible });\r\n      this._animate(this.props);\r\n    }\r\n  };\r\n\r\n  _handleTypeChange = (drawerType, mediaState) => {\r\n    const { onMediaTypeChange } = this.props;\r\n    let state = mediaState;\r\n    if (onMediaTypeChange) {\r\n      onMediaTypeChange(drawerType, mediaState);\r\n    }\r\n\r\n    if (typeof this.props.drawerType === 'undefined') {\r\n      state = { ...mediaState, drawerType };\r\n    }\r\n\r\n\r\n    this.setState(state);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      style,\r\n      className,\r\n      toolbarStyle,\r\n      toolbarClassName,\r\n      drawerStyle,\r\n      drawerClassName,\r\n      contentStyle,\r\n      contentClassName,\r\n      contentComponent: Content,\r\n      miniDrawerStyle,\r\n      miniDrawerClassName,\r\n      miniNavStyle,\r\n      miniNavClassName,\r\n      miniDrawerId,\r\n      miniNavItemsId,\r\n      navItems,\r\n      children,\r\n      drawerId,\r\n      drawerTitle,\r\n      drawerZDepth,\r\n      drawerChildren,\r\n      drawerHeaderChildren,\r\n      drawerTransitionDuration,\r\n      toolbarId,\r\n      toolbarTitle,\r\n      toolbarTitleMenu,\r\n      toolbarTitleStyle,\r\n      toolbarTitleClassName,\r\n      toolbarActions,\r\n      toolbarProminent,\r\n      toolbarProminentTitle,\r\n      toolbarThemeType,\r\n      toolbarSingleColor,\r\n      toolbarChildren,\r\n      toolbarZDepth,\r\n      mobileDrawerType: mobileType,\r\n      tabletDrawerType: tabletType,\r\n      desktopDrawerType: desktopType,\r\n      transitionName,\r\n      transitionEnterTimeout,\r\n      transitionLeaveTimeout,\r\n      extractMini,\r\n      miniDrawerHeader,\r\n      miniDrawerChildren,\r\n      footer,\r\n      includeDrawerHeader,\r\n      contentId,\r\n      contentProps,\r\n      constantDrawerType,\r\n      temporaryIcon,\r\n\r\n      // deprecated\r\n      temporaryIconChildren,\r\n      temporaryIconClassName,\r\n      menuIconChildren,\r\n      menuIconClassName,\r\n      /* eslint-disable no-unused-vars */\r\n      drawerType: propDrawerType,\r\n      drawerHeader: propDrawerHeader,\r\n      renderNode: propRenderNode,\r\n      jumpLabel,\r\n      persistentIcon,\r\n\r\n      // deprecated\r\n      onDrawerChange,\r\n      closeIconChildren,\r\n      closeIconClassName,\r\n      persistentIconChildren,\r\n      persistentIconClassName,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    let { drawerHeader } = this.props;\r\n    const { desktop, tablet, contentActive } = this.state;\r\n\r\n    const drawerType = getField(this.props, this.state, 'drawerType');\r\n    const visible = getField(this.props, this.state, 'visible');\r\n    const renderNode = getField(this.props, this.context, 'renderNode');\r\n    const mini = isMini(drawerType);\r\n    const temporary = isTemporary(drawerType);\r\n    const persistent = isPersistent(drawerType);\r\n    const clipped = drawerType === DrawerTypes.CLIPPED;\r\n    const floating = drawerType === DrawerTypes.FLOATING;\r\n\r\n    const offset = (desktop || tablet ? !temporary && visible : visible);\r\n    const toolbarRelative = cn({\r\n      'md-toolbar-relative': !toolbarProminent && !toolbarProminentTitle,\r\n      'md-toolbar-relative--prominent': toolbarProminent || toolbarProminentTitle,\r\n    });\r\n\r\n    let nav;\r\n    if (temporary || persistent) {\r\n      nav = (\r\n        <Button\r\n          key=\"nav\"\r\n          onClick={this._toggleVisibility}\r\n          disabled={persistent && visible}\r\n          icon\r\n          iconEl={getDeprecatedIcon(\r\n            menuIconClassName || temporaryIconClassName,\r\n            menuIconChildren || temporaryIconChildren,\r\n            temporaryIcon\r\n          )}\r\n        />\r\n      );\r\n    }\r\n\r\n    let closeButton;\r\n    if (persistent) {\r\n      closeButton = <CloseButton />;\r\n    }\r\n\r\n    if (!drawerHeader && includeDrawerHeader) {\r\n      drawerHeader = (\r\n        <Toolbar\r\n          key=\"drawer-header\"\r\n          title={drawerTitle}\r\n          actions={visible && nav ? closeButton : null}\r\n          className={cn('md-divider-border md-divider-border--bottom', {\r\n            [toolbarRelative]: clipped || floating,\r\n          })}\r\n        >\r\n          {drawerHeaderChildren}\r\n          <JumpToContentLink />\r\n        </Toolbar>\r\n      );\r\n    }\r\n    let miniDrawer;\r\n    if (mini) {\r\n      let miniList;\r\n      if (extractMini) {\r\n        miniList = (\r\n          <List\r\n            id={miniNavItemsId}\r\n            key=\"mini-nav-items\"\r\n            style={miniNavStyle}\r\n            className={cn(miniNavClassName, toolbarRelative)}\r\n          >\r\n            {navItems.map(toMiniListItem)}\r\n          </List>\r\n        );\r\n      }\r\n\r\n      miniDrawer = (\r\n        <Drawer\r\n          id={miniDrawerId}\r\n          key=\"mini-drawer\"\r\n          type={drawerType}\r\n          renderNode={renderNode}\r\n          aria-hidden={visible}\r\n          style={miniDrawerStyle}\r\n          className={miniDrawerClassName}\r\n        >\r\n          {miniDrawerHeader}\r\n          {miniList}\r\n          {miniDrawerChildren}\r\n        </Drawer>\r\n      );\r\n    }\r\n\r\n    const desktopOffset = !clipped && !floating && offset;\r\n\r\n    return (\r\n      <div id={id} style={style} className={className}>\r\n        <Toolbar\r\n          id={toolbarId}\r\n          colored={toolbarThemeType === 'colored'}\r\n          themed={toolbarThemeType === 'themed'}\r\n          singleColor={toolbarSingleColor}\r\n          style={toolbarStyle}\r\n          className={cn({\r\n            'md-toolbar--over-drawer': clipped || floating || (mini && !visible),\r\n          }, toolbarClassName)}\r\n          title={toolbarTitle}\r\n          titleMenu={toolbarTitleMenu}\r\n          prominent={toolbarProminent}\r\n          prominentTitle={toolbarProminentTitle}\r\n          titleStyle={toolbarTitleStyle}\r\n          titleClassName={cn({\r\n            'md-title--drawer-active': contentActive,\r\n            'md-transition--deceleration': offset && visible,\r\n            'md-transition--acceleration': offset && !visible,\r\n            'md-title--permanent-offset': desktopOffset && isPermanent(drawerType),\r\n            'md-title--persistent-offset': desktopOffset && persistent,\r\n          }, toolbarTitleClassName)}\r\n          nav={nav}\r\n          actions={toolbarActions}\r\n          fixed\r\n          zDepth={toolbarZDepth}\r\n        >\r\n          {toolbarChildren}\r\n        </Toolbar>\r\n        {miniDrawer}\r\n        <Drawer\r\n          {...props}\r\n          id={drawerId}\r\n          constantType={constantDrawerType}\r\n          transitionDuration={drawerTransitionDuration}\r\n          header={drawerHeader}\r\n          style={drawerStyle}\r\n          className={drawerClassName}\r\n          navItems={navItems}\r\n          renderNode={renderNode}\r\n          mobileType={mobileType}\r\n          tabletType={tabletType}\r\n          desktopType={desktopType}\r\n          type={getNonMiniType(drawerType)}\r\n          visible={visible}\r\n          zDepth={drawerZDepth}\r\n          onVisibilityChange={this._handleVisibility}\r\n          onMediaTypeChange={this._handleTypeChange}\r\n        >\r\n          {drawerChildren}\r\n        </Drawer>\r\n        <CSSTransitionGroup\r\n          {...contentProps}\r\n          id={contentId}\r\n          component={Content}\r\n          transitionName={transitionName}\r\n          transitionEnter={!!transitionEnterTimeout}\r\n          transitionEnterTimeout={transitionEnterTimeout}\r\n          transitionLeave={!!transitionLeaveTimeout}\r\n          transitionLeaveTimeout={transitionLeaveTimeout}\r\n          tabIndex={-1}\r\n          style={contentStyle}\r\n          className={cn('md-navigation-drawer-content', {\r\n            'md-navigation-drawer-content--active': contentActive,\r\n            'md-navigation-drawer-content--inactive': !visible,\r\n            'md-navigation-drawer-content--prominent-offset': toolbarProminent || toolbarProminentTitle,\r\n            'md-transition--deceleration': visible,\r\n            'md-transition--acceleration': !visible,\r\n            'md-drawer-relative': offset,\r\n            'md-drawer-relative--mini': mini && (!visible || temporary),\r\n          }, toolbarRelative, contentClassName)}\r\n        >\r\n          {children}\r\n        </CSSTransitionGroup>\r\n        {footer}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}