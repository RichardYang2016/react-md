{"version":3,"sources":["../../src/js/Pickers/TimePicker.js"],"names":["TimePicker","_updateTime","newTime","timePart","props","tempTime","setTempTime","timeMode","timePeriod","time","Date","isAM","is12","setHours","setMinutes","_handleTimeChosen","hoverMode","setTimeMode","onOkClick","okLabel","okPrimary","cancelLabel","cancelPrimary","onCancelClick","style","className","hours","minutes","displayMode","inline","icon","hoursInt","parseInt","minutesInt","replace","actions","key","onClick","primary","secondary","label","propTypes","object","string","node","isRequired","bool","func","DateTimeFormat","locales","oneOfType","arrayOf","oneOf","instanceOf"],"mappings":"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","file":"TimePicker.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\n\r\nimport ClockFace from './ClockFace';\r\nimport DialogFooter from '../Dialogs/DialogFooter';\r\nimport TimePickerHeader from './TimePickerHeader';\r\n\r\n/**\r\n * The `TimePicker` component is used to display a time picker\r\n * in the `TimePickerContainer` component.\r\n */\r\nexport default class TimePicker extends PureComponent {\r\n  static propTypes = {\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    okLabel: PropTypes.node.isRequired,\r\n    okPrimary: PropTypes.bool.isRequired,\r\n    onOkClick: PropTypes.func.isRequired,\r\n    cancelLabel: PropTypes.node.isRequired,\r\n    cancelPrimary: PropTypes.bool.isRequired,\r\n    onCancelClick: PropTypes.func.isRequired,\r\n    DateTimeFormat: PropTypes.func.isRequired,\r\n    locales: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.arrayOf(PropTypes.string),\r\n    ]).isRequired,\r\n    icon: PropTypes.bool,\r\n    inline: PropTypes.bool,\r\n    displayMode: PropTypes.oneOf(['landscape', 'portrait']),\r\n\r\n    /**\r\n     * A function that will switch the state from hour to minute.\r\n     */\r\n    setTimeMode: PropTypes.func.isRequired,\r\n\r\n    /**\r\n     * A function that will update the time for the TimePicker before\r\n     * the user selects ok. This function will be given a new Date object\r\n     * with a modified time.\r\n     */\r\n    setTempTime: PropTypes.func.isRequired,\r\n\r\n    /**\r\n     * The current display mode of the time picker.\r\n     */\r\n    timeMode: PropTypes.oneOf(['hour', 'minute']).isRequired,\r\n\r\n    /**\r\n     * The current time as a date object that is being displayed in the\r\n     * time picker.\r\n     */\r\n    tempTime: PropTypes.instanceOf(Date).isRequired,\r\n\r\n    /**\r\n     * A string that is a representation of the hours in the user's locale.\r\n     */\r\n    hours: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * A string that is a representation of the minutes in the user's locale.\r\n     * This will also include any separator the locale uses.\r\n     *\r\n     * Example: ':15' in '3:15 PM' for 'en-US'\r\n     */\r\n    minutes: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * An optional time period if a user's locale uses it.\r\n     */\r\n    timePeriod: PropTypes.string,\r\n\r\n    /**\r\n     * If true the hover mode of the Time Picker is activated.\r\n     * In hover mode no clicks are required to start selecting an hour\r\n     * and the timemode switches automatically when a time was chosen.\r\n     * When a minute is selected the chosen time is applied automatically.\r\n     */\r\n    hoverMode: PropTypes.bool,\r\n  };\r\n\r\n  /**\r\n   * Takes in the new time (number o'clock or minutes), updates the temp time\r\n   * with that new time, and then calls the setTempTime prop.\r\n   */\r\n  _updateTime = (newTime) => {\r\n    let timePart = newTime;\r\n    const { tempTime, setTempTime, timeMode, timePeriod } = this.props;\r\n    const time = new Date(tempTime);\r\n    if (timeMode === 'hour') {\r\n      const isAM = timePeriod === 'AM';\r\n      const is12 = timePart === 12;\r\n      if (timePeriod && isAM && is12) {\r\n        timePart = 0;\r\n      } else if (timePeriod && !isAM && !is12) {\r\n        timePart += 12;\r\n      }\r\n\r\n      time.setHours(timePart);\r\n    } else {\r\n      time.setMinutes(timePart);\r\n    }\r\n\r\n    setTempTime(time);\r\n  };\r\n\r\n  _handleTimeChosen = () => {\r\n    const { hoverMode, setTimeMode, onOkClick, timeMode } = this.props;\r\n\r\n    if (hoverMode) {\r\n      if (timeMode === 'hour') {\r\n        setTimeMode('minute');\r\n      } else {\r\n        onOkClick();\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      okLabel,\r\n      okPrimary,\r\n      onOkClick,\r\n      cancelLabel,\r\n      cancelPrimary,\r\n      onCancelClick,\r\n      style,\r\n      className,\r\n      setTimeMode,\r\n      setTempTime,\r\n      timeMode,\r\n      tempTime,\r\n      hours,\r\n      minutes,\r\n      timePeriod,\r\n      displayMode,\r\n      inline,\r\n      icon,\r\n      hoverMode,\r\n    } = this.props;\r\n\r\n    const hoursInt = parseInt(hours, 10);\r\n    const minutesInt = parseInt(minutes.replace(/[^0-9]/g, ''), 10);\r\n    const actions = [{\r\n      key: 'cancel',\r\n      onClick: onCancelClick,\r\n      primary: cancelPrimary,\r\n      secondary: !cancelPrimary,\r\n      label: cancelLabel,\r\n    }, {\r\n      key: 'ok',\r\n      onClick: onOkClick,\r\n      primary: okPrimary,\r\n      secondary: !okPrimary,\r\n      label: okLabel,\r\n    }];\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        className={cn('md-picker md-picker--time', {\r\n          [`md-picker--${displayMode}`]: displayMode,\r\n          'md-picker--inline': inline,\r\n          'md-picker--inline-icon': inline && icon,\r\n        }, className)}\r\n      >\r\n        <TimePickerHeader\r\n          tempTime={tempTime}\r\n          timeMode={timeMode}\r\n          setTimeMode={setTimeMode}\r\n          setTempTime={setTempTime}\r\n          hours={hours}\r\n          minutes={minutes}\r\n          timePeriod={timePeriod}\r\n        />\r\n        <div className=\"md-picker-content-container\">\r\n          <div className=\"md-picker-content md-picker-content--clock\">\r\n            <ClockFace\r\n              time={timeMode === 'hour' ? hoursInt : minutesInt}\r\n              minutes={timeMode === 'minute'}\r\n              onChange={this._updateTime}\r\n              timePeriod={timePeriod}\r\n              hoverMode={hoverMode}\r\n              onTimeChosen={this._handleTimeChosen}\r\n            />\r\n          </div>\r\n          <DialogFooter actions={actions} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}