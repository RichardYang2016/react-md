{"version":3,"sources":["../../src/js/Pickers/TimePickerContainer.js"],"names":["TimePickerContainer","props","initialDate","defaultValue","Date","value","visible","initiallyOpen","defaultVisible","state","_getTimeParts","time","timeMode","initialTimeMode","defaultTimeMode","tempTime","nextProps","setState","prevProps","prevState","inline","isOpen","pVisible","_handleOutsideClick","window","addEventListener","_closeOnEsc","removeEventListener","date","DateTimeFormat","locales","hours","minutes","timePeriod","style","className","pickerStyle","pickerClassName","inputStyle","inputClassName","textFieldStyle","textFieldClassName","id","disabled","label","placeholder","icon","displayMode","fullWidth","lineDirection","closeOnEsc","hoverMode","portal","renderNode","lastChild","animateInline","block","paddedBlock","active","error","floating","required","leftIconStateful","rightIcon","rightIconStateful","customSize","errorText","helpText","helpOnFocus","inlineIndicator","disableScrollLocking","ariaLabel","propValue","propVisible","readOnly","onVisibilityChange","picker","_handleOkClick","_handleCancelClick","_setTimeMode","_setTempTime","content","_setContainer","_toggleOpen","_handleKeyDown","_getTextFieldValue","propTypes","oneOfType","string","number","object","node","bool","instanceOf","onChange","func","isRequired","arrayOf","okLabel","okPrimary","cancelLabel","cancelPrimary","oneOf","autoOk","defaultProps","navigator","userLanguage","language","container","_container","e","which","keyCode","contains","target"],"mappings":"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","file":"TimePickerContainer.js","sourcesContent":["/* eslint-disable no-shadow */\r\nimport React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\r\nimport deprecated from 'react-prop-types/lib/deprecated';\r\n\r\nimport { ESC, TAB } from '../constants/keyCodes';\r\nimport getField from '../utils/getField';\r\nimport handleWindowClickListeners from '../utils/EventUtils/handleWindowClickListeners';\r\nimport handleKeyboardAccessibility from '../utils/EventUtils/handleKeyboardAccessibility';\r\nimport controlled from '../utils/PropTypes/controlled';\r\nimport DateTimeFormat from '../utils/DateUtils/DateTimeFormat';\r\nimport formatTime from '../utils/DateUtils/formatTime';\r\nimport extractTimeParts from '../utils/DateUtils/extractTimeParts';\r\nimport Dialog from '../Dialogs/DialogContainer';\r\nimport FontIcon from '../FontIcons/FontIcon';\r\nimport TextField from '../TextFields/TextField';\r\nimport Collapse from '../Helpers/Collapse';\r\nimport TimePicker from './TimePicker';\r\n\r\n/**\r\n * The `TimePickerContainer` component is a wrapper for the main `TimePicker` component\r\n * to manage the state and _logic_ for rendering the `TimePicker`. This component will\r\n * either render inline or in a `Dialog` depending if the `inline` prop is set\r\n * to `true`.\r\n *\r\n * NOTE: This component is actually exported as `TimePicker` when using the `import { member }` syntax.\r\n * The following two lines are equivalent:\r\n *\r\n * ```js\r\n * import { TimePicker } from 'react-md/lib/Pickers';\r\n * import TimePicker from 'react-md/lib/Pickers/TimePickerContainer';\r\n * ```\r\n */\r\nexport default class TimePickerContainer extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An id for the text field in the time picker. This is require for a11y.\r\n     */\r\n    id: isRequiredForA11y(PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.number,\r\n    ])),\r\n\r\n    /**\r\n     * An aria-label to apply to the dialog when it has been opened. This is required for\r\n     * a11y.\r\n     */\r\n    'aria-label': isRequiredForA11y(PropTypes.string),\r\n\r\n    /**\r\n     * An optional style to apply to the time picker's container.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the time picker's container.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the time picker.\r\n     */\r\n    pickerStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the time picker.\r\n     */\r\n    pickerClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the input tag.\r\n     */\r\n    inputStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the input tag.\r\n     */\r\n    inputClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the text field's container.\r\n     */\r\n    textFieldStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the text field's container.\r\n     */\r\n    textFieldClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional icon to display with the time picker.\r\n     *\r\n     * @see {@link TextFields/TextField#leftIcon}\r\n     */\r\n    icon: PropTypes.node,\r\n\r\n    /**\r\n     * Boolean if the time picker is open by default.\r\n     */\r\n    defaultVisible: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional label to be displayed in the time picker's text\r\n     * field.\r\n     */\r\n    label: PropTypes.node,\r\n\r\n    /**\r\n     * An optional placeholder to be displayed in the time picker's text field.\r\n     */\r\n    placeholder: PropTypes.string,\r\n\r\n    /**\r\n     * The value of the time picker. This will make the time picker\r\n     * be a controlled component.\r\n     */\r\n    value: controlled(PropTypes.instanceOf(Date), 'onChange', 'defaultValue'),\r\n\r\n    /**\r\n     * An optional function to call when the selected date is changed\r\n     * by hitting the OK button. The newly formatted time string,\r\n     * the new Date object, and the change event will be given.\r\n     *\r\n     * `onChange(timeString, dateObject, event)`.\r\n     */\r\n    onChange: PropTypes.func,\r\n\r\n    /**\r\n     * An optional default value to give for the year picker.\r\n     */\r\n    defaultValue: PropTypes.instanceOf(Date),\r\n\r\n    /**\r\n     * A function to format the dates since it should be formatted to the user's\r\n     * locale. This _should_ be the `Intl.DateTimeFormat` function. You\r\n     * can also create your own if you really wanted. Inadvisable though.\r\n     *\r\n     * See [intl-polyfill](https://github.com/andyearnshaw/Intl.js/) for more info.\r\n     */\r\n    DateTimeFormat: PropTypes.func.isRequired,\r\n\r\n    /**\r\n     * The locales to use for formatting the date. This will default to using\r\n     * the user's language in the browser or `'en-US'` when server rendering.\r\n     */\r\n    locales: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.arrayOf(PropTypes.string),\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * The label to use for the ok button on the year picker.\r\n     */\r\n    okLabel: PropTypes.node.isRequired,\r\n\r\n    /**\r\n     * Boolean if the ok button should be styled with the primary color.\r\n     */\r\n    okPrimary: PropTypes.bool,\r\n\r\n    /**\r\n     * The label to use for the cancel button on the year picker.\r\n     */\r\n    cancelLabel: PropTypes.node.isRequired,\r\n\r\n    /**\r\n     * Boolean if the cancel button should be styled with the primary color.\r\n     */\r\n    cancelPrimary: PropTypes.bool,\r\n\r\n    /**\r\n     * The default mode to open the time picker in.\r\n     */\r\n    defaultTimeMode: PropTypes.oneOf(['hour', 'minute']),\r\n\r\n    /**\r\n     * Boolean if the date should automatically be selected when a user clicks\r\n     * on a new date instead of making them hit the ok button.\r\n     */\r\n    autoOk: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the date picker should be displayed inline instead of in a\r\n     * dialog.\r\n     */\r\n    inline: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional force of the display mode of the date picker.\r\n     * This _should_ not really be used since there are media queries\r\n     * to use the correct mode based on device orientation.\r\n     */\r\n    displayMode: PropTypes.oneOf(['landscape', 'portrait']),\r\n\r\n    /**\r\n     * Boolean if the text field for the Time Picker should be displayed as full width.\r\n     */\r\n    fullWidth: PropTypes.bool,\r\n\r\n    /**\r\n     * The direction that the text field divider expands from when the text field\r\n     * in the date picker gains focus.\r\n     */\r\n    lineDirection: PropTypes.oneOf(['left', 'center', 'right']),\r\n\r\n    /**\r\n     * An optional boolean if the time picker is current visible by dialog or inline.\r\n     * If this is set, the `onVisibilityChange` function is required.\r\n     */\r\n    visible: controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible'),\r\n\r\n    /**\r\n     * An optional function to call when the date picker is opened in either a dialog, or\r\n     * inline. The callback will include the next state.\r\n     *\r\n     * ```js\r\n     * onVisibilityChange(!visible, e);\r\n     * ```\r\n     */\r\n    onVisibilityChange: PropTypes.func,\r\n\r\n    /**\r\n     * Boolean if the time picker is disabled.\r\n     */\r\n    disabled: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the dialog should be able to close if a keyboard user presses the escape key.\r\n     */\r\n    closeOnEsc: PropTypes.bool,\r\n\r\n    /**\r\n     * If true the hover mode of the Time Picker is activated.\r\n     * In hover mode no clicks are required to start selecting an hour\r\n     * and the time mode switches automatically when a time was chosen.\r\n     * When a minute is selected the chosen time is applied automatically.\r\n     */\r\n    hoverMode: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the inline time picker's visibility should be animated.\r\n     */\r\n    animateInline: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the time is required.\r\n     *\r\n     * @see {@link TextFields/TextField#required}\r\n     */\r\n    required: PropTypes.bool,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#block}\r\n     */\r\n    block: TextField.propTypes.block,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#paddedBlock}\r\n     */\r\n    paddedBlock: TextField.propTypes.paddedBlock,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#active}\r\n     */\r\n    active: TextField.propTypes.active,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#error}\r\n     */\r\n    error: TextField.propTypes.error,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#floating}\r\n     */\r\n    floating: TextField.propTypes.floating,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#leftIconStateful}\r\n     */\r\n    leftIconStateful: TextField.propTypes.leftIconStateful,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#rightIcon}\r\n     */\r\n    rightIcon: TextField.propTypes.rightIcon,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#rightIconStateful}\r\n     */\r\n    rightIconStateful: TextField.propTypes.rightIconStateful,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#customSize}\r\n     */\r\n    customSize: TextField.propTypes.customSize,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#errorText}\r\n     */\r\n    errorText: TextField.propTypes.errorText,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#helpText}\r\n     */\r\n    helpText: TextField.propTypes.helpText,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#helpOnFocus}\r\n     */\r\n    helpOnFocus: TextField.propTypes.helpOnFocus,\r\n\r\n    /**\r\n     * @see {@link TextFields/TextField#inlineIndicator}\r\n     */\r\n    inlineIndicator: TextField.propTypes.inlineIndicator,\r\n\r\n    /**\r\n     * Boolean if the Portal's functionality of rendering in a separate react tree should be applied\r\n     * to the dialog.\r\n     *\r\n     * @see {@link Helpers/Portal}\r\n     */\r\n    portal: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional DOM Node to render the dialog into. The default is to render as the first child\r\n     * in the `body`.\r\n     */\r\n    renderNode: PropTypes.object,\r\n\r\n    /**\r\n     * Boolean if the dialog should be rendered as the last child of the `renderNode` or `body` instead\r\n     * of the first.\r\n     */\r\n    lastChild: PropTypes.bool,\r\n\r\n    /**\r\n     * @see {@link Dialogs/DialogContainer#disableScrollLocking}\r\n     */\r\n    disableScrollLocking: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the TimePicker should be read only. This will prevent the user from opening the picker\r\n     * and only display the current date in the text field.\r\n     */\r\n    readOnly: PropTypes.bool,\r\n\r\n    isOpen: deprecated(PropTypes.bool, 'Use `visible` instead'),\r\n    initiallyOpen: deprecated(PropTypes.bool, 'Use `defaultVisible` instead'),\r\n    initialTimeMode: deprecated(PropTypes.oneOf(['hour', 'minute']), 'Use `defaultTimeMode` instead'),\r\n  };\r\n\r\n  static defaultProps = {\r\n    animateInline: true,\r\n    defaultTimeMode: 'hour',\r\n    icon: <FontIcon>access_time</FontIcon>,\r\n    DateTimeFormat: DateTimeFormat, // eslint-disable-line object-shorthand\r\n    locales: typeof window !== 'undefined'\r\n      ? window.navigator.userLanguage || window.navigator.language\r\n      : 'en-US',\r\n    okLabel: 'Ok',\r\n    okPrimary: true,\r\n    cancelLabel: 'Cancel',\r\n    cancelPrimary: true,\r\n    closeOnEsc: true,\r\n    disableScrollLocking: false,\r\n    'aria-label': 'Select a time',\r\n    hoverMode: false,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let initialDate;\r\n    if (props.defaultValue) {\r\n      initialDate = new Date(props.defaultValue);\r\n    } else if (props.value) {\r\n      initialDate = new Date(props.value);\r\n    } else {\r\n      initialDate = new Date();\r\n    }\r\n\r\n    const visible = typeof props.initiallyOpen !== 'undefined'\r\n      ? props.initiallyOpen\r\n      : !!props.defaultVisible;\r\n\r\n    this.state = {\r\n      visible,\r\n      ...this._getTimeParts(initialDate, props),\r\n      value: props.defaultValue,\r\n      time: initialDate,\r\n      timeMode: props.initialTimeMode || props.defaultTimeMode,\r\n      tempTime: initialDate,\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.value !== nextProps.value) {\r\n      const time = nextProps.value || new Date();\r\n      this.setState({ tempTime: time, ...this._getTimeParts(time, nextProps) });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { inline, isOpen } = this.props;\r\n    const visible = typeof isOpen !== 'undefined'\r\n      ? isOpen\r\n      : getField(this.props, this.state, 'visible');\r\n    const pVisible = typeof prevProps.isOpen !== 'undefined'\r\n      ? prevProps.isOpen\r\n      : getField(prevProps, prevState, 'visible');\r\n\r\n    if (visible === pVisible) {\r\n      return;\r\n    }\r\n\r\n    if (visible) {\r\n      if (inline) {\r\n        handleWindowClickListeners(this._handleOutsideClick, true);\r\n        window.addEventListener('keydown', this._closeOnEsc);\r\n      }\r\n    } else if (inline) {\r\n      handleWindowClickListeners(this._handleOutsideClick, false);\r\n      window.removeEventListener('keydown', this._closeOnEsc);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const visible = typeof this.props.isOpen !== 'undefined'\r\n      ? this.props.isOpen\r\n      : getField(this.props, this.state, 'visible');\r\n    if (visible && this.props.inline) {\r\n      handleWindowClickListeners(this._handleOutsideClick, false);\r\n      window.removeEventListener('keydown', this._closeOnEsc);\r\n    }\r\n  }\r\n\r\n  _setContainer = (container) => {\r\n    this._container = container;\r\n  };\r\n\r\n  _getTimeParts(date, props) {\r\n    return extractTimeParts(props.DateTimeFormat, props.locales, date);\r\n  }\r\n\r\n  _closeOnEsc = (e) => {\r\n    if ((e.which || e.keyCode) === ESC) {\r\n      this._handleCancelClick(e);\r\n    }\r\n  };\r\n\r\n  _handleOutsideClick = (e) => {\r\n    if (this._container && !this._container.contains(e.target)) {\r\n      this._handleCancelClick(e);\r\n    }\r\n  };\r\n\r\n  _toggleOpen = (e) => {\r\n    if (this.props.disabled || this.props.readOnly) {\r\n      return;\r\n    }\r\n\r\n    const visible = !(typeof this.props.isOpen !== 'undefined'\r\n      ? this.props.isOpen\r\n      : getField(this.props, this.state, 'visible'));\r\n\r\n    if (this.props.onVisibilityChange) {\r\n      this.props.onVisibilityChange(visible, e);\r\n    }\r\n\r\n    if (typeof this.props.isOpen === 'undefined' && typeof this.props.visible === 'undefined') {\r\n      const { hoverMode } = this.props;\r\n\r\n      if (hoverMode) {\r\n        this._setTimeMode('hour');\r\n      }\r\n\r\n      this.setState({ visible });\r\n    }\r\n  };\r\n\r\n  _setTimeMode = (timeMode) => {\r\n    if (this.state.timeMode === timeMode) {\r\n      return;\r\n    }\r\n\r\n    this.setState({ timeMode });\r\n  };\r\n\r\n  _setTempTime = (time) => {\r\n    if (this.state.tempTime === time) {\r\n      return;\r\n    }\r\n\r\n    this.setState({ tempTime: time, ...this._getTimeParts(time, this.props) });\r\n  };\r\n\r\n  _handleKeyDown = (e) => {\r\n    handleKeyboardAccessibility(e, this._toggleOpen, true, true);\r\n\r\n    if ((e.which || e.keyCode) === TAB && this.state.active) {\r\n      this.setState({ active: false });\r\n    }\r\n  };\r\n\r\n  _handleOkClick = (e) => {\r\n    const { onVisibilityChange, onChange, DateTimeFormat, locales } = this.props;\r\n    const value = new Date(this.state.tempTime);\r\n    if (onChange) {\r\n      onChange(formatTime(DateTimeFormat, locales, value), value, e);\r\n    }\r\n\r\n    if (onVisibilityChange) {\r\n      onVisibilityChange(false, e);\r\n    }\r\n\r\n    const state = { time: value, ...this._getTimeParts(value, this.props) };\r\n    if (typeof this.props.value === 'undefined') {\r\n      state.value = value;\r\n    }\r\n\r\n    if (typeof this.props.isOpen === 'undefined' && typeof this.props.visible === 'undefined') {\r\n      state.visible = false;\r\n    }\r\n\r\n    this.setState(state);\r\n  };\r\n\r\n  _handleCancelClick = (e) => {\r\n    if (this.props.onVisibilityChange) {\r\n      this.props.onVisibilityChange(false, e);\r\n    }\r\n\r\n    let state;\r\n    if (typeof this.props.isOpen === 'undefined' && typeof this.props.visible === 'undefined') {\r\n      state = { visible: false };\r\n    }\r\n\r\n    const value = getField(this.props, this.state, 'value');\r\n    if (value) {\r\n      state = { ...state, ...this._getTimeParts(value, this.props) };\r\n      state.tempTime = this.state.time;\r\n    }\r\n\r\n    if (state) {\r\n      this.setState(state);\r\n    }\r\n  };\r\n\r\n  _getTextFieldValue(props, state) {\r\n    const { DateTimeFormat, locales } = props;\r\n    const value = getField(props, state, 'value');\r\n    if (!value) {\r\n      return '';\r\n    } else if (value instanceof Date) {\r\n      return formatTime(DateTimeFormat, locales, value);\r\n    } else {\r\n      // currently don't support value of string\r\n      return value;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      timeMode,\r\n      tempTime,\r\n      hours,\r\n      minutes,\r\n      timePeriod,\r\n    } = this.state;\r\n\r\n    const {\r\n      style,\r\n      className,\r\n      pickerStyle,\r\n      pickerClassName,\r\n      inputStyle,\r\n      inputClassName,\r\n      textFieldStyle,\r\n      textFieldClassName,\r\n      id,\r\n      disabled,\r\n      label,\r\n      placeholder,\r\n      icon,\r\n      inline,\r\n      displayMode,\r\n      fullWidth,\r\n      lineDirection,\r\n      closeOnEsc,\r\n      hoverMode,\r\n      portal,\r\n      renderNode,\r\n      lastChild,\r\n      animateInline,\r\n      block,\r\n      paddedBlock,\r\n      active,\r\n      error,\r\n      floating,\r\n      required,\r\n      leftIconStateful,\r\n      rightIcon,\r\n      rightIconStateful,\r\n      customSize,\r\n      errorText,\r\n      helpText,\r\n      helpOnFocus,\r\n      inlineIndicator,\r\n      disableScrollLocking,\r\n      'aria-label': ariaLabel,\r\n      /* eslint-disable no-unused-vars */\r\n      value: propValue,\r\n      visible: propVisible,\r\n      readOnly,\r\n      defaultValue,\r\n      defaultVisible,\r\n      defaultTimeMode,\r\n      onVisibilityChange,\r\n\r\n      // deprecated\r\n      isOpen,\r\n      initialTimeMode,\r\n      initiallyOpen,\r\n      ...props\r\n    } = this.props;\r\n\r\n    const visible = typeof this.props.isOpen !== 'undefined'\r\n      ? this.props.isOpen\r\n      : getField(this.props, this.state, 'visible');\r\n\r\n    const picker = (\r\n      <TimePicker\r\n        {...props}\r\n        inline={inline}\r\n        icon={!!icon}\r\n        tempTime={tempTime}\r\n        timeMode={timeMode}\r\n        hours={hours}\r\n        minutes={minutes}\r\n        timePeriod={timePeriod}\r\n        style={pickerStyle}\r\n        className={pickerClassName}\r\n        displayMode={displayMode}\r\n        onOkClick={this._handleOkClick}\r\n        onCancelClick={this._handleCancelClick}\r\n        setTimeMode={this._setTimeMode}\r\n        setTempTime={this._setTempTime}\r\n        hoverMode={hoverMode}\r\n      />\r\n    );\r\n\r\n    let content;\r\n    if (inline) {\r\n      content = <Collapse collapsed={!visible} animate={animateInline}>{picker}</Collapse>;\r\n    } else {\r\n      content = (\r\n        <Dialog\r\n          id={`${id}-dialog`}\r\n          visible={visible}\r\n          onHide={this._handleCancelClick}\r\n          dialogClassName=\"md-dialog--picker\"\r\n          contentClassName=\"md-dialog-content--picker\"\r\n          aria-label={ariaLabel}\r\n          closeOnEsc={closeOnEsc}\r\n          portal={portal}\r\n          lastChild={lastChild}\r\n          renderNode={renderNode}\r\n          focusOnMount={false}\r\n          disableScrollLocking={disableScrollLocking}\r\n        >\r\n          {picker}\r\n        </Dialog>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div style={style} className={cn('md-picker-container', className)} ref={this._setContainer}>\r\n        <TextField\r\n          id={id}\r\n          style={textFieldStyle}\r\n          className={cn({ 'md-pointer--hover': !disabled }, textFieldClassName)}\r\n          inputStyle={inputStyle}\r\n          inputClassName={cn({ 'md-pointer--hover': !disabled }, inputClassName)}\r\n          active={active || visible}\r\n          error={error}\r\n          floating={floating || visible}\r\n          required={required}\r\n          disabled={disabled}\r\n          leftIcon={icon}\r\n          leftIconStateful={leftIconStateful}\r\n          rightIcon={rightIcon}\r\n          rightIconStateful={rightIconStateful}\r\n          inlineIndicator={inlineIndicator}\r\n          block={block}\r\n          paddedBlock={paddedBlock}\r\n          fullWidth={fullWidth}\r\n          lineDirection={lineDirection}\r\n          customSize={customSize}\r\n          helpText={helpText}\r\n          helpOnFocus={helpOnFocus}\r\n          errorText={errorText}\r\n          label={label}\r\n          placeholder={placeholder}\r\n          onClick={this._toggleOpen}\r\n          onKeyDown={this._handleKeyDown}\r\n          value={this._getTextFieldValue(this.props, this.state)}\r\n          readOnly\r\n        />\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}