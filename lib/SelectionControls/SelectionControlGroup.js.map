{"version":3,"sources":["../../src/js/SelectionControls/SelectionControlGroup.js"],"names":["requiredByAllControls","validator","validate","props","propName","component","others","err","invalids","controls","filter","c","map","_","i","length","invalidPrefix","join","invalidMsg","Error","SelectionControlGroup","_setGroup","group","_group","_handleChange","e","value","target","type","checked","values","state","split","index","indexOf","push","splice","onChange","setState","_handleKeyDown","onKeyDown","key","which","keyCode","dec","inc","preventDefault","radios","querySelectorAll","_activeIndex","focus","radio","defaultValue","groupValue","some","controlValue","id","name","label","labelClassName","className","controlStyle","controlClassName","Component","LabelComponent","labelComponent","inline","disabled","checkedRadioIcon","uncheckedRadioIcon","checkedCheckboxIcon","uncheckedCheckboxIcon","propValue","propControls","control","style","_isChecked","controlProps","tabIndex","undefined","ariaLabel","propTypes","object","string","oneOfType","number","oneOf","isRequired","node","func","bool","arrayOf","shape","defaultProps"],"mappings":"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","file":"SelectionControlGroup.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\n\r\nimport { UP, DOWN, LEFT, RIGHT } from '../constants/keyCodes';\r\nimport getField from '../utils/getField';\r\nimport minMaxLoop from '../utils/NumberUtils/minMaxLoop';\r\nimport controlled from '../utils/PropTypes/controlled';\r\nimport SelectionControl from './SelectionControl';\r\n\r\n\r\n/**\r\n * A custom PropTypes validator to make sure that each `control` in the `controls` prop\r\n * contains the given `propName`, or the `SelectionControlGroup` has defined that prop.\r\n */\r\nfunction requiredByAllControls(validator) {\r\n  return function validate(props, propName, component, ...others) {\r\n    let err = validator(props, propName, component, ...others);\r\n\r\n    if (!err && typeof props[propName] === 'undefined') {\r\n      const invalids = props.controls.filter(c => !c[propName]).map((_, i) => i);\r\n      if (invalids.length) {\r\n        const invalidPrefix = invalids.length === props.controls.length\r\n          ? 'All `controls`'\r\n          : `The \\`controls\\` at indexes \\`${invalids.join('`, `')}\\``;\r\n        const invalidMsg = `${invalidPrefix} are missing the \\`${propName}\\` prop.`;\r\n\r\n        err = new Error(\r\n          `The \\`${propName}\\` prop is required to make \\`${component}\\` accessible for users of ` +\r\n          `assistive technologies such as screen readers. Either add the \\`${propName}\\` to the \\`${component}\\` ` +\r\n          `or add the \\`${propName}\\` to each \\`control\\` in the \\`controls\\` prop. ${invalidMsg}`\r\n        );\r\n      }\r\n    }\r\n\r\n    return err;\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * The `SelectionControlGroup` component is used to simplify the generation of a list\r\n * of `SelectionControl`. Any common props are extracted to this component and passed\r\n * to the `SelectionControl`.\r\n */\r\nexport default class SelectionControlGroup extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply to the container.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the container.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to every `SelectionControl`. This will be merged with any `style`\r\n     * that a `control` might have.\r\n     */\r\n    controlStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to every `SelectionControl`. This will be merged with any\r\n     * `className` that a `control` might have.\r\n     */\r\n    controlClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional base id to apply to each `SelectionControl`. When this is included, the id for\r\n     * each control will start with this and end with their current index. If this is omitted,\r\n     * each `control` in the `controls` prop *must* have an `id` prop. This is required for\r\n     * accessibility.\r\n     */\r\n    id: requiredByAllControls(PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ])),\r\n\r\n    /**\r\n     * The type to apply to each `SelectionControl` in the group. Only `checkbox` and `radio` is\r\n     * valid for a grouping.\r\n     */\r\n    type: PropTypes.oneOf(['checkbox', 'radio']).isRequired,\r\n\r\n    /**\r\n     * The component to render the `SelectionControlGroup` in. This can only be a valid dom element\r\n     * since it relies on the ref callback to add keyboard accessibility.\r\n     */\r\n    component: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * An optional label to display above the group of `SelectionControl`s.\r\n     */\r\n    label: PropTypes.node,\r\n\r\n    /**\r\n     * An optional className to apply to the node surrounding the `label` prop.\r\n     */\r\n    labelClassName: PropTypes.string,\r\n\r\n    /**\r\n     * The component to render the optional `label` in.\r\n     */\r\n    labelComponent: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.func,\r\n    ]).isRequired,\r\n\r\n    /**\r\n     * An optional function to call when any `SelectionControl`'s `checked` state is changed\r\n     * in the group. If the `type` of the group is `radio`, the `value` of the `checked` radio\r\n     * will be given in the callback. If the `type` of the group is `checkbox`, a comma-delimited\r\n     * string of all `checked` checkboxes values will be given.\r\n     *\r\n     * ```js\r\n     * // checkbox\r\n     * onChange('Alpha,Omega', changeEvent);\r\n     *\r\n     * // radio\r\n     * onChange('Omega', changeEvent);\r\n     * ```\r\n     */\r\n    onChange: PropTypes.func,\r\n\r\n    /**\r\n     * A name to use for each `SelectionControl` in the group. If the `type` of the group is\r\n     * `checkbox`, the name will be updated to be an array name so that using\r\n     * `document.querySelector('input[name=\"yourName[]\"].value` will give the comma-delimited\r\n     * string of checked checkboxes.\r\n     *\r\n     * It is either required to have this prop set or every `control` in the `controls` prop to\r\n     * have the `name` prop.\r\n     */\r\n    name: requiredByAllControls(PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ])),\r\n\r\n    /**\r\n     * The default value for the `SelectionControlGroup`. This can either be a single value\r\n     * or a comma-delimited string of checkbox values. When the `type` of the group is `radio`\r\n     * and the group is uncontrolled, it is recommended to set this prop. Otherwise the first\r\n     * value of the `controls` prop will be used as the default value.\r\n     */\r\n    defaultValue: PropTypes.oneOfType([\r\n      PropTypes.bool,\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional value to use for the `SelectionControlGroup`. This will make the component\r\n     * controlled and require the `onChange` prop to be defined. Like the `defaultValue`, this\r\n     * can either be a single value or a comma-delimited list of checkbox values.\r\n     */\r\n    value: controlled(PropTypes.oneOfType([\r\n      PropTypes.bool,\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]), 'onChange'),\r\n\r\n    /**\r\n     * A list of objects to create the `SelectionControl` components. The shape of the object\r\n     * is the `propTypes` of the `SelectionControl` component, except that `value` prop is\r\n     * now required.\r\n     *\r\n     * The `SelectionControl` will inherit any inheritable props from the `SelectionControlGroup`.\r\n     */\r\n    controls: PropTypes.arrayOf(PropTypes.shape({\r\n      key: PropTypes.oneOfType([\r\n        PropTypes.number,\r\n        PropTypes.string,\r\n      ]),\r\n      label: PropTypes.node.isRequired,\r\n      value: PropTypes.oneOfType([\r\n        PropTypes.bool,\r\n        PropTypes.number,\r\n        PropTypes.string,\r\n      ]).isRequired,\r\n    })).isRequired,\r\n\r\n    /**\r\n     * Boolean if the `SelectionControl` should be displayed inline.\r\n     */\r\n    inline: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if all the selection controls in the group are disabled.\r\n     */\r\n    disabled: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional function to call when the keydown event is triggered.\r\n     */\r\n    onKeyDown: PropTypes.func,\r\n\r\n    /**\r\n     * An icon to use for a checked `radio` control. This will be applied to each\r\n     * control that has a `type=\"radio\"` in the `controls` list. This is just a simpler\r\n     * way of applying the custom icons for each radio in the list.\r\n     *\r\n     * This will default to the `checkedRadioIcon` on the `SelectionControl`.\r\n     *\r\n     * @see {@link #controls}\r\n     * @see {@link #uncheckedRadioIcon}\r\n     * @see {@link SelectionControls/SelectionControls#checkedRadioIcon}\r\n     * @see {@link SelectionControls/SelectionControls#uncheckedRadioIcon}\r\n     */\r\n    checkedRadioIcon: PropTypes.node,\r\n\r\n    /**\r\n     * An icon to use for an unchecked `radio` control. This will be applied to each\r\n     * control that has a `type=\"radio\"` in the `controls` list. This is just a simpler\r\n     * way of applying the custom icons for each radio in the list.\r\n     *\r\n     * This will default to the `uncheckedRadioIcon` on the `SelectionControl`.\r\n     *\r\n     * @see {@link #controls}\r\n     * @see {@link #checkedRadioIcon}\r\n     * @see {@link SelectionControls/SelectionControls#checkedRadioIcon}\r\n     * @see {@link SelectionControls/SelectionControls#uncheckedRadioIcon}\r\n     */\r\n    uncheckedRadioIcon: PropTypes.node,\r\n\r\n    /**\r\n     * An icon to use for a checked `checkbox` control. This will be applied to each\r\n     * control that has a `type=\"checkbox\"` in the `controls` list. This is just a simpler\r\n     * way of applying the custom icons for each checkbox in the list.\r\n     *\r\n     * This will default to the `checkedCheckboxIcon` on the `SelectionControl`.\r\n     *\r\n     * @see {@link #controls}\r\n     * @see {@link #uncheckedCheckboxIcon}\r\n     * @see {@link SelectionControls/SelectionControls#checkedCheckboxIcon}\r\n     * @see {@link SelectionControls/SelectionControls#uncheckedCheckboxIcon}\r\n     */\r\n    checkedCheckboxIcon: PropTypes.node,\r\n\r\n    /**\r\n     * An icon to use for an unchecked `checkbox` control. This will be applied to each\r\n     * control that has a `type=\"checkbox\"` in the `controls` list. This is just a simpler\r\n     * way of applying the custom icons for each checkbox in the list.\r\n     *\r\n     * This will default to the `uncheckedCheckboxIcon` on the `SelectionControl`.\r\n     *\r\n     * @see {@link #controls}\r\n     * @see {@link #checkedCheckboxIcon}\r\n     * @see {@link SelectionControls/SelectionControls#checkedCheckboxIcon}\r\n     * @see {@link SelectionControls/SelectionControls#uncheckedCheckboxIcon}\r\n     */\r\n    uncheckedCheckboxIcon: PropTypes.node,\r\n  };\r\n\r\n  static defaultProps = {\r\n    component: 'fieldset',\r\n    labelComponent: 'legend',\r\n    labelClassName: 'md-subheading-1',\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const radio = props.type === 'radio';\r\n    this.state = {};\r\n\r\n    if (typeof props.value === 'undefined') {\r\n      let value = props.defaultValue;\r\n\r\n      if (typeof value === 'undefined') {\r\n        value = radio ? props.controls[0].value : '';\r\n      }\r\n\r\n      this.state.value = value;\r\n    }\r\n\r\n    const groupValue = getField(props, this.state, 'value');\r\n    this._activeIndex = -1;\r\n    props.controls.some(({ value }, i) => {\r\n      if (value === groupValue) {\r\n        this._activeIndex = i;\r\n      }\r\n\r\n      return this._activeIndex > -1;\r\n    });\r\n  }\r\n\r\n  _isChecked(value, controlValue, type) {\r\n    return type === 'radio'\r\n      ? value === controlValue\r\n      : value.split(',').indexOf(controlValue) !== -1;\r\n  }\r\n\r\n  _setGroup = (group) => {\r\n    this._group = group;\r\n  };\r\n\r\n  _handleChange = (e) => {\r\n    let value = e.target.value;\r\n    if (this.props.type === 'checkbox') {\r\n      const { checked } = e.target;\r\n\r\n      const values = getField(this.props, this.state, 'value').split(',');\r\n      const index = values.indexOf(value);\r\n      if (checked) {\r\n        values.push(value);\r\n      } else {\r\n        values.splice(index, 1);\r\n      }\r\n\r\n      value = values.join(',');\r\n    }\r\n\r\n    if (this.props.onChange) {\r\n      this.props.onChange(value, e);\r\n    }\r\n\r\n    if (typeof this.props.value === 'undefined') {\r\n      this.setState({ value });\r\n    }\r\n  };\r\n\r\n  _handleKeyDown = (e) => {\r\n    if (this.props.onKeyDown) {\r\n      this.props.onKeyDown(e);\r\n    }\r\n\r\n    const key = e.which || e.keyCode;\r\n    const dec = key === UP || key === LEFT;\r\n    const inc = key === DOWN || key === RIGHT;\r\n    if (!this._group || (!dec && !inc)) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    const radios = this._group.querySelectorAll('*[role=\"radio\"]');\r\n    this._activeIndex = minMaxLoop(this._activeIndex, 0, radios.length - 1, inc);\r\n    radios[this._activeIndex].focus();\r\n    const { value } = this.props.controls[this._activeIndex];\r\n    if (getField(this.props, this.state, 'value') !== value) {\r\n      if (this.props.onChange) {\r\n        this.props.onChange(value, e);\r\n      }\r\n\r\n      if (typeof this.props.value === 'undefined') {\r\n        this.setState({ value });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      name,\r\n      type,\r\n      label,\r\n      labelClassName,\r\n      className,\r\n      controlStyle,\r\n      controlClassName,\r\n      component: Component,\r\n      labelComponent: LabelComponent,\r\n      inline,\r\n      disabled,\r\n      checkedRadioIcon,\r\n      uncheckedRadioIcon,\r\n      checkedCheckboxIcon,\r\n      uncheckedCheckboxIcon,\r\n      /* eslint-disable no-unused-vars */\r\n      value: propValue,\r\n      controls: propControls,\r\n      defaultValue,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    const value = getField(this.props, this.state, 'value');\r\n    const radio = type === 'radio';\r\n\r\n    const controls = this.props.controls.map((control, i) => {\r\n      let style = control.style;\r\n      if (controlStyle) {\r\n        style = style ? { ...controlStyle, ...style } : controlStyle;\r\n      }\r\n\r\n      const checked = this._isChecked(value, control.value, type);\r\n      const controlProps = {\r\n        id: `${id}${i}`,\r\n        key: `control${i}`,\r\n        name: `${name}${type === 'checkbox' ? '[]' : ''}`,\r\n        type,\r\n        inline,\r\n        disabled,\r\n        checked,\r\n        tabIndex: !radio || checked || (i === 0 && this._activeIndex === -1) ? undefined : -1,\r\n        checkedRadioIcon,\r\n        uncheckedRadioIcon,\r\n        checkedCheckboxIcon,\r\n        uncheckedCheckboxIcon,\r\n        ...control,\r\n        style,\r\n        className: cn(controlClassName, control.className),\r\n      };\r\n\r\n      return <SelectionControl {...controlProps} />;\r\n    });\r\n\r\n    let ariaLabel;\r\n    if (label) {\r\n      ariaLabel = <LabelComponent className={labelClassName}>{label}</LabelComponent>;\r\n    }\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        ref={this._setGroup}\r\n        className={cn('md-selection-control-group', className)}\r\n        onChange={this._handleChange}\r\n        onKeyDown={radio ? this._handleKeyDown : null}\r\n      >\r\n        {ariaLabel}\r\n        {controls}\r\n      </Component>\r\n    );\r\n  }\r\n}\r\n"]}