{"version":3,"sources":["../../../src/js/utils/dates/getWeekNumber.js"],"names":["getWeekNumber","date","d","Date","setDate","firstDay","getDay","dateOffset","getDate","Math","floor"],"mappings":";;;;;kBASwBA,a;;AATxB;;;;;;AAEA;;;;;;;AAOe,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAC1C,MAAI,CAAC,2BAAYA,IAAZ,CAAL,EAAwB;AACtB,WAAO,CAAC,CAAR;AACD;;AAED,MAAMC,IAAI,IAAIC,IAAJ,CAASF,IAAT,CAAV;AACAC,IAAEE,OAAF,CAAU,CAAV;;AAEA,MAAMC,WAAWH,EAAEI,MAAF,EAAjB;AACA,MAAMC,aAAaN,KAAKO,OAAL,MAAkBH,WAAW,CAA7B,CAAnB;AACA,SAAOI,KAAKC,KAAL,CAAWH,aAAa,CAAxB,IAA6B,CAApC;AACD","file":"getWeekNumber.js","sourcesContent":["import isValidDate from './isValidDate';\r\n\r\n/**\r\n * Gets the current week number within a month for a provided date. If\r\n * the date is invalid, -1 will be returned instead.\r\n *\r\n * @param {Date} date - The date to get a week number for.\r\n * @return {number} the week number with the date's month or -1.\r\n */\r\nexport default function getWeekNumber(date) {\r\n  if (!isValidDate(date)) {\r\n    return -1;\r\n  }\r\n\r\n  const d = new Date(date);\r\n  d.setDate(1);\r\n\r\n  const firstDay = d.getDay();\r\n  const dateOffset = date.getDate() + (firstDay - 1);\r\n  return Math.floor(dateOffset / 7) + 1;\r\n}\r\n"]}