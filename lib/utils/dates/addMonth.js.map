{"version":3,"sources":["../../../src/js/utils/dates/addMonth.js"],"names":["addMonth","date","amount","newMonthDate","Date","getDate","d","setDate","setMonth","getMonth"],"mappings":";;;;;kBAoBwBA,Q;;AApBxB;;;;AACA;;;;;;AAGA;;;;;;;;;;;;;;;;AAgBe,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,MAAxB,EAAgCC,YAAhC,EAA8C;AAC3D,MAAI,CAAC,2BAAYF,IAAZ,CAAL,EAAwB;AACtB,WAAO,IAAP;AACD,GAFD,MAEO,IAAIC,WAAW,CAAf,EAAkB;AACvB,WAAO,IAAIE,IAAJ,CAASH,IAAT,CAAP;AACD;;AAED,MAAI,CAACE,YAAL,EAAmB;AAAE;AACnBA,mBAAeF,KAAKI,OAAL,EAAf;AACD;;AAED,MAAMC,IAAI,IAAIF,IAAJ,CAASH,IAAT,CAAV;AACAK,IAAEC,OAAF,CAAU,CAAV,EAZ2D,CAY7C;AACdD,IAAEE,QAAF,CAAWF,EAAEG,QAAF,KAAeP,MAA1B;;AAEA,MAAIC,iBAAiB,CAAjB,IAAsBA,gBAAgB,8BAAeG,CAAf,CAA1C,EAA6D;AAC3D;AACAA,MAAEC,OAAF,CAAUJ,YAAV;AACD;;AAED,SAAOG,CAAP;AACD","file":"addMonth.js","sourcesContent":["import isValidDate from './isValidDate';\r\nimport getDaysInMonth from './getDaysInMonth';\r\n\r\n\r\n/**\r\n * Adds the specified number of months to a provided date. If the date\r\n * is null, an invalid formatted date, or not a Date instance, null\r\n * will be returned instead.\r\n *\r\n * When a new month is returned, it will make sure that the date matches\r\n * the date in the old month if possible, if the new month does not have\r\n * include the new date, the `newMonthDate` will be used instead.\r\n *\r\n * @param {Date} date - The date to update\r\n * @param {number} amount - The number of months to add. This can be positive\r\n *    or negative.\r\n * @param {number=1} newMonthDate - An optional date to set in the new month\r\n *    if the new month does not have the old date.\r\n * @return {Date} a new date with the number of days added or null.\r\n */\r\nexport default function addMonth(date, amount, newMonthDate) {\r\n  if (!isValidDate(date)) {\r\n    return null;\r\n  } else if (amount === 0) {\r\n    return new Date(date);\r\n  }\r\n\r\n  if (!newMonthDate) { // 0 is invalid for this case\r\n    newMonthDate = date.getDate();\r\n  }\r\n\r\n  const d = new Date(date);\r\n  d.setDate(1); // reset to first day to prevent month overflows\r\n  d.setMonth(d.getMonth() + amount);\r\n\r\n  if (newMonthDate !== 1 && newMonthDate <= getDaysInMonth(d)) {\r\n    // set the date back to the correct day if it still exists within the month\r\n    d.setDate(newMonthDate);\r\n  }\r\n\r\n  return d;\r\n}\r\n"]}