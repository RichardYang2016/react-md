{"version":3,"sources":["../../src/js/utils/closest.js"],"names":["closest","el","type","nodeType","toUpperCase","node","parentElement","nodeName"],"mappings":";;;;;kBAWwBA,O;AAXxB;;AAEA;;;;;;;;;AASe,SAASA,OAAT,CAAiBC,EAAjB,EAAqBC,IAArB,EAA2B;AACxC,MAAI,OAAOD,GAAGD,OAAV,KAAsB,UAA1B,EAAsC;AACpC,WAAOC,GAAGD,OAAH,CAAWE,IAAX,CAAP;AACD;;AAED,MAAMC,WAAWD,KAAKE,WAAL,EAAjB;AACA,MAAIC,OAAOJ,GAAGK,aAAd;AACA,SAAOD,QAAQA,KAAKC,aAApB,EAAmC;AACjC,QAAID,KAAKE,QAAL,KAAkBJ,QAAtB,EAAgC;AAC9B,aAAOE,IAAP;AACD;;AAEDA,WAAOA,KAAKC,aAAZ;AACD;;AAED,SAAO,IAAP;AACD","file":"closest.js","sourcesContent":["/** @module utils/closest */\r\n\r\n/**\r\n * A _very_ primitive polyfill for the Element.closest function. If this is a browser that doesn't\r\n * support it (IE, Edge, etc), it will just keep searching the parent elements until the nodeName\r\n * matches the provided type.\r\n *\r\n * @param {Element} el - the html element to find a closest node type for\r\n * @param {String} type - the html element type to find.\r\n * @return {Element} the found element or null.\r\n */\r\nexport default function closest(el, type) {\r\n  if (typeof el.closest === 'function') {\r\n    return el.closest(type);\r\n  }\r\n\r\n  const nodeType = type.toUpperCase();\r\n  let node = el.parentElement;\r\n  while (node && node.parentElement) {\r\n    if (node.nodeName === nodeType) {\r\n      return node;\r\n    }\r\n\r\n    node = node.parentElement;\r\n  }\r\n\r\n  return null;\r\n}\r\n"]}