{"version":3,"sources":["../../src/js/utils/caseInsensitiveFilter.js"],"names":["caseInsensitiveFilter","haystack","filterText","dataLabel","needle","toLowerCase","filter","hay","isValidElement","value","toString","indexOf"],"mappings":";;;;;;8QAAA;;;kBAyBwBA,qB;;AAxBxB;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBe,SAASA,qBAAT,CAA+BC,QAA/B,EAAyCC,UAAzC,EAAqDC,SAArD,EAAgE;AAC7E,MAAMC,SAASF,WAAWG,WAAX,EAAf;;AAEA,SAAOJ,SAASK,MAAT,CAAgB,eAAO;AAC5B,QAAIC,QAAQ,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAAnC,EAAgD;AAC9C,aAAO,KAAP;AACD,KAFD,MAEO,IAAI,gBAAMC,cAAN,CAAqBD,GAArB,CAAJ,EAA+B;AACpC,aAAO,IAAP;AACD;;AAED,QAAIE,cAAJ;AACA,mBAAeF,GAAf,yCAAeA,GAAf;AACE,WAAK,QAAL;AACA,WAAK,QAAL;AACEE,gBAAQF,IAAIG,QAAJ,EAAR;AACA;AACF;AACED,gBAAQF,IAAIJ,SAAJ,CAAR;AANJ;;AASA,WAAOM,SAASA,MAAMJ,WAAN,GAAoBM,OAApB,CAA4BP,MAA5B,MAAwC,CAAC,CAAzD;AACD,GAlBM,CAAP;AAmBD","file":"caseInsensitiveFilter.js","sourcesContent":["/** @module utils/caseInsensitiveFilter */\r\nimport React from 'react';\r\n\r\n/**\r\n * This function does a simple ignore case search of some `filterText` for every\r\n * item in a `haystack`. It will only include items that are:\r\n *  - not null or undefined\r\n *  - valid React Components\r\n *  - a number or string that contains each letter/number in exact order ignoring case\r\n *  - an object's `dataLabel` value that contains each letter/number in exact order ignoring case.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * const haystack = ['Apple', 'Banana', 'Orange'];\r\n * caseInsensitiveFilter(haystack, 'An') // ['Banana', 'Orange'];\r\n * caseInsensitiveFilter(haystack, 'ae') // []\r\n * ```\r\n *\r\n * @param {Array.<string|number|Object|function>} haystack - the haystack to search\r\n * @param {string} filterText - the filter text to use.\r\n * @param {string=} dataLabel - the data label to use if the element is an object.\r\n *\r\n * @return {Array.<string|number|Object|function>} a filtered list.\r\n */\r\nexport default function caseInsensitiveFilter(haystack, filterText, dataLabel) {\r\n  const needle = filterText.toLowerCase();\r\n\r\n  return haystack.filter(hay => {\r\n    if (hay === null || typeof hay === 'undefined') {\r\n      return false;\r\n    } else if (React.isValidElement(hay)) {\r\n      return true;\r\n    }\r\n\r\n    let value;\r\n    switch (typeof hay) {\r\n      case 'string':\r\n      case 'number':\r\n        value = hay.toString();\r\n        break;\r\n      default:\r\n        value = hay[dataLabel];\r\n    }\r\n\r\n    return value && value.toLowerCase().indexOf(needle) !== -1;\r\n  });\r\n}\r\n"]}