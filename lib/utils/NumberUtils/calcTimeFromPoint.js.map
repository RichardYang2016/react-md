{"version":3,"sources":["../../../src/js/utils/NumberUtils/calcTimeFromPoint.js"],"names":["calcTimeFromPoint","isPointInCircle","cx","cy","r","x","y","distance","Math","pow","toDegrees","radians","PI","point","center","innerRadius","minutes","hour12","degrees","atan2","sectors","sectorSize","time","round","isInCircle"],"mappings":";;;;;kBA2BwBA,iB;AA3BxB;;AAEA,SAASC,eAAT,CAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,CAAjC,EAAoCC,CAApC,EAAuCC,CAAvC,EAA0C;AACxC,MAAMC,WAAWC,KAAKC,GAAL,CAASP,KAAKG,CAAd,EAAiB,CAAjB,IAAsBG,KAAKC,GAAL,CAASN,KAAKG,CAAd,EAAiB,CAAjB,CAAvC;AACA,SAAOC,YAAYC,KAAKC,GAAL,CAASL,CAAT,EAAY,CAAZ,CAAnB;AACD;;AAED,SAASM,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,SAAOA,WAAW,MAAMH,KAAKI,EAAtB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;AAgBe,SAASZ,iBAAT,CAA2Ba,KAA3B,EAAkCC,MAAlC,EAA0CC,WAA1C,EAAuDC,OAAvD,EAAgEC,MAAhE,EAAwE;AACrF,MAAMZ,IAAIQ,MAAMR,CAAN,GAAUS,OAAOT,CAA3B;AACA,MAAMC,IAAIO,MAAMP,CAAN,GAAUQ,OAAOR,CAA3B;AACA,MAAMY,UAAUR,UAAUF,KAAKW,KAAL,CAAWb,CAAX,EAAcD,CAAd,CAAV,CAAhB;AACA,MAAMe,UAAUJ,UAAU,EAAV,GAAe,EAA/B;AACA,MAAMK,aAAa,MAAMD,OAAzB;AACA,MAAIE,OAAOd,KAAKe,KAAL,CAAWL,UAAUG,UAArB,CAAX;;AAEA;AACA;AACAC,UAASN,UAAU,EAAV,GAAe,CAAxB;;AAEA;AACA,MAAIM,OAAO,CAAX,EAAc;AACZA,YAAQF,OAAR;AACD;;AAGD;AACA;AACA,MAAI,CAACJ,OAAD,IAAY,CAACC,MAAjB,EAAyB;AACvB,QAAMO,aAAavB,gBAAgB,CAAhB,EAAmB,CAAnB,EAAsBc,WAAtB,EAAmCV,CAAnC,EAAsCC,CAAtC,CAAnB;;AAEA,QAAKgB,SAAS,CAAT,IAAc,CAACE,UAAhB,IAAgCF,SAAS,CAAT,IAAcE,UAAlD,EAA+D;AAC7DF,cAAQ,EAAR;AACD;AACF;;AAED,SAAOA,IAAP;AACD","file":"calcTimeFromPoint.js","sourcesContent":["/** @module utils/NumberUtils/calcTimeFromPoint */\r\n\r\nfunction isPointInCircle(cx, cy, r, x, y) {\r\n  const distance = Math.pow(cx - x, 2) + Math.pow(cy - y, 2);\r\n  return distance <= Math.pow(r, 2);\r\n}\r\n\r\nfunction toDegrees(radians) {\r\n  return radians * (180 / Math.PI);\r\n}\r\n\r\n/**\r\n * Takes a point from a mouse or touch event and a center point of a circle to determine\r\n * what the new time should be.\r\n *\r\n * If the point.y < center.y, the point is in the top half of the circle.\r\n * If the point.x < center.x, the point is in the left half of the circle.\r\n *\r\n * @param {Object} point - The mouse or touch event's point that contains an x and y coordinate.\r\n * @param {Object} center - The center point for the circle that contains an x and y coordinate.\r\n * @param {Number} innerRadius - An inner radius for clocks that have 24 hour times. This is\r\n *    a circle that contains hours 12-23.\r\n * @param {Boolean} minutes - Boolena if the current time to be calculated is minutes instead of\r\n *    hours.\r\n * @param {Boolean} hour12 - Boolean if the clock is a 12 hour clock.\r\n * @return {Number} the new time.\r\n */\r\nexport default function calcTimeFromPoint(point, center, innerRadius, minutes, hour12) {\r\n  const x = point.x - center.x;\r\n  const y = point.y - center.y;\r\n  const degrees = toDegrees(Math.atan2(y, x));\r\n  const sectors = minutes ? 60 : 12;\r\n  const sectorSize = 360 / sectors;\r\n  let time = Math.round(degrees / sectorSize);\r\n\r\n  // Since the css transform has 0π at π/2 place, we need to offset the\r\n  // time to that location.\r\n  time += (minutes ? 15 : 3);\r\n\r\n  // If time is still negative, it is in the top half of the circle\r\n  if (time < 0) {\r\n    time += sectors;\r\n  }\r\n\r\n\r\n  // Finally, if it is a 24 hour clock, need to check if the point is actually\r\n  // selecting hours 13 - 24 (0).\r\n  if (!minutes && !hour12) {\r\n    const isInCircle = isPointInCircle(0, 0, innerRadius, x, y);\r\n\r\n    if ((time === 0 && !isInCircle) || (time !== 0 && isInCircle)) {\r\n      time += 12;\r\n    }\r\n  }\r\n\r\n  return time;\r\n}\r\n"]}