{"version":3,"sources":["../../../src/js/utils/NumberUtils/calculateValueDistance.js"],"names":["calculateValueDistance","calculateDistance","x","width","left","normalize","distance","Math","min","max","scale","step","value","round","decimals","String","split","corrector","length","pow","modded"],"mappings":";;;;;kBA+CwBA,sB;AA/CxB;;AAEA;;;;;;;;;;;;;;;;AAgBA,SAASC,iBAAT,CAA2BC,CAA3B,EAA8BC,KAA9B,EAAqCC,IAArC,EAA2CC,SAA3C,EAAsD;AACpD,MAAMC,WAAWC,KAAKC,GAAL,CACfL,KADe,EAEfI,KAAKE,GAAL,CAAS,CAAT,EAAYP,IAAIE,IAAhB,CAFe,CAAjB;;AAKA,SAAOC,YAAYC,QAAZ,GAAuBA,WAAWH,KAAX,GAAmB,GAAjD;AACD;;AAED;;;;;;;;;;;;;;;;;;;;AAoBe,SAASH,sBAAT,CAAgCE,CAAhC,EAAmCC,KAAnC,EAA0CC,IAA1C,EAAgDM,KAAhD,EAAuDC,IAAvD,EAA6DH,GAA7D,EAAkEC,GAAlE,EAAuEJ,SAAvE,EAAkF;AAC/F,MAAIO,cAAJ;AACA,MAAIN,WAAWL,kBAAkBC,CAAlB,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkCC,SAAlC,CAAf;AACA,MAAIA,SAAJ,EAAe;AACbO,YAAQL,KAAKM,KAAL,CAAWP,YAAYH,QAAQO,KAApB,CAAX,CAAR;AACA,QAAIC,OAAO,CAAX,EAAc;AACZ,UAAMG,WAAWC,OAAOJ,IAAP,EAAaK,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAjB;AACA,UAAMC,YAAY,OAAOH,QAAP,KAAoB,WAApB,IAAmCA,SAASI,MAAT,GAAkB,CAArD,GACdX,KAAKY,GAAL,CAAS,EAAT,EAAaL,SAASI,MAAtB,CADc,GAEd,CAFJ;;AAIA,UAAME,SAAUR,QAAQK,SAAT,IAAuBN,OAAOM,SAA9B,CAAf;AACA,UAAIG,WAAW,CAAX,IAAgBA,UAAUT,OAAO,CAArC,EAAwC;AACtCC,iBAAUD,OAAOS,MAAjB;AACD,OAFD,MAEO,IAAIA,WAAW,CAAf,EAAkB;AACvBR,iBAASQ,MAAT;AACD;AACF;;AAEDd,eAAWM,QAAQF,KAAR,GAAgB,GAA3B;AACAE,YAASA,QAAQD,IAAT,GAAiBH,GAAzB;AACD,GAlBD,MAkBO;AACLI,YAAQJ,MAAMG,OAAOJ,KAAKM,KAAL,CAAWP,WAAW,GAAX,GAAiBI,KAA5B,CAArB;AACD;;AAED,SAAO;AACLJ,cAAUC,KAAKE,GAAL,CAAS,CAAT,EAAYF,KAAKC,GAAL,CAAS,GAAT,EAAcF,QAAd,CAAZ,CADL;AAELM,WAAOL,KAAKE,GAAL,CAASD,GAAT,EAAcD,KAAKC,GAAL,CAASC,GAAT,EAAcG,KAAd,CAAd;AAFF,GAAP;AAID","file":"calculateValueDistance.js","sourcesContent":["/** @module utils/NumberUtils/calculateValueDistance */\r\n\r\n/**\r\n * This calculates the distance from a screen x location to a position in some element\r\n * by comparing the width of the element and the element's page position to the screen\r\n * x position.\r\n *\r\n * If the distance is not _normalized_ the distance will be updated to be a percentage\r\n * of the element's total width.\r\n *\r\n * @param {Number} x - the screen x location.\r\n * @param {Number} width - the element's width\r\n * @param {Number} left - the element's page x position.\r\n * @param {Boolean} normalize - boolean if the distance should be a percentage.\r\n *\r\n * @return {Number} the distance from the element's left position to the page x\r\n *    location.\r\n */\r\nfunction calculateDistance(x, width, left, normalize) {\r\n  const distance = Math.min(\r\n    width,\r\n    Math.max(0, x - left)\r\n  );\r\n\r\n  return normalize ? distance : distance / width * 100;\r\n}\r\n\r\n/**\r\n * This calculates the new value and distance for a slider. It will compare the page x\r\n * location of a touch or mouse event to the slider's track page x position. If the\r\n * final value and distance should be _normalized_, they will be updated to be rounded\r\n * with the scale and steps in mind.\r\n *\r\n * The distance will always be contained within a percentage of 0 - 100 while the\r\n * value will be contained within the min and max values.\r\n *\r\n * @param {Number} x - the page x location of the touch or mouse event.\r\n * @param {Number} width - the slider's width\r\n * @param {Number} left - the slider's left position in the page.\r\n * @param {Number} scale - the total number values included in the slider.\r\n * @param {Number} step - the amount to increment by.\r\n * @param {Number} min - the min value for the slider.\r\n * @param {Number} max - the max value for the slider.\r\n * @param {Boolean} normalize - boolean if the vaue and distance should be _normalized_.\r\n *\r\n * @return {Object} an object with the value and distance.\r\n */\r\nexport default function calculateValueDistance(x, width, left, scale, step, min, max, normalize) {\r\n  let value;\r\n  let distance = calculateDistance(x, width, left, normalize);\r\n  if (normalize) {\r\n    value = Math.round(distance / (width / scale));\r\n    if (step < 1) {\r\n      const decimals = String(step).split('.')[1];\r\n      const corrector = typeof decimals !== 'undefined' && decimals.length > 0\r\n        ? Math.pow(10, decimals.length)\r\n        : 1;\r\n\r\n      const modded = (value * corrector) % (step * corrector);\r\n      if (modded !== 0 && modded >= step / 2) {\r\n        value += (step - modded);\r\n      } else if (modded !== 0) {\r\n        value -= modded;\r\n      }\r\n    }\r\n\r\n    distance = value / scale * 100;\r\n    value = (value * step) + min;\r\n  } else {\r\n    value = min + step * Math.round(distance / 100 * scale);\r\n  }\r\n\r\n  return {\r\n    distance: Math.max(0, Math.min(100, distance)),\r\n    value: Math.max(min, Math.min(max, value)),\r\n  };\r\n}\r\n"]}