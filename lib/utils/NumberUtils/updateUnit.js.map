{"version":3,"sources":["../../../src/js/utils/NumberUtils/updateUnit.js"],"names":["updateUnit","unit","fn","toUnit","updated","parseInt","replace"],"mappings":";;;;;kBAkBwBA,U;AAlBxB;;AAEA;;;;;;;;;;;;;;;;AAgBe,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,EAA1B,EAA8BC,MAA9B,EAAsC;AACnD,MAAMC,UAAUF,GAAGG,SAASJ,IAAT,EAAe,EAAf,CAAH,CAAhB;;AAEA,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOE,cACAC,OADA,GACUD,MADV,GAEHC,OAFJ;AAGD;;AAED,cAAUA,OAAV,GAAoBH,KAAKK,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAApB;AACD","file":"updateUnit.js","sourcesContent":["/** @module utils/NumberUtils/updateUnit */\r\n\r\n/**\r\n * Takes in a css unit (px, rem, em, etc) or a number and applies a function to the\r\n * number part of the unit.\r\n *\r\n * If the unit was a number to start with and a `toUnit` is given, the number will\r\n * be given the `toUnit`. Otherwise the number will be returned.\r\n *\r\n * If the unit was a string, the original units will be applied back to the updated\r\n * unit's value.\r\n *\r\n * @param {number|String} unit - the unit to apply a function to.\r\n * @param {function} fn - the function to apply to the number.\r\n * @param {String=} toUnit - an optional unit to cast the updated unit to.\r\n *\r\n * @return {String|number} the updated unit.\r\n */\r\nexport default function updateUnit(unit, fn, toUnit) {\r\n  const updated = fn(parseInt(unit, 10));\r\n\r\n  if (typeof unit === 'number') {\r\n    return toUnit\r\n      ? `${updated}${toUnit}`\r\n      : updated;\r\n  }\r\n\r\n  return `${updated}${unit.replace(/[0-9]/g, '')}`;\r\n}\r\n"]}