{"version":3,"sources":["../../../src/js/utils/EventUtils/touches.js"],"names":["setTouchEvent","addTouchEvent","removeTouchEvent","supportsPassive","opts","Object","defineProperty","get","window","addEventListener","e","add","el","eventType","callback","options","passive","type"],"mappings":";;;;;;;;QAuBgBA,a,GAAAA,a;QAiBAC,a,GAAAA,a;QAaAC,gB,GAAAA,gB;AArDhB;AACA,IAAIC,wBAAJ;AACA,IAAI;AACF,MAAMC,OAAOC,OAAOC,cAAP,CAAsB,EAAtB,EAA0B,SAA1B,EAAqC;AAChDC,OADgD,iBAC1C;AACJJ,wBAAkB,IAAlB;AACD;AAH+C,GAArC,CAAb;AAKAK,SAAOC,gBAAP,CAAwB,MAAxB,EAAgC,IAAhC,EAAsCL,IAAtC;AACD,CAPD,CAOE,OAAOM,CAAP,EAAU;AACVP,oBAAkB,KAAlB;AACD;;AAED;;;;;;;;;;AAUO,SAASH,aAAT,CAAuBW,GAAvB,EAA4BC,EAA5B,EAAgCC,SAAhC,EAA2CC,QAA3C,EAAqDC,OAArD,EAA8D;AACnE,SAAOH,IAAMD,MAAM,KAAN,GAAc,QAApB,+BACGE,SADH,EAELC,QAFK,EAGLX,6BAAoBa,SAAS,IAA7B,IAAsCD,OAAtC,IAAkD,KAH7C,CAAP;AAKD;;AAED;;;;;;;;;AASO,SAASd,aAAT,CAAuBW,EAAvB,EAA2BK,IAA3B,EAAiCH,QAAjC,EAA2CC,OAA3C,EAAoD;AACzD,SAAOf,cAAc,IAAd,EAAoBY,EAApB,EAAwBK,IAAxB,EAA8BH,QAA9B,EAAwCC,OAAxC,CAAP;AACD;;AAED;;;;;;;;;AASO,SAASb,gBAAT,CAA0BU,EAA1B,EAA8BK,IAA9B,EAAoCH,QAApC,EAA8CC,OAA9C,EAAuD;AAC5D,SAAOf,cAAc,KAAd,EAAqBY,EAArB,EAAyBK,IAAzB,EAA+BH,QAA/B,EAAyCC,OAAzC,CAAP;AACD","file":"touches.js","sourcesContent":["// https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\nlet supportsPassive;\r\ntry {\r\n  const opts = Object.defineProperty({}, 'passive', {\r\n    get() {\r\n      supportsPassive = true;\r\n    },\r\n  });\r\n  window.addEventListener('test', null, opts);\r\n} catch (e) {\r\n  supportsPassive = false;\r\n}\r\n\r\n/**\r\n * A helper function for manually setting touch events on elements with the passive\r\n * option (when it is supported).\r\n *\r\n * @param {boolean} add - Boolean if the event listener should be added or removed.\r\n * @param {HTMLElement} el - The element to add the listener to.\r\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\r\n * @param {function} callback - The event listener callback function.\r\n * @param {Object=} options - any additional options to apply.\r\n */\r\nexport function setTouchEvent(add, el, eventType, callback, options) {\r\n  return el[`${add ? 'add' : 'remove'}EventListener`](\r\n    `touch${eventType}`,\r\n    callback,\r\n    supportsPassive ? { passive: true, ...options } : false\r\n  );\r\n}\r\n\r\n/**\r\n * A helper function for manually adding touch events on elements with the passive\r\n * option (when it is supported).\r\n *\r\n * @param {HTMLElement} el - The element to add the listener to.\r\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\r\n * @param {function} callback - The event listener callback function.\r\n * @param {Object=} options - any additional options to apply.\r\n */\r\nexport function addTouchEvent(el, type, callback, options) {\r\n  return setTouchEvent(true, el, type, callback, options);\r\n}\r\n\r\n/**\r\n * A helper function for manually removing touch events on elements with the passive\r\n * option (when it is supported).\r\n *\r\n * @param {HTMLElement} el - The element to add the listener to.\r\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\r\n * @param {function} callback - The event listener callback function.\r\n * @param {Object=} options - any additional options to apply.\r\n */\r\nexport function removeTouchEvent(el, type, callback, options) {\r\n  return setTouchEvent(false, el, type, callback, options);\r\n}\r\n"]}