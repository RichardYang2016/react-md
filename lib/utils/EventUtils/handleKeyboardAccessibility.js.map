{"version":3,"sources":["../../../src/js/utils/EventUtils/handleKeyboardAccessibility.js"],"names":["handleKeyboardAccessibility","e","onClick","listenToEnter","listenToSpace","key","which","keyCode","space","enter","tagName","target","match","getAttribute","preventDefault","form","submit","querySelector","click"],"mappings":";;;;;kBA2BwBA,2B;;AAzBxB;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBe,SAASA,2BAAT,CAAqCC,CAArC,EAAwCC,OAAxC,EAA6F;AAAA,MAA5CC,aAA4C,uEAA5B,IAA4B;AAAA,MAAtBC,aAAsB,uEAAN,IAAM;;AAC1G,MAAMC,MAAMJ,EAAEK,KAAF,IAAWL,EAAEM,OAAzB;AACA,MAAMC,QAAQJ,iBAAiBC,uBAA/B;AACA,MAAMI,QAAQJ,uBAAd;;AAH0G,MAKlGK,OALkG,GAKtFT,EAAEU,MALoF,CAKlGD,OALkG;AAM1G;;AACA,MAAIF,SAAS,CAACE,QAAQE,KAAR,CAAc,wBAAd,CAAV,IAAqDX,EAAEU,MAAF,CAASE,YAAT,CAAsB,iBAAtB,MAA6C,MAAtG,EAA8G;AAC5G;AACAZ,MAAEa,cAAF;AACD;;AAED,MAAIL,SAAS,8BAAeR,EAAEU,MAAjB,CAAb,EAAuC;AACrC,QAAMI,OAAO,uBAAQd,EAAEU,MAAV,EAAkB,MAAlB,CAAb;AACA,QAAMK,SAASD,OAAOA,KAAKE,aAAL,CAAmB,kBAAnB,CAAP,GAAgD,IAA/D;AACA,QAAID,MAAJ,EAAY;AACVA,aAAOE,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAED,MAAKT,SAASN,aAAV,IAA4BK,KAAhC,EAAuC;AACrCN,YAAQD,CAAR;;AAEA,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,C,CAxDD","file":"handleKeyboardAccessibility.js","sourcesContent":["/** @module utils/EventUtils/handleKeyboardAccessibility */\r\n\r\nimport { SPACE, ENTER } from '../../constants/keyCodes';\r\nimport closest from '../closest';\r\nimport isFormPartRole from '../isFormPartRole';\r\n\r\n/**\r\n * A utility function for adding keyboard accessibility to elements that are not a natively\r\n * clickable (div, span, etc). When the space or enter key is pressed while focusing the\r\n * element, different flows will happen.\r\n *\r\n * - space - The click event will be triggered and the default page scrolling behavior of the\r\n *      spacebar will be prevented\r\n * - enter - If the element has a form role ('checkbox' or 'radio'), the click event will not\r\n *      be triggered. Instead, it will find out if the element is inside a form. If it is, it\r\n *      will emulate the default behavior of attempting to submit the form. If the element does\r\n *      not have a form role, the click event will be triggered.\r\n *\r\n * @param {Event} e - the keydown event\r\n * @param {function} onClick - the on click event to be triggered if space or enter was pressed\r\n * @param {boolean=true} listenToEnter - boolean if the enter key should be used to trigger the\r\n *      the click event. Even if this is true, the click event will not be triggered if the role\r\n *      is for a form role.\r\n * @param {boolean=true} listenToSpace - boolean if the space key should be used to trigger the\r\n *      click event.\r\n * @return {Boolean} true if the enter or space keys were pressed while their listener is also active.\r\n */\r\nexport default function handleKeyboardAccessibility(e, onClick, listenToEnter = true, listenToSpace = true) {\r\n  const key = e.which || e.keyCode;\r\n  const space = listenToSpace && key === SPACE;\r\n  const enter = key === ENTER;\r\n\r\n  const { tagName } = e.target;\r\n  // it is valid to press space in text fields, contenteditable, and buttons\r\n  if (space && !tagName.match(/input|textarea|button/i) && e.target.getAttribute('contenteditable') !== 'true') {\r\n    // Stop page scrolling\r\n    e.preventDefault();\r\n  }\r\n\r\n  if (enter && isFormPartRole(e.target)) {\r\n    const form = closest(e.target, 'form');\r\n    const submit = form ? form.querySelector('*[type=\"submit\"]') : null;\r\n    if (submit) {\r\n      submit.click();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  if ((enter && listenToEnter) || space) {\r\n    onClick(e);\r\n\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n"]}