{"version":3,"sources":["../../src/js/utils/fuzzyFilter.js"],"names":["fuzzyFilter","haystack","needle","dataLabel","reg","RegExp","split","join","replace","filter","hay","isValidElement","value","toString","match"],"mappings":";;;;;;8QAAA;;;kBAwBwBA,W;;AAvBxB;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBe,SAASA,WAAT,CAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,SAAvC,EAAkD;AAC/D;AACA;AACA,MAAMC,MAAM,IAAIC,MAAJ,CACV,MAAGH,MAAH,EAAYI,KAAZ,CAAkB,EAAlB,EACGC,IADH,CACQ,MADR,EAEGC,OAFH,CAEW,sDAFX,EAEmE,MAFnE;AAGE;AAHF,GAIGA,OAJH,CAIW,OAJX,EAIoB,MAJpB,CADU,EAMV,GANU,CAAZ;;AASA,SAAOP,SAASQ,MAAT,CAAgB,eAAO;AAC5B,QAAIC,QAAQ,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAAnC,EAAgD;AAC9C,aAAO,KAAP;AACD,KAFD,MAEO,IAAI,gBAAMC,cAAN,CAAqBD,GAArB,CAAJ,EAA+B;AACpC,aAAO,IAAP;AACD;;AAED,QAAIE,cAAJ;AACA,mBAAeF,GAAf,yCAAeA,GAAf;AACE,WAAK,QAAL;AACA,WAAK,QAAL;AACEE,gBAAQF,IAAIG,QAAJ,EAAR;AACA;AACF;AACED,gBAAQF,IAAIP,SAAJ,CAAR;AANJ;;AASA,WAAOS,SAASA,MAAME,KAAN,CAAYV,GAAZ,CAAhB;AACD,GAlBM,CAAP;AAmBD","file":"fuzzyFilter.js","sourcesContent":["/** @module utils/fuzzyFilter */\r\nimport React from 'react';\r\n\r\n/**\r\n * This function does a simple fuzzy search of some `needle` for every\r\n * item in a `haystack`. It will only include items that are:\r\n *  - not null or undefined\r\n *  - valid React Components\r\n *  - a number or string that contains each letter/number in order ignoring case\r\n *  - an object's `dataLabel` value that contains each letter/number in order ignoring case.\r\n *\r\n * Example:\r\n * ```js\r\n * const haystack = ['Apple', 'Banana', 'Orange'];\r\n * fuzzyFilter(haystack, 'An') // ['Banana', 'Orange'];\r\n * fuzzyFilter(haystack, 'ae') // ['Apple']\r\n * ```\r\n *\r\n * @param {Array.<string|number|Object|function>} haystack - the haystack to search\r\n * @param {string} needle - the filter text to use.\r\n * @param {string=} dataLabel - the data label to use if the element is an object.\r\n *\r\n * @return {Array.<string|number|Object|function>} a filtered list.\r\n */\r\nexport default function fuzzyFilter(haystack, needle, dataLabel) {\r\n  // Create an amazing regex that matches the letters in order\r\n  // and escapes any strings that could be part of a regex.\r\n  const reg = new RegExp(\r\n    `${needle}`.split('')\r\n      .join('\\\\w*')\r\n      .replace(/(\\(|\\||\\)|\\\\(?!w\\*)|\\[|\\|-|\\.|\\^|\\+|\\$|\\?|^(?!w)\\*)/g, '\\\\$1')\r\n      // Couldn't get the matching of two '*' working, so replace them here..\r\n      .replace(/\\*\\*/g, '*\\\\*'),\r\n    'i'\r\n  );\r\n\r\n  return haystack.filter(hay => {\r\n    if (hay === null || typeof hay === 'undefined') {\r\n      return false;\r\n    } else if (React.isValidElement(hay)) {\r\n      return true;\r\n    }\r\n\r\n    let value;\r\n    switch (typeof hay) {\r\n      case 'string':\r\n      case 'number':\r\n        value = hay.toString();\r\n        break;\r\n      default:\r\n        value = hay[dataLabel];\r\n    }\r\n\r\n    return value && value.match(reg);\r\n  });\r\n}\r\n"]}