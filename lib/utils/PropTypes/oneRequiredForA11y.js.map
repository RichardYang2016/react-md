{"version":3,"sources":["../../../src/js/utils/PropTypes/oneRequiredForA11y.js"],"names":["oneRequiredForA11y","validator","otherPropNames","validate","props","propName","componentName","location","propFullName","componentNameSafe","propFullNameSafe","allPropNames","concat","args","err","filter","pn","length","Error","join"],"mappings":";;;;;kBAUwBA,kB;AAVxB;;AAEA;;;;;;;;AAQe,SAASA,kBAAT,CAA4BC,SAA5B,EAA0D;AAAA,oCAAhBC,cAAgB;AAAhBA,kBAAgB;AAAA;;AACvE,SAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,aAAnC,EAAkDC,QAAlD,EAA4DC,YAA5D,EAAmF;AACxF,QAAMC,oBAAoBH,iBAAiB,eAA3C;AACA,QAAMI,mBAAmBF,gBAAgBH,QAAzC;AACA,QAAMM,eAAe,CAACD,gBAAD,EAAmBE,MAAnB,CAA0BV,cAA1B,CAArB;;AAHwF,uCAANW,IAAM;AAANA,UAAM;AAAA;;AAKxF,QAAIC,MAAMb,4BAAUG,KAAV,EAAiBC,QAAjB,EAA2BC,aAA3B,EAA0CC,QAA1C,EAAoDC,YAApD,SAAqEK,IAArE,EAAV;AACA,QAAI,CAACC,GAAD,IAAQ,CAACH,aAAaI,MAAb,CAAoB;AAAA,aAAM,OAAOX,MAAMY,EAAN,CAAP,KAAqB,WAA3B;AAAA,KAApB,EAA4DC,MAAzE,EAAiF;AAC/EH,YAAM,IAAII,KAAJ,CACJ,qDAAmDT,iBAAnD,uFACiEE,aAAaQ,IAAb,CAAkB,MAAlB,CADjE,QADI,CAAN;AAID;;AAED,WAAOL,GAAP;AACD,GAdD;AAeD","file":"oneRequiredForA11y.js","sourcesContent":["/** @module utils/PropTypes/oneRequiredForA11y */\r\n\r\n/**\r\n * This validator checks that either the current prop is defined and valid or that one of the\r\n * other given prop names are defined. If it fails it returns an error for a11y.\r\n *\r\n * @param {function} validator - The React PropTypes validator to use for the given prop.\r\n * @param {String[]} otherPropNames - Any other prop names to validate against.\r\n * @return {Error} an error or null\r\n */\r\nexport default function oneRequiredForA11y(validator, ...otherPropNames) {\r\n  return function validate(props, propName, componentName, location, propFullName, ...args) {\r\n    const componentNameSafe = componentName || '<<anonymous>>';\r\n    const propFullNameSafe = propFullName || propName;\r\n    const allPropNames = [propFullNameSafe].concat(otherPropNames);\r\n\r\n    let err = validator(props, propName, componentName, location, propFullName, ...args);\r\n    if (!err && !allPropNames.filter(pn => typeof props[pn] !== 'undefined').length) {\r\n      err = new Error(\r\n        `One of the following props are required to make ${componentNameSafe} accessible ` +\r\n        `for users of assistive technologies such as screen readers. \\`${allPropNames.join('`, `')}\\`.`\r\n      );\r\n    }\r\n\r\n    return err;\r\n  };\r\n}\r\n"]}