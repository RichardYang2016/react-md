{"version":3,"sources":["../../../src/js/utils/PropTypes/invalidIf.js"],"names":["invalidIf","validator","ifDefinedProps","validate","props","propName","componentName","location","propFullName","componentNameSafe","propFullNameSafe","args","err","defined","othersDefined","filter","name","length","names","join","Error"],"mappings":";;;;;kBASwBA,S;AATxB;;AAEA;;;;;;;AAOe,SAASA,SAAT,CAAmBC,SAAnB,EAAiD;AAAA,oCAAhBC,cAAgB;AAAhBA,kBAAgB;AAAA;;AAC9D,SAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,aAAnC,EAAkDC,QAAlD,EAA4DC,YAA5D,EAAmF;AACxF,QAAMC,oBAAoBH,iBAAiB,eAA3C;AACA,QAAMI,mBAAmBF,gBAAgBH,QAAzC;;AAFwF,uCAANM,IAAM;AAANA,UAAM;AAAA;;AAIxF,QAAMC,MAAMX,4BAAUG,KAAV,EAAiBC,QAAjB,EAA2BC,aAA3B,EAA0CC,QAA1C,EAAoDC,YAApD,SAAqEG,IAArE,EAAZ;AACA,QAAIC,GAAJ,EAAS;AACP,aAAOA,GAAP;AACD;;AAED,QAAMC,UAAU,OAAOT,MAAMC,QAAN,CAAP,KAA2B,WAA3B,IAA0C,CAAC,CAACD,MAAMC,QAAN,CAA5D;AACA,QAAMS,gBAAgBZ,eAAea,MAAf,CAAsB;AAAA,aAAQ,OAAOX,MAAMY,IAAN,CAAP,KAAuB,WAAvB,IAAsC,CAAC,CAACZ,MAAMY,IAAN,CAAhD;AAAA,KAAtB,CAAtB;AACA,QAAIH,WAAWC,cAAcG,MAA7B,EAAqC;AACnC,UAAMC,cAAaJ,cAAcK,IAAd,CAAmB,MAAnB,CAAb,MAAN;AACA,UAAIL,cAAcG,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,eAAO,IAAIG,KAAJ,CACL,0BAAyBV,gBAAzB,cAAmDQ,KAAnD,qBAAwET,iBAAxE,SACA,4BAFK,CAAP;AAID;;AAED,aAAO,IAAIW,KAAJ,CACL,qBAAoBV,gBAApB,UAA0CH,QAA1C,gBAA6DE,iBAA7D,sDACqCS,KADrC,6BACmER,gBADnE,WAEA,wCAHK,CAAP;AAKD;;AAED,WAAO,IAAP;AACD,GA5BD;AA6BD","file":"invalidIf.js","sourcesContent":["/** @module utils/PropTypes/invalidIf */\r\n\r\n/**\r\n * A custom validator that will throw an error if any of the `ifDefinedProps` are also defined.\r\n *\r\n * @param {function} validator - The PropTypes validator to use.\r\n * @param {String...} ifDefinedProps - any othe rprop names to validate against\r\n * @return {Error} an error or null\r\n */\r\nexport default function invalidIf(validator, ...ifDefinedProps) {\r\n  return function validate(props, propName, componentName, location, propFullName, ...args) {\r\n    const componentNameSafe = componentName || '<<anonymous>>';\r\n    const propFullNameSafe = propFullName || propName;\r\n\r\n    const err = validator(props, propName, componentName, location, propFullName, ...args);\r\n    if (err) {\r\n      return err;\r\n    }\r\n\r\n    const defined = typeof props[propName] !== 'undefined' && !!props[propName];\r\n    const othersDefined = ifDefinedProps.filter(name => typeof props[name] !== 'undefined' && !!props[name]);\r\n    if (defined && othersDefined.length) {\r\n      const names = `\\`${othersDefined.join('`, `')}\\``;\r\n      if (othersDefined.length === 1) {\r\n        return new Error(\r\n          `You provided both a \\`${propFullNameSafe}\\` and ${names} prop to the ${componentNameSafe} ` +\r\n          'but only one can be given.'\r\n        );\r\n      }\r\n\r\n      return new Error(\r\n        `You provided a \\`${propFullNameSafe}\\` ${location} to the ${componentNameSafe} when ` +\r\n        `the following props were defined: ${names}. Either remove the \\`${propFullNameSafe}\\` ` +\r\n        'or use the remove all the other props.'\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n}\r\n"]}