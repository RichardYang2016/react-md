{"version":3,"sources":["../../src/js/utils/mapToListParts.js"],"names":["mapToListParts","item","index","key","primaryText","divider","subheader","nestedItems","remainingProps","component","props","map"],"mappings":";;;;;;;;kBAiCwBA,c;;AA/BxB;;AACA;;;;AACA;;;;AACA;;;;;;6NALA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0Be,SAASA,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqC;AAClD,MAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,QAAhD,EAA0D;AACxD,WAAO,8CAAwB,EAAEE,KAAKF,IAAP,EAAaG,aAAaH,IAA1B,EAAxB,CAAP;AACD,GAFD,MAEO,IAAI,2BAAeA,IAAf,CAAJ,EAA0B;AAC/B,WAAOA,IAAP;AACD;;AALiD,MAO1CI,OAP0C,GAOaJ,IAPb,CAO1CI,OAP0C;AAAA,MAOjCC,SAPiC,GAOaL,IAPb,CAOjCK,SAPiC;AAAA,MAOtBC,WAPsB,GAOaN,IAPb,CAOtBM,WAPsB;AAAA,MAONC,cAPM,4BAOaP,IAPb;;AAQlD,MAAIQ,kBAAJ;AACA,MAAIJ,OAAJ,EAAa;AACXI;AACD,GAFD,MAEO,IAAIH,SAAJ,EAAe;AACpBG;AACD,GAFM,MAEA;AACLA;AACD;;AAED,MAAMC,qBAAaF,cAAb,IAA6BL,KAAKF,KAAKE,GAAL,IAAYD,KAA9C,GAAN;AACA,MAAIK,WAAJ,EAAiB;AACfG,UAAMH,WAAN,GAAoBA,YAAYI,GAAZ,CAAgBX,cAAhB,CAApB;AACD;;AAED,SAAO,0BAAcS,SAAd,EAAyBC,KAAzB,CAAP;AACD","file":"mapToListParts.js","sourcesContent":["/** @module utils/mapToListParts */\r\n\r\nimport { createElement, isValidElement } from 'react';\r\nimport Divider from '../Dividers/Divider';\r\nimport Subheader from '../Subheaders/Subheader';\r\nimport ListItem from '../Lists/ListItem';\r\n\r\n/**\r\n * A utility function to convert any \"item\" into a valid React element that is used\r\n * within the `List` component.\r\n *\r\n * Use cases:\r\n * - is a valid React element -> item returned unmodified\r\n * - `number` or `string` -> `ListItem` with the item as the `primaryText`\r\n * - an `object` with a key `divider: true` -> a `Divider` component with the remaining\r\n *    keys applied as props.\r\n * - an `object` with a key `subheader: true` -> a `Subheader` component with the remianing\r\n *    keys applied as props. This one technically requires the `primaryText` key to be defined.\r\n * - an `object` -> all keys passed into the `ListItem` component.\r\n *\r\n * Examples:\r\n * ```js\r\n * mapToListParts('Hello') == <ListItem primaryText=\"Hello\" />\r\n * mapToListParts(100)     == <ListItem primaryText={100} />\r\n * mapToListParts({ primaryText: 'Item' }) == <ListItem primaryText=\"Item\" />\r\n * mapToListParts({ divider: true }) == <Divider />\r\n * mapToListParts({ subheader: true, primaryText: 'Subheader' }) == <Subheader primaryText=\"Subheader\" />\r\n * ```\r\n *\r\n * @param {string|number|Object} item - the item to convert\r\n * @param {number|string=} index - the current index in the array (if used in an array)\r\n * @return {Object} a React element\r\n */\r\nexport default function mapToListParts(item, index) {\r\n  if (typeof item === 'string' || typeof item === 'number') {\r\n    return createElement(ListItem, { key: item, primaryText: item });\r\n  } else if (isValidElement(item)) {\r\n    return item;\r\n  }\r\n\r\n  const { divider, subheader, nestedItems, ...remainingProps } = item;\r\n  let component;\r\n  if (divider) {\r\n    component = Divider;\r\n  } else if (subheader) {\r\n    component = Subheader;\r\n  } else {\r\n    component = ListItem;\r\n  }\r\n\r\n  const props = { ...remainingProps, key: item.key || index };\r\n  if (nestedItems) {\r\n    props.nestedItems = nestedItems.map(mapToListParts);\r\n  }\r\n\r\n  return createElement(component, props);\r\n}\r\n"]}