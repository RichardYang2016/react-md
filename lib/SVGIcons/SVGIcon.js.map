{"version":3,"sources":["../../src/js/SVGIcons/SVGIcon.js"],"names":["SVGIcon","props","_getIds","use","labels","title","desc","titleId","descId","labelledBy","baseId","replace","split","_mergeStyles","style","size","height","width","undefined","state","styles","nextProps","nextState","setState","className","disabled","primary","secondary","error","inherit","titleAttr","ariaLabelledBy","propTitle","propDesc","propStyle","propChildren","children","propTypes","object","string","bool","role","oneOf","oneOfType","element","arrayOf","node","focusable","number","viewBox","xmlns","defaultProps"],"mappings":"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","file":"SVGIcon.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport deprecated from 'react-prop-types/lib/deprecated';\r\n\r\nimport themeColors from '../utils/themeColors';\r\n\r\n/**\r\n * The `SVGIcon` component is used for rendering inline SVG icons or sprite-mapped SVGs\r\n * as an icon.\r\n */\r\nexport default class SVGIcon extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * Boolean if the primary theme color should be applied.\r\n     */\r\n    primary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the secondary theme color should be applied.\r\n     */\r\n    secondary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the icon is considered disabled and should inherit the\r\n     * disabled color.\r\n     */\r\n    disabled: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the icon is considered errored and should inherit the error color.\r\n     */\r\n    error: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the color of the icon should be inherited by parent elements.\r\n     */\r\n    inherit: PropTypes.bool,\r\n\r\n    /**\r\n     * The role to apply to the SVG. When using icons, it is generally recommended to leave it as the default\r\n     * `img` so that it is insured as a graphic.\r\n     */\r\n    role: PropTypes.oneOf(['img', 'presentation']),\r\n\r\n    /**\r\n     * This prop is the title attribute to provide to the `<svg>` element itself. This should be used when you\r\n     * are using a spritesheet that has defined `<title>` with each SVG symbol.\r\n     */\r\n    titleAttr: PropTypes.string,\r\n\r\n    /**\r\n     * An optional list of ids to use to label the SVG icon with. This is helpful to add when you use the `title`\r\n     * and `desc` props as this is used to create ids for those two props. This is super beneficial to screen readers.\r\n     *\r\n     * When this is defined, it is a space-delimited string of ids to provide to the title and desc (in order). If\r\n     * this is omitted and the `use` prop is defined, it will take everything after the `#` sign and append `-title` and\r\n     * `-desc` as a fallback. Check out the examples for more information about this.\r\n     *\r\n     * @see {@link #title}\r\n     * @see {@link #desc}\r\n     */\r\n    'aria-labelledby': PropTypes.string,\r\n\r\n    /**\r\n     * An optional title to give to your SVG icon. This is generally recommended for accessibility when not using\r\n     * the `use` prop, or your spritemap does not contain `<title>` and `<desc>.\r\n     *\r\n     * @see {@link #aria-labelledby}\r\n     */\r\n    title: PropTypes.string,\r\n\r\n    /**\r\n     * An optional description to give to your SVG icon. This is generally recommended for accessibility when not using\r\n     * the `use` prop, or your spritemap does not contain `<title>` and `<desc>.\r\n     *\r\n     * @see {@link #aria-labelledby}\r\n     */\r\n    desc: PropTypes.string,\r\n\r\n    /**\r\n     * This should be a link to a part of an SVG spritemap. So normally one of the following:\r\n     * - `'#some-custom-svg'`\r\n     * - `'/images/spritemap.svg#some-custom-svg'`\r\n     *\r\n     * This prop **should not** be used with the `children` prop as only one will be rendered.\r\n     *\r\n     * > NOTE: IE **does not support** external SVGs. Please see the demo for more details.\r\n     */\r\n    use: PropTypes.string,\r\n\r\n    /**\r\n     * Any `<svg>` children to render to create your icon. This can not be used with the `use` prop.\r\n     */\r\n    children: PropTypes.oneOfType([\r\n      PropTypes.element,\r\n      PropTypes.arrayOf(PropTypes.element),\r\n      PropTypes.node,\r\n    ]),\r\n\r\n    /**\r\n     * Boolean if the SVG should gain the `focusable` attribute. This is disabled by default since IE11\r\n     * and Edge actually default this to true and keyboard's will tab focus all SVGs.\r\n     */\r\n    focusable: PropTypes.string,\r\n\r\n    /**\r\n     * An optional size to apply to the SVG. This can be used to set both the\r\n     * `height` and `width` simultaneously. This will be provided as inline styles\r\n     * since the `height` and `width` are normally controlled by CSS, and CSS has\r\n     * higher precedence than the `height`/`width` attributes.\r\n     */\r\n    size: PropTypes.number,\r\n\r\n    /**\r\n     * The `height` prop should not be used since the `height` and `width` are controlled by CSS and the CSS\r\n     * has a higher precedence than inline attributes. If you want to set the `height`, it should be done via\r\n     * CSS or the `size` prop.\r\n     *\r\n     * @see {@link #size}\r\n     */\r\n    height: deprecated(PropTypes.number, 'Use the `size` prop instead'),\r\n\r\n    /**\r\n     * The `width` prop should not be used since the `height` and `width` are controlled by CSS and the CSS\r\n     * has a higher precedence than inline attributes. If you want to set the `height`, it should be done via\r\n     * CSS or the `size` prop.\r\n     *\r\n     * @see {@link #size}\r\n     */\r\n    width: deprecated(PropTypes.number, 'Use the `size` prop instead'),\r\n\r\n    /**\r\n     * The viewBox attribute allows you to specify that a given set of graphics stretch to\r\n     * fit a particular container element.\r\n     *\r\n     * The value of the viewBox attribute is a list of four numbers min-x, min-y, width and\r\n     * height, separated by white space and/or a comma, which specify a rectangle in user\r\n     * space which should be mapped to the bounds of the viewport established by the given\r\n     * element, taking into account attribute preserveAspectRatio.\r\n     *\r\n     * Negative values for width or height are not permitted and a value of zero disables\r\n     * rendering of the element.An optional viewbox for the SVG.\r\n     *\r\n     * For example, if the SVG element is 250 (width) by 200 (height) and you provide\r\n     * `viewBox=\"0 0 25 20\"`, the coordinates inside the SVG will go from the top left corner\r\n     * (0, 0) to the bottom right (25, 20) and each unit will be worth `10px`.\r\n     */\r\n    viewBox: PropTypes.string,\r\n\r\n    /**\r\n     * An optional xmlns string to provide. The `use` prop will not work without this prop\r\n     * defined.\r\n     */\r\n    xmlns: PropTypes.string,\r\n  };\r\n\r\n  static defaultProps = {\r\n    role: 'img',\r\n    focusable: 'false',\r\n    xmlns: 'http://www.w3.org/2000/svg',\r\n    viewBox: '0 0 24 24',\r\n  };\r\n\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n      styles: this._mergeStyles(props),\r\n      ...this._getIds(props),\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const { style, size, use, title, desc, 'aria-labelledby': labels } = this.props;\r\n    let nextState;\r\n    if (style !== nextProps.style || size !== nextProps.size) {\r\n      nextState = { styles: this._mergeStyles(nextProps) };\r\n    }\r\n\r\n\r\n    if (title !== nextProps.title || desc !== nextProps.desc ||\r\n      ((nextProps.title || nextProps.desc) && (use !== nextProps.use || labels !== nextProps['aria-labelledby']))\r\n    ) {\r\n      nextState = { ...nextState, ...this._getIds(nextProps) };\r\n    }\r\n\r\n    if (nextState) {\r\n      this.setState(nextState);\r\n    }\r\n  }\r\n\r\n  _getIds = ({ use, 'aria-labelledby': labels, title, desc }) => {\r\n    let titleId = null;\r\n    let descId = null;\r\n    let labelledBy = null;\r\n    if (title || desc) {\r\n      if (use) {\r\n        const baseId = use.replace(/.*#/, '');\r\n        titleId = `${baseId}-title`;\r\n        descId = `${baseId}-desc`;\r\n\r\n        if (title) {\r\n          labelledBy = `${baseId}-title`;\r\n        }\r\n\r\n        if (desc) {\r\n          labelledBy = `${labelledBy ? `${labelledBy} ` : ''}${descId}`;\r\n        }\r\n      } else if (labels) {\r\n        [titleId, descId] = labels.split(' ');\r\n      }\r\n    }\r\n\r\n    return { titleId, descId, labelledBy };\r\n  };\r\n\r\n  _mergeStyles = ({ style, size }) => {\r\n    if (style && size) {\r\n      return { height: size, width: size, ...style };\r\n    } else if (style) {\r\n      return style;\r\n    } else if (size) {\r\n      return { height: size, width: size };\r\n    }\r\n\r\n    return undefined;\r\n  };\r\n\r\n  render() {\r\n    const { styles, titleId, descId, labelledBy } = this.state;\r\n    const {\r\n      className,\r\n      disabled,\r\n      use,\r\n      primary,\r\n      secondary,\r\n      error,\r\n      inherit,\r\n      titleAttr,\r\n      'aria-labelledby': ariaLabelledBy,\r\n      /* eslint-disable no-unused-vars */\r\n      size,\r\n      title: propTitle,\r\n      desc: propDesc,\r\n      style: propStyle,\r\n      children: propChildren,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    let { children, title, desc } = this.props;\r\n    if (!children && use) {\r\n      children = <use xlinkHref={use} />;\r\n    }\r\n\r\n    if (title) {\r\n      title = <title id={titleId}>{title}</title>;\r\n    }\r\n\r\n    if (desc) {\r\n      desc = <desc id={descId}>{desc}</desc>;\r\n    }\r\n\r\n    return (\r\n      <svg\r\n        {...props}\r\n        title={titleAttr}\r\n        aria-labelledby={ariaLabelledBy || labelledBy}\r\n        style={styles}\r\n        className={cn('md-icon', themeColors({\r\n          disabled,\r\n          error,\r\n          inherit,\r\n          primary,\r\n          secondary,\r\n        }, className))}\r\n      >\r\n        {title}\r\n        {desc}\r\n        {children}\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n"]}