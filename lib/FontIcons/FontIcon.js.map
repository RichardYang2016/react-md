{"version":3,"sources":["../../src/js/FontIcons/FontIcon.js"],"names":["ICON_SIZE","FontIcon","props","state","styles","_mergeStyles","nextProps","style","forceSize","forceFontSize","setState","iconClassName","className","children","disabled","primary","secondary","error","inherit","classes","propTypes","object","string","isRequired","bool","oneOfType","number","propName","component","args","Error","node","defaultProps","height","width","fontSize","undefined"],"mappings":"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","file":"FontIcon.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\n\r\nimport themeColors from '../utils/themeColors';\r\n\r\nconst ICON_SIZE = 24;\r\n\r\n/**\r\n * The \\`FontIcon\\` component is used for rendering a font-icon library's\r\n * icon. The default is to use the `material-icons` library, but others\r\n * can be used as well.\r\n *\r\n * If you are using another font-icon library that does not always create\r\n * icons with a perfect 1:1 scale (such as font-awesome), it is recommended\r\n * to update the `.md-icon` styles to set the width and height to `$md-font-icon-size`.\r\n * However, this will prevent different sided icons.\r\n *\r\n * ```scss\r\n * .md-icon.fa {\r\n *   height: $md-font-icon-size;\r\n *   width: $md-font-icon-size;\r\n * }\r\n * ```\r\n */\r\nexport default class FontIcon extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the `FontIcon`.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * The icon font library className to use to display the icon.\r\n     */\r\n    iconClassName: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * Boolean if the primary theme color should be applied.\r\n     */\r\n    primary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the secondary theme color should be applied.\r\n     */\r\n    secondary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the icon is considered disabled and should inherit the\r\n     * disabled color.\r\n     */\r\n    disabled: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the error color should be applied to the icon.\r\n     */\r\n    error: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the color of the icon should be inherited by parent elements.\r\n     */\r\n    inherit: PropTypes.bool,\r\n\r\n    /**\r\n     * Either a boolean that will enforce the 24x24 size of the font icon or a number of the size\r\n     * to enforce. This is useful when using other font icon libraries that do not have a consistent\r\n     * size.\r\n     */\r\n    forceSize: PropTypes.oneOfType([\r\n      PropTypes.bool,\r\n      PropTypes.number,\r\n    ]),\r\n\r\n    /**\r\n     * Boolean if the `forceSize` prop should also force the `font-size` instead of only `width` and `height`.\r\n     */\r\n    forceFontSize: (props, propName, component, ...args) => {\r\n      let error = PropTypes.bool(props, propName, component, ...args);\r\n      if (!error && typeof props.forceSize === 'undefined' && props[propName]) {\r\n        error = new Error(\r\n          `You provided a \\`forceFontSize\\` prop to the ${component} component, without specifying the \\`forceSize\\` ` +\r\n          `prop. Either set the \\`forceSize\\` prop to a boolean or a number, or disable \\`${propName}\\`.`\r\n        );\r\n      }\r\n\r\n      return error;\r\n    },\r\n\r\n    /**\r\n     * Any children required to display the icon with the font library.\r\n     */\r\n    children: PropTypes.node,\r\n  };\r\n\r\n  static defaultProps = {\r\n    iconClassName: 'material-icons',\r\n  };\r\n\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = { styles: this._mergeStyles(props) };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const { style, forceSize, forceFontSize } = this.props;\r\n    if (style !== nextProps.style || forceSize !== nextProps.forceSize || forceFontSize !== nextProps.forceFontSize) {\r\n      this.setState({ styles: this._mergeStyles(nextProps) });\r\n    }\r\n  }\r\n\r\n  _mergeStyles = ({ style, forceSize, forceFontSize }) => {\r\n    let styles = style;\r\n    if (typeof forceSize === 'boolean') {\r\n      styles = {\r\n        height: ICON_SIZE,\r\n        width: ICON_SIZE,\r\n        fontSize: forceFontSize ? ICON_SIZE : undefined,\r\n        ...style,\r\n      };\r\n    } else if (typeof forceSize === 'number') {\r\n      styles = {\r\n        height: forceSize,\r\n        width: forceSize,\r\n        fontSize: forceFontSize ? forceSize : undefined,\r\n        ...style,\r\n      };\r\n    }\r\n\r\n    return styles;\r\n  };\r\n\r\n  render() {\r\n    const { styles } = this.state;\r\n    const {\r\n      iconClassName,\r\n      className,\r\n      children,\r\n      disabled,\r\n      primary,\r\n      secondary,\r\n      error,\r\n      inherit,\r\n      /* eslint-disable no-unused-vars */\r\n      style,\r\n      forceSize,\r\n      forceFontSize,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    const classes = cn('md-icon', iconClassName, themeColors({\r\n      disabled,\r\n      error,\r\n      inherit,\r\n      primary,\r\n      secondary,\r\n    }), className);\r\n\r\n    return (\r\n      <i {...props} style={styles} className={classes}>\r\n        {children}\r\n      </i>\r\n    );\r\n  }\r\n}\r\n"]}