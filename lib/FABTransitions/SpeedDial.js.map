{"version":3,"sources":["../../src/js/FABTransitions/SpeedDial.js"],"names":["SpeedDial","props","state","isOpen","initiallyOpen","_handleClick","bind","e","onClick","onPassiveClick","onActiveClick","_isOpen","setState","fabs","passiveIconChildren","passiveIconClassName","activeIconChildren","activeIconClassName","transitionName","transitionEnterTimeout","speedDialTransitionName","speedDialTransitionEnterTimeout","speedDialTransitionLeaveTimeout","containerProps","speedDialFabs","map","fab","i","fn","el","fabProps","isValidElement","Children","only","cloneElement","createElement","created","floating","mini","iconClassName","children","className","propTypes","bool","string","isRequired","number","node","propName","component","others","size","length","arrayOf","oneOfType","shape","func","middle","Error","object","defaultProps"],"mappings":"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","file":"SpeedDial.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\r\nimport cn from 'classnames';\r\n\r\nimport Button from '../Buttons/Button';\r\n\r\n/**\r\n * Any props such as style or event listeners will be applied to the\r\n * main floating action button. If you want props applied to the `SpeedDial`\r\n * itself, you will need to set them in the `containerProps` prop.\r\n */\r\nexport default class SpeedDial extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * A boolean if the speed dial is currently open. This will make\r\n     * the speed dial into a controlled component.\r\n     */\r\n    isOpen: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the uncontrolled speed dial is initially open.\r\n     */\r\n    initiallyOpen: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional className to apply to the speed dial.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * The speed dial's floating action button transition name when the button's\r\n     * open state changes. If the button is open, `-right` is appened, otherwise\r\n     * `-left`.\r\n     */\r\n    transitionName: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * The timeout for the speed dial's floating action button transition.\r\n     */\r\n    transitionEnterTimeout: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * The name for the flinging animation of the speed dial.\r\n     */\r\n    speedDialTransitionName: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * The timeout for the flinging animation of the speed dial when opening.\r\n     */\r\n    speedDialTransitionEnterTimeout: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * The timeout for the flinging animation when the speed dial is closing.\r\n     */\r\n    speedDialTransitionLeaveTimeout: PropTypes.number.isRequired,\r\n\r\n    /**\r\n     * The optional children to display for unopened speed dial floating action button.\r\n     */\r\n    passiveIconChildren: PropTypes.node,\r\n\r\n    /**\r\n     * The optional icon className to display for unopened speed dial floating action button.\r\n     */\r\n    passiveIconClassName: PropTypes.node,\r\n\r\n    /**\r\n     * The optional children to display for opened speed dial floating action button.\r\n     */\r\n    activeIconChildren: PropTypes.node,\r\n\r\n    /**\r\n     * The optional icon className to display for opened speed dial floating action button.\r\n     */\r\n    activeIconClassName: PropTypes.string,\r\n\r\n    /**\r\n     * A list of `FloatingButton` or props to generate the `FloatinButton` when the\r\n     * `SpeedDial` is open. The buttons will automatically be converted to the `mini`\r\n     * version.\r\n     */\r\n    fabs: (props, propName, component, ...others) => {\r\n      const size = props.fabs.length;\r\n      if (size >= 3 && size <= 5) {\r\n        return PropTypes.arrayOf(PropTypes.oneOfType([\r\n          PropTypes.node,\r\n          PropTypes.shape({\r\n            onClick: PropTypes.func,\r\n            iconClassName: PropTypes.string,\r\n            children: PropTypes.node,\r\n          }),\r\n        ])).isRequired(props, propName, component, ...others);\r\n      }\r\n\r\n      const middle = size < 3 ? 'at least 3' : 'no more than 5';\r\n      return new Error(\r\n        `A speed dial requires ${middle} floating action buttons to fling. ` +\r\n        `However, only ${size} were given.`\r\n      );\r\n    },\r\n\r\n    /**\r\n     * An optional function to call when the main floating action button is clicked.\r\n     */\r\n    onClick: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the main floating action button is clicked.\r\n     */\r\n    onPassiveClick: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the main floating action button is clicked.\r\n     */\r\n    onActiveClick: PropTypes.func,\r\n\r\n    /**\r\n     * Any additional props to apply to the speed dial itself.\r\n     */\r\n    containerProps: PropTypes.object,\r\n  };\r\n\r\n  static defaultProps = {\r\n    initiallyOpen: false,\r\n    transitionName: 'md-fab-rotate',\r\n    transitionEnterTimeout: 150,\r\n    speedDialTransitionName: 'md-speed-dial',\r\n    speedDialTransitionEnterTimeout: 450,\r\n    speedDialTransitionLeaveTimeout: 150,\r\n    passiveIconClassName: 'material-icons',\r\n    activeIconClassName: 'material-icons',\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { isOpen: props.initiallyOpen };\r\n    this._handleClick = this._handleClick.bind(this);\r\n  }\r\n\r\n  _isOpen(props, state) {\r\n    return typeof props.isOpen === 'undefined' ? state.isOpen : props.isOpen;\r\n  }\r\n\r\n  _handleClick(e) {\r\n    const { onClick, onPassiveClick, onActiveClick } = this.props;\r\n    if (onClick) {\r\n      onClick(e);\r\n    }\r\n\r\n    const isOpen = this._isOpen(this.props, this.state);\r\n    if (isOpen && onActiveClick) {\r\n      onActiveClick(e);\r\n    } else if (!isOpen && onPassiveClick) {\r\n      onPassiveClick(e);\r\n    }\r\n\r\n    if (typeof this.props.isOpen === 'undefined') {\r\n      this.setState({ isOpen: !isOpen });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      fabs,\r\n      passiveIconChildren,\r\n      passiveIconClassName,\r\n      activeIconChildren,\r\n      activeIconClassName,\r\n      transitionName,\r\n      transitionEnterTimeout,\r\n      speedDialTransitionName,\r\n      speedDialTransitionEnterTimeout,\r\n      speedDialTransitionLeaveTimeout,\r\n      containerProps,\r\n      ...props\r\n    } = this.props;\r\n    delete props.isOpen;\r\n    delete props.initiallyOpen;\r\n\r\n    const isOpen = this._isOpen(this.props, this.state);\r\n\r\n    let speedDialFabs;\r\n    if (isOpen) {\r\n      speedDialFabs = fabs.map((fab, i) => {\r\n        let fn;\r\n        let el;\r\n        let fabProps;\r\n        if (React.isValidElement(fab)) {\r\n          el = React.Children.only(fab);\r\n          fn = React.cloneElement;\r\n          fabProps = fab.props;\r\n        } else {\r\n          el = Button;\r\n          fn = React.createElement;\r\n          fabProps = fab;\r\n        }\r\n\r\n        const created = fn(el, {\r\n          floating: true,\r\n          mini: true,\r\n          ...fabProps,\r\n        });\r\n        return <div key={i} className=\"md-speed-dial-fab\">{created}</div>;\r\n      });\r\n    }\r\n\r\n    props.iconClassName = isOpen ? activeIconClassName : passiveIconClassName;\r\n    props.children = isOpen ? activeIconChildren : passiveIconChildren;\r\n    return (\r\n      <CSSTransitionGroup\r\n        {...containerProps}\r\n        component=\"div\"\r\n        className={cn('md-speed-dial', !!containerProps && containerProps.className)}\r\n        transitionName={`${transitionName}-${isOpen ? 'right' : 'left'}`}\r\n        transitionEnterTimeout={transitionEnterTimeout}\r\n        transitionLeave={false}\r\n        ref=\"container\"\r\n      >\r\n        <CSSTransitionGroup\r\n          component=\"div\"\r\n          key=\"speed-dial-fabs\"\r\n          transitionName={speedDialTransitionName}\r\n          transitionEnterTimeout={speedDialTransitionEnterTimeout}\r\n          transitionLeaveTimeout={speedDialTransitionLeaveTimeout}\r\n        >\r\n          {speedDialFabs}\r\n        </CSSTransitionGroup>\r\n        <Button\r\n          {...props}\r\n          floating\r\n          key={`${isOpen ? 'open' : 'closed'}-fab`}\r\n          onClick={this._handleClick}\r\n        />\r\n      </CSSTransitionGroup>\r\n    );\r\n  }\r\n}\r\n"]}