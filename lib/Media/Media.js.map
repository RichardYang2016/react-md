{"version":3,"sources":["../../src/js/Media/Media.js"],"names":["validateAspectRatio","props","propName","component","value","args","err","string","isRequired","split","length","Error","Media","Component","className","children","forceAspect","aspectRatio","expandable","propTypes","node","bool","oneOfType","func","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;AAEA,SAASA,mBAAT,CAA6BC,KAA7B,EAAoCC,QAApC,EAA8CC,SAA9C,EAAkE;AAAA;;AAChE,MAAMC,QAAQH,MAAMC,QAAN,CAAd;;AADgE,oCAANG,IAAM;AAANA,QAAM;AAAA;;AAEhE,MAAIC,MAAM,yCAAUC,MAAV,EAAiBC,UAAjB,2BAA4BP,KAA5B,EAAmCC,QAAnC,EAA6CC,SAA7C,SAA2DE,IAA3D,EAAV;AACA,MAAI,CAACC,GAAD,IAAQF,MAAMK,KAAN,CAAY,GAAZ,EAAiBC,MAAjB,KAA4B,CAAxC,EAA2C;AACzCJ,UAAM,IAAIK,KAAJ,CACJ,uBAAsBT,QAAtB,sBAAgDC,SAAhD,iDACkBC,KADlB,4DADI,CAAN;AAID;;AAED,SAAOE,GAAP;AACD;;AAED;;;;IAGqBM,K;;;;;;;;;;;6BA2CV;AAAA,mBASH,KAAKX,KATF;AAAA,UAEMY,SAFN,UAELV,SAFK;AAAA,UAGLW,SAHK,UAGLA,SAHK;AAAA,UAILC,QAJK,UAILA,QAJK;AAAA,UAKLC,WALK,UAKLA,WALK;AAAA,UAMLC,WANK,UAMLA,WANK;AAAA,UAOLC,UAPK,UAOLA,UAPK;AAAA,UAQFjB,KARE;;AAWP,aACE;AAAC,iBAAD;AAAA,qBACMA,KADN;AAEE,qBAAW,0BAAG,UAAH,qCACKgB,WADL,EACqBD,WADrB,GAERF,SAFQ;AAFb;AAMGC;AANH,OADF;AAUD;;;;;;AAhEkBH,K,CACZO,S,GAAY;AACjB;;;AAGAL,aAAW,oBAAUP,MAJJ;;AAMjB;;;AAGAQ,YAAU,oBAAUK,IATH;;AAWjB;;;AAGAJ,eAAa,oBAAUK,IAdN;;AAgBjB;;;AAGAJ,eAAajB,mBAnBI;;AAqBjB;;;;AAIAkB,cAAY,oBAAUG,IAzBL;;AA2BjB;;;AAGAlB,aAAW,oBAAUmB,SAAV,CAAoB,CAC7B,oBAAUC,IADmB,EAE7B,oBAAUhB,MAFmB,CAApB,EAGRC;AAjCc,C;AADAI,K,CAqCZY,Y,GAAe;AACpBR,eAAa,IADO;AAEpBC,eAAa,MAFO;AAGpBd,aAAW;AAHS,C;kBArCHS,K","file":"Media.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\n\r\nfunction validateAspectRatio(props, propName, component, ...args) {\r\n  const value = props[propName];\r\n  let err = PropTypes.string.isRequired(props, propName, component, ...args);\r\n  if (!err && value.split('-').length !== 2) {\r\n    err = new Error(\r\n      `Your provided an \\`${propName}\\` prop to the ${component} that is not a valid ` +\r\n      `aspect ratio \\`${value}\\`. This should be in the form of '{width}-{height}'.`\r\n    );\r\n  }\r\n\r\n  return err;\r\n}\r\n\r\n/**\r\n * The `Media` component is used to display images, iframes, ...media. Who'da thunk?\r\n */\r\nexport default class Media extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional className to apply to the card media component.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * Any media to display.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * Boolean if the aspect ratio should be forced.\r\n     */\r\n    forceAspect: PropTypes.bool,\r\n\r\n    /**\r\n     * The aspect ratio to use.\r\n     */\r\n    aspectRatio: validateAspectRatio,\r\n\r\n    /**\r\n     * Boolean if this component should be expandable when there is a `CardExpander`\r\n     * above it in the `Card`.\r\n     */\r\n    expandable: PropTypes.bool,\r\n\r\n    /**\r\n     * The component to render the card media as.\r\n     */\r\n    component: PropTypes.oneOfType([\r\n      PropTypes.func,\r\n      PropTypes.string,\r\n    ]).isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    forceAspect: true,\r\n    aspectRatio: '16-9',\r\n    component: 'section',\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      component: Component,\r\n      className,\r\n      children,\r\n      forceAspect,\r\n      aspectRatio,\r\n      expandable, // eslint-disable-line no-unused-vars\r\n      ...props\r\n    } = this.props;\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        className={cn('md-media', {\r\n          [`md-media--${aspectRatio}`]: forceAspect,\r\n        }, className)}\r\n      >\r\n        {children}\r\n      </Component>\r\n    );\r\n  }\r\n}\r\n"]}