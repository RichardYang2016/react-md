{"version":3,"sources":["../../src/js/Avatars/Avatar.js"],"names":["Avatar","state","color","_setRandomColor","suffixes","props","i","Math","floor","random","length","setState","nextProps","src","icon","suffix","className","contentStyle","contentClassName","alt","children","iconSized","role","content","_getColor","propTypes","string","object","node","bool","arrayOf","oneOf","defaultProps"],"mappings":"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","file":"Avatar.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\n\r\nimport oneRequiredForA11yIf from '../utils/PropTypes/oneRequiredForA11yIf';\r\n\r\n/**\r\n * The avatar component is used to convert a `FontIcon`, an image, or\r\n * a letter into an avatar.\r\n *\r\n * Any other props given to the Avatar component such as event listeners\r\n * or styles will also be applied.\r\n */\r\nexport default class Avatar extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional className to apply to the avatar.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to either the `<img>` or `<div>` surrounding the content. The `<img>` tag\r\n     * will be used with the `src` prop is defined.\r\n     */\r\n    contentStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to either the `<img>` or `<div>` surrounding the content. The `<img>` tag\r\n     * will be used with the `src` prop is defined.\r\n     */\r\n    contentClassName: PropTypes.string,\r\n\r\n    /**\r\n     * An optional image source to use for the avatar.\r\n     */\r\n    src: oneRequiredForA11yIf(PropTypes.string, 'role', 'alt'),\r\n\r\n    /**\r\n     * An optional image alt to use for the avatar if it is\r\n     * an image.\r\n     */\r\n    alt: PropTypes.string,\r\n\r\n    /**\r\n     * An optional `FontIcon` to convert into an avatar.\r\n     */\r\n    icon: PropTypes.node,\r\n\r\n    /**\r\n     * An optional letter to display in the avatar.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * A boolean if a random color should be applied to the avatar.\r\n     * This will be one of the `suffixes`.\r\n     */\r\n    random: PropTypes.bool,\r\n\r\n    /**\r\n     * A list of available suffixes to use when generating a random\r\n     * color for the avatar.\r\n     */\r\n    suffixes: PropTypes.arrayOf(PropTypes.string),\r\n\r\n    /**\r\n     * The suffix to use for a color. This can be any value but\r\n     * *should* be one of the available `suffixes`.\r\n     */\r\n    suffix: PropTypes.string,\r\n\r\n    /**\r\n     * Boolean if the `Avatar` should be sized to a `FontIcon` size. This\r\n     * will just set the width and height to the `$md-font-icon-size`.\r\n     */\r\n    iconSized: PropTypes.bool,\r\n\r\n    /**\r\n     * A role for the avatar's image. When the `src` prop is set, either a `role` of `presentation`\r\n     * or the `alt` prop must be defined for a11y.\r\n     */\r\n    role: PropTypes.oneOf(['presentation']),\r\n  };\r\n\r\n  static defaultProps = {\r\n    suffixes: [\r\n      'red',\r\n      'pink',\r\n      'purple',\r\n      'deep-purple',\r\n      'indigo',\r\n      'blue',\r\n      'light-blue',\r\n      'cyan',\r\n      'teal',\r\n      'green',\r\n      'light-green',\r\n      'lime',\r\n      'yellow',\r\n      'amber',\r\n      'orange',\r\n      'deep-orange',\r\n      'brown',\r\n      'grey',\r\n      'blue-grey',\r\n    ],\r\n  };\r\n\r\n  state = { color: null };\r\n\r\n  componentWillMount() {\r\n    if (this.props.random) {\r\n      this._setRandomColor();\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.random && (this.props.src !== nextProps.src || this.props.icon !== nextProps.icon)) {\r\n      this._setRandomColor();\r\n    } else if (this.props.random && !nextProps.random) {\r\n      this.setState({ color: null });\r\n    }\r\n  }\r\n\r\n  _setRandomColor = () => {\r\n    const { suffixes } = this.props;\r\n\r\n    const i = (Math.floor(Math.random() * (suffixes.length - 1)) + 1);\r\n    this.setState({ color: suffixes[i] });\r\n  };\r\n\r\n  _getColor(suffix, suffixes, color) {\r\n    if (suffix) {\r\n      return `md-avatar--${suffix}`;\r\n    } else if (!!suffixes && !color) {\r\n      return 'md-avatar--default';\r\n    }\r\n\r\n    return `md-avatar--${color}`;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      className,\r\n      contentStyle,\r\n      contentClassName,\r\n      src,\r\n      alt,\r\n      icon,\r\n      children,\r\n      suffix,\r\n      suffixes,\r\n      iconSized,\r\n      role,\r\n      random, // eslint-disable-line no-unused-vars\r\n      ...props\r\n    } = this.props;\r\n\r\n    let content;\r\n    if (src) {\r\n      content = (\r\n        <img\r\n          src={src}\r\n          alt={alt}\r\n          role={role}\r\n          style={contentStyle}\r\n          className={cn('md-avatar-img', contentClassName)}\r\n        />\r\n      );\r\n    } else {\r\n      content = (\r\n        <div\r\n          style={contentStyle}\r\n          className={cn('md-avatar-content', contentClassName)}\r\n        >\r\n          {icon || children}\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div\r\n        {...props}\r\n        className={cn('md-inline-block md-avatar', this._getColor(suffix, suffixes, this.state.color), {\r\n          'md-avatar--icon-sized': iconSized,\r\n        }, className)}\r\n      >\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}