{"version":3,"sources":["../../src/js/Menus/DropdownMenu.js"],"names":["DropdownMenu","props","_handleClick","e","onVisibilityChange","children","visible","state","toggle","Children","only","onClick","setState","_handleClose","defaultVisible","id","listId","menuItems","propChildren","simplifiedMenu","propVisible","cloneElement","items","Array","isArray","map","Positions","HorizontalAnchors","VerticalAnchors","propTypes","oneOfType","number","string","style","object","className","listStyle","listClassName","listProps","listZDepth","listInline","bool","listHeightRestricted","isRequired","func","node","arrayOf","element","anchor","belowAnchor","fixedTo","position","cascading","cascadingZDepth","cascadingAnchor","fullWidth","block","centered","sameWidth","xThreshold","yThreshold","closeOnOutsideClick","transitionName","transitionEnterTimeout","transitionLeaveTimeout","repositionOnScroll","repositionOnResize","minLeft","minRight","minBottom","fillViewportWidth","fillViewportHeight","defaultProps"],"mappings":"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","file":"DropdownMenu.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport controlled from '../utils/PropTypes/controlled';\r\nimport mapToListParts from '../utils/mapToListParts';\r\nimport getField from '../utils/getField';\r\nimport anchorShape from '../Helpers/anchorShape';\r\nimport fixedToShape from '../Helpers/fixedToShape';\r\nimport positionShape from '../Helpers/positionShape';\r\nimport Menu from './Menu';\r\n\r\n/**\r\n * The `DropdownMenu` is just a simple wrapper to the `Menu` component. The main differences\r\n * is that the `toggle` component will now be the children and the list of items to display\r\n * will be the `menuItems` prop.\r\n *\r\n * The dropdown menu is mostly used to control the state of the menu and render a single element\r\n * as the toggle.\r\n */\r\nexport default class DropdownMenu extends PureComponent {\r\n  static Positions = Menu.Positions;\r\n  static HorizontalAnchors = Menu.HorizontalAnchors;\r\n  static VerticalAnchors = Menu.VerticalAnchors;\r\n  static propTypes = {\r\n    /**\r\n     * An id to use for the menu. This is required for accessibility.\r\n     *\r\n     * @see {@link Menus/Menu#id}\r\n     */\r\n    id: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional id to provide to the menu's list.\r\n     *\r\n     * @see {@link Menus/Menu#listId}\r\n     */\r\n    listId: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n\r\n    /**\r\n     * An optional style to apply to the menu.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the menu.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * An optional style to apply to the list.\r\n     */\r\n    listStyle: PropTypes.object,\r\n\r\n    /**\r\n     * An optional class name to apply to the list.\r\n     */\r\n    listClassName: PropTypes.string,\r\n\r\n    /**\r\n     * Any additional props to provide to the list.\r\n     *\r\n     * @see {@link Menus/Menu#listProps}\r\n     */\r\n    listProps: PropTypes.object,\r\n\r\n    /**\r\n     * The z-depth to use for the list.\r\n     *\r\n     * @see {@link Menus/Menu/listZDepth}\r\n     */\r\n    listZDepth: PropTypes.number,\r\n\r\n    /**\r\n     * Boolean if the list should be displayed inline.\r\n     *\r\n     * @see {@link Lists/List#inline}\r\n     */\r\n    listInline: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the list's height should be restricted.\r\n     *\r\n     * @see {@link Menus/Menu#listHeightRestricted}\r\n     */\r\n    listHeightRestricted: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the menu's list is currently visible. If this is defined, it will\r\n     * require the `onVisibilityChange` function to be defined since it will become\r\n     * a controlled component.\r\n     */\r\n    visible: controlled(PropTypes.bool, 'onVisibilityChange', 'defaultVisible'),\r\n\r\n    /**\r\n     * Boolean if the menu's list should be visible by default.\r\n     */\r\n    defaultVisible: PropTypes.bool.isRequired,\r\n\r\n    /**\r\n     * An optional function to call when the button is clicked.\r\n     */\r\n    onClick: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the visibility changes for the menu. The callback will\r\n     * include the next visibility state and the event that triggered the change.\r\n     *\r\n     * ```js\r\n     * onVisibilityChange(visible, event);\r\n     * ```\r\n     */\r\n    onVisibilityChange: PropTypes.func,\r\n\r\n    /**\r\n     * This is a 0 to many relationship of `ListItem` to display in the menu's `List`. If the type\r\n     * of the item is a number or string, it will be passed to the `ListItem` as the `primaryText`.\r\n     * If it is an object, it should be the shape of the `ListItem` props. If it is a node, it will\r\n     * just be rendered in the `List`.\r\n     *\r\n     * @see {@link Lists/ListItem}\r\n     * @see {@link Menus/Menu#children}\r\n     */\r\n    menuItems: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n      PropTypes.object,\r\n      PropTypes.node,\r\n      PropTypes.arrayOf(PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n        PropTypes.object,\r\n        PropTypes.node,\r\n      ])),\r\n    ]),\r\n\r\n    /**\r\n     * @see {@link Menus/Menu#toggle}\r\n     */\r\n    children: PropTypes.element.isRequired,\r\n\r\n    /**\r\n     * The anchor position of the menu's list.\r\n     *\r\n     * @see {@link Helpers/Layover#anchor}\r\n     */\r\n    anchor: anchorShape,\r\n\r\n    /**\r\n     * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.\r\n     *\r\n     * @see {@link Helpers/Layover#belowAnchor}\r\n     */\r\n    belowAnchor: anchorShape,\r\n\r\n    /**\r\n     * This is how the menu's list is fixed to the toggle.\r\n     *\r\n     * @see {@link Menus/Menu#fixedTo}\r\n     */\r\n    fixedTo: fixedToShape,\r\n\r\n    /**\r\n     * This is the animation position for the menu's list.\r\n     *\r\n     * @see {@link Menus/Menu#position}\r\n     */\r\n    position: positionShape,\r\n\r\n    /**\r\n     * Boolean if the menu's list should gain the cascading styles.\r\n     *\r\n     * @see {@link Menus/Menu#cascading}\r\n     */\r\n    cascading: PropTypes.bool,\r\n\r\n    /**\r\n     * The zDepth to use for the lists that appear in cascading menus.\r\n     *\r\n     * @see {@link Menus/Menu#cascadingZDepth}\r\n     */\r\n    cascadingZDepth: PropTypes.number,\r\n\r\n    /**\r\n     * The anchor position for the cascading lists.\r\n     *\r\n     * @see {@link Menus/Menu#cascadingAnchor}\r\n     */\r\n    cascadingAnchor: anchorShape,\r\n\r\n    /**\r\n     * Boolean if the menu should display as a full width container. This will *not* update the button\r\n     * to be full width as well.\r\n     *\r\n     * @see {@link Menus/Menu#fullWidth}\r\n     */\r\n    fullWidth: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the menu's container should display as `block` instead of `inline-block`.\r\n     *\r\n     * @see {@link Menus/Menu#block}\r\n     */\r\n    block: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the list should appear centered related to the button.\r\n     *\r\n     * @see {@link Menus/Menu#centered}\r\n     */\r\n    centered: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the menu's list should be the same width as the button.\r\n     *\r\n     * @see {@link Menus/Menu#sameWidth}\r\n     */\r\n    sameWidth: PropTypes.bool,\r\n\r\n    /**\r\n     * @see {@link Menus/Menu#xThreshold}\r\n     */\r\n    xThreshold: PropTypes.number,\r\n\r\n    /**\r\n     * @see {@link Menus/Menu#yThreshold}\r\n     */\r\n    yThreshold: PropTypes.number,\r\n\r\n    /**\r\n     * Boolean if the menu's list should be closed when an element outside of the menu has been clicked.\r\n     *\r\n     * @see {@link Menus/Menu#closeOnOutsideClick}\r\n     */\r\n    closeOnOutsideClick: PropTypes.bool,\r\n\r\n    /**\r\n     * The transition name to use for the menu's list visibility changes.\r\n     *\r\n     * @see {@link Menus/Menu#transitionName}\r\n     */\r\n    transitionName: PropTypes.string,\r\n\r\n    /**\r\n     * The transition name to use when the menu's list gains visibility.\r\n     *\r\n     * @see {@link Menus/Menu#transitionEnterTimeout}\r\n     */\r\n    transitionEnterTimeout: PropTypes.number,\r\n\r\n    /**\r\n     * The transition timeout to use when the menu's list loses visibility.\r\n     *\r\n     * @see {@link Menus/Menu#transitionLeaveTimeout}\r\n     */\r\n    transitionLeaveTimeout: PropTypes.number,\r\n\r\n    /**\r\n     * Boolean if the menu should automatically try to reposition itself to stay within\r\n     * the viewport when the `fixedTo` element scrolls.\r\n     *\r\n     * @see {@link Helpers/Layover#repositionOnScroll}\r\n     */\r\n    repositionOnScroll: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the menu should automatically try to reposition itself to stay within\r\n     * the viewport when the window resizes.\r\n     *\r\n     * @see {@link Helpers/Layover#repositionOnResize}\r\n     */\r\n    repositionOnResize: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the menu logic should be simplified without any viewport logic and position\r\n     * based on the relative position of the menu. This will most like require some additional\r\n     * styles applied to the menu.\r\n     *\r\n     * @see {@link Helpers/Layover#simplified}\r\n     */\r\n    simplifiedMenu: PropTypes.bool,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#minLeft}\r\n     */\r\n    minLeft: Menu.propTypes.minLeft,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#minRight}\r\n     */\r\n    minRight: Menu.propTypes.minLeft,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#minBottom}\r\n     */\r\n    minBottom: Menu.propTypes.minBottom,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#fillViewportWidth}\r\n     */\r\n    fillViewportWidth: PropTypes.bool,\r\n\r\n    /**\r\n     * @see {@link Helpers/Layover#fillViewportHeight}\r\n     */\r\n    fillViewportHeight: PropTypes.bool,\r\n  };\r\n\r\n  static defaultProps = {\r\n    defaultVisible: false,\r\n    repositionOnScroll: true,\r\n    repositionOnResize: false,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n    if (typeof props.visible === 'undefined') {\r\n      this.state.visible = props.defaultVisible;\r\n    }\r\n  }\r\n\r\n  _handleClick = (e) => {\r\n    const { onVisibilityChange, children } = this.props;\r\n    const visible = !getField(this.props, this.state, 'visible');\r\n    if (onVisibilityChange) {\r\n      onVisibilityChange(visible, e);\r\n    }\r\n\r\n    const toggle = React.Children.only(children);\r\n    if (toggle.props.onClick) {\r\n      toggle.props.onClick(e);\r\n    }\r\n\r\n    if (typeof this.props.visible === 'undefined') {\r\n      this.setState({ visible });\r\n    }\r\n  };\r\n\r\n  _handleClose = (e) => {\r\n    const { onVisibilityChange } = this.props;\r\n    const visible = false;\r\n    if (onVisibilityChange) {\r\n      onVisibilityChange(visible, e);\r\n    }\r\n\r\n    if (typeof this.props.visible === 'undefined') {\r\n      this.setState({ visible });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      listId,\r\n      menuItems,\r\n      children: propChildren,\r\n      simplifiedMenu,\r\n      /* eslint-disable no-unused-vars */\r\n      visible: propVisible,\r\n      onVisibilityChange,\r\n      defaultVisible,\r\n      /* eslint-enable no-unused-vars */\r\n      ...props\r\n    } = this.props;\r\n\r\n    const visible = getField(this.props, this.state, 'visible');\r\n\r\n    const children = React.Children.only(propChildren);\r\n    const toggle = React.cloneElement(children, {\r\n      id: children.props.id || `${id}-toggle`,\r\n      onClick: this._handleClick,\r\n    });\r\n\r\n    let items;\r\n    if (!Array.isArray(menuItems)) {\r\n      items = mapToListParts(menuItems);\r\n    } else {\r\n      items = menuItems.map(mapToListParts);\r\n    }\r\n\r\n    return (\r\n      <Menu\r\n        {...props}\r\n        simplified={simplifiedMenu}\r\n        id={id}\r\n        listId={listId}\r\n        toggle={toggle}\r\n        visible={visible}\r\n        onClose={this._handleClose}\r\n      >\r\n        {items}\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n"]}