{"version":3,"sources":["../../src/js/Buttons/IconButton.js"],"names":["IconButton","props","iconClassName","children","tooltip","floating","tooltipLabel","tooltipPosition","propTypes","string","node","className","type","disabled","bool","href","onClick","func","oneOf","tooltipDelay","number","deprecated","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;;;IAOMA,U;;;;;;;;;;;6BAwEK;AAAA,mBAOH,KAAKC,KAPF;AAAA,UAELC,aAFK,UAELA,aAFK;AAAA,UAGLC,QAHK,UAGLA,QAHK;AAAA,UAILC,OAJK,UAILA,OAJK;AAAA,UAKLC,QALK,UAKLA,QALK;AAAA,UAMFJ,KANE;;AAQP,aAAOA,MAAMK,YAAb;AACA,aAAOL,MAAMM,eAAb;;AAEA,aACE;AAAA;AAAA,qBAAYN,KAAZ,IAAmB,MAAM,CAACI,QAA1B,EAAoC,UAAUA,QAA9C;AACGD,eADH;AAEE;AAAA;AAAA,YAAU,eAAeF,aAAzB;AAAyCC;AAAzC;AAFF,OADF;AAMD;;;;;;AAzFGH,U,CACGQ,S,GAAY;AACjB;;;AAGAN,iBAAe,oBAAUO,MAJR;;AAMjB;;;AAGAN,YAAU,oBAAUO,IATH;;AAWjB;;;AAGAC,aAAW,oBAAUF,MAdJ;;AAgBjB;;;AAGAG,QAAM,oBAAUH,MAnBC;;AAqBjB;;;AAGAI,YAAU,oBAAUC,IAxBH;;AA0BjB;;;AAGAC,QAAM,oBAAUN,MA7BC;;AA+BjB;;;AAGAO,WAAS,oBAAUC,IAlCF;AAmCjB;;;;;;;AAQAX,gBAAc,oBAAUI,IA3CP;;AA6CjB;;;;AAIAH,mBAAiB,oBAAUW,KAAV,CAAgB,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA2B,MAA3B,CAAhB,CAjDA;;AAmDjB;;;AAGAC,gBAAc,oBAAUC,MAtDP;;AAwDjB;AACAhB,WAAS,oBAAUM,IAzDF;AA0DjBL,YAAU,oBAAUS,IA1DH;;AA4DjBO,cAAY,mCACV,kFACA,iFADA,GAEA,cAHU;AA5DK,C;AADfrB,U,CAoEGsB,Y,GAAe;AACpBV,QAAM;AADc,C;kBAwBT,6BAAcZ,UAAd,C","file":"IconButton.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport deprecated from '../utils/PropTypes/componentDeprecated';\r\nimport FontIcon from '../FontIcons/FontIcon';\r\nimport injectTooltip from '../Tooltips/injectTooltip';\r\nimport Button from './Button';\r\n\r\n/**\r\n * The `IconButton` component automatically includes ink and a tooltip.\r\n * The tooltip will only be included if the `tooltipLabel` prop is given.\r\n *\r\n * Any other props (such as style or event listeners) will also be\r\n * applied.\r\n */\r\nclass IconButton extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * The className to use for rendering the `FontIcon`.\r\n     */\r\n    iconClassName: PropTypes.string,\r\n\r\n    /**\r\n     * Any children to use to render the `FontIcon`.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * An optional className to apply to the button.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * The button type.\r\n     */\r\n    type: PropTypes.string,\r\n\r\n    /**\r\n     * Boolean if the button is disabled.\r\n     */\r\n    disabled: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional href to convert the button into a link button.\r\n     */\r\n    href: PropTypes.string,\r\n\r\n    /**\r\n     * An optional function to call when the button is clicked.\r\n     */\r\n    onClick: PropTypes.func,\r\n    /**\r\n     * Boolean if the IconButton is floating\r\n    floating: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional label to use if you would like a tooltip to display\r\n     * on hover or touch hold.\r\n     */\r\n    tooltipLabel: PropTypes.node,\r\n\r\n    /**\r\n     * The position that the tooltip should be displayed relative to\r\n     * the button.\r\n     */\r\n    tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\r\n\r\n    /**\r\n     * An optional amount of delay before the tooltip appears.\r\n     */\r\n    tooltipDelay: PropTypes.number,\r\n\r\n    // Inject from injectTooltip\r\n    tooltip: PropTypes.node,\r\n    floating: PropTypes.bool,\r\n\r\n    deprecated: deprecated(\r\n      'The behavior of the `IconButton` can be achieved with the `Button` component ' +\r\n      'without the additional bundle size. Switch to the `Button` component and add a ' +\r\n      'prop `icon`.'\r\n    ),\r\n  };\r\n\r\n  static defaultProps = {\r\n    type: 'button',\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      iconClassName,\r\n      children,\r\n      tooltip,\r\n      floating,\r\n      ...props\r\n    } = this.props;\r\n    delete props.tooltipLabel;\r\n    delete props.tooltipPosition;\r\n\r\n    return (\r\n      <Button {...props} icon={!floating} floating={floating}>\r\n        {tooltip}\r\n        <FontIcon iconClassName={iconClassName}>{children}</FontIcon>\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default injectTooltip(IconButton);\r\n"]}