{"version":3,"sources":["../../src/js/Buttons/Button.js"],"names":["Button","nextProps","props","disabled","state","hover","setState","nextState","pressed","_timeout","setTimeout","_attemptedBlur","clearTimeout","_snackbarTimeout","window","removeEventListener","_blur","className","iconClassName","iconChildren","iconBefore","href","primary","secondary","flat","raised","floating","mini","fixed","fixedPosition","component","ink","tooltip","icon","forceIconSize","forceIconFontSize","type","children","swapTheming","svg","propIconEl","iconEl","label","snackbar","snackbarType","iconBtnType","visibleChildren","resolvedIconChildren","el","Children","only","cloneElement","inherit","error","Component","_handleTouchStart","_handleTouchEnd","_handleMouseDown","_handleMouseUp","_handleKeyDown","_handleKeyUp","_handleMouseEnter","_handleMouseLeave","propTypes","style","object","string","bool","node","element","propName","args","c","validator","oneOf","isRequired","oneOfType","func","onClick","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","onKeyUp","onKeyDown","onMouseEnter","onMouseLeave","tooltipLabel","tooltipDelay","number","tooltipPosition","_typeValidator","defined","filter","d","len","length","Error","forceSize","noIcon","defaultProps","e","which","keyCode","addEventListener","_animateForSnackbar","multiline","leaveTimeout"],"mappings":"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","file":"Button.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport deprecated from 'react-prop-types/lib/deprecated';\r\n\r\nimport { TAB } from '../constants/keyCodes';\r\nimport TICK from '../constants/CSSTransitionGroupTick';\r\nimport getBtnStyles from './getBtnStyles';\r\nimport invalidIf from '../utils/PropTypes/invalidIf';\r\nimport captureNextEvent from '../utils/EventUtils/captureNextEvent';\r\nimport FontIcon from '../FontIcons/FontIcon';\r\nimport IconSeparator from '../Helpers/IconSeparator';\r\nimport injectInk from '../Inks/injectInk';\r\nimport injectTooltip from '../Tooltips/injectTooltip';\r\n\r\n/**\r\n * The `Button` component can either be a `FlatButton`, `RaisedButton`, `IconButton`, or a\r\n * `FloatingButton`.\r\n *\r\n * A `FlatButton` is a button with no depth on the screen that is ideally used in `Dialog`s\r\n * or `CardActions`. The text can be optionally styled with the `primary` or `secondary` colors.\r\n *\r\n * A `RaisedButton` is a button with some depth to help actions have more prominent in flat\r\n * layouts or layouts with varying content. The background can be styled by the light/dark theme,\r\n * or optionally the `primary` or `secondary` color.\r\n *\r\n * An `IconButton` is a button that just displays a `FontIcon` as the child in a circle.\r\n * The `FontIcon` can be optionally styled with the `primary` or `secondary` color.\r\n *\r\n * A `FloatingButton` is a special case. Woop\r\n */\r\nclass Button extends PureComponent {\r\n  static propTypes = {\r\n    /**\r\n     * An optional style to apply to the button.\r\n     */\r\n    style: PropTypes.object,\r\n\r\n    /**\r\n     * An optional className to apply to the button.\r\n     */\r\n    className: PropTypes.string,\r\n\r\n    /**\r\n     * A boolean if the icon should appear before or after the text for a `FlatButton` or\r\n     * a `RaisedButton`.\r\n     */\r\n    iconBefore: PropTypes.bool,\r\n\r\n    /**\r\n     * Any children used to display the button. When the button type is `icon` or `floating`,\r\n     * this can be used to render the `FontIcon` instead of the `iconChildren` prop.\r\n     *\r\n     * When the button type is `raised` or `flat`, this will be the label or any other elements\r\n     * you'd like to display in the button. This can work hand-in-hand with the `iconClassName`\r\n     * and `iconChildren` to make a button with an icon and text.\r\n     */\r\n    children: PropTypes.node,\r\n\r\n    /**\r\n     * An icon className to use in an optional `FontIcon` in any version of the button. This will\r\n     * be used with the `children` prop. If the `floating` or `icon` props are set to true, this or\r\n     * the children are required.\r\n     *\r\n     * @see {@link #iconEl}\r\n     */\r\n    iconClassName: PropTypes.string,\r\n\r\n    /**\r\n     * Any children to use to display an icon in the button.\r\n     *\r\n     * @see {@link #iconEl}\r\n     */\r\n    iconChildren: PropTypes.node,\r\n\r\n    /**\r\n     * An optional icon to display. This prop is recommended over the `iconClassName` and `iconChildren`\r\n     * props since it allows more control for you. There is also better SVG support since it won't wrap\r\n     * the SVG with the `FontIcon` element.\r\n     */\r\n    iconEl: PropTypes.element,\r\n\r\n    /**\r\n     * The type for the button. This is required when the `component` prop is not\r\n     * the 'a' tag, a `function`, or when the `href` prop is defined.\r\n     */\r\n    type: (props, propName, component, ...args) => {\r\n      const c = props.component;\r\n      let validator = PropTypes.oneOf(['button', 'submit', 'reset']);\r\n      if (!props.href && c !== 'a' && typeof c !== 'function') {\r\n        validator = validator.isRequired;\r\n      }\r\n\r\n      return validator(props, propName, component, ...args);\r\n    },\r\n\r\n    /**\r\n     * Boolean if the button should be styled with the primary color.\r\n     */\r\n    primary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the button should be styled with the secondary color.\r\n     */\r\n    secondary: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the button is disabled.\r\n     */\r\n    disabled: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional href for the button. This will style the `a` tag as a button.\r\n     */\r\n    href: PropTypes.string,\r\n\r\n    /**\r\n     * An optional component to render the button as. This allows you to get all the styles and functionality\r\n     * of the Button, but as a custom React component.\r\n     */\r\n    component: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.func,\r\n    ]),\r\n\r\n    /**\r\n     * An optional function to call when the `click` event is triggered.\r\n     */\r\n    onClick: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `touchstart` event is triggered.\r\n     */\r\n    onTouchStart: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `touchend` event is triggered.\r\n     */\r\n    onTouchEnd: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `mousedown` event is triggered.\r\n     */\r\n    onMouseDown: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `mouseup` event is triggered.\r\n     */\r\n    onMouseUp: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `keyup` event is triggered.\r\n     */\r\n    onKeyUp: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `keydown` event is triggered.\r\n     */\r\n    onKeyDown: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `mouseenter` event is triggered.\r\n     */\r\n    onMouseEnter: PropTypes.func,\r\n\r\n    /**\r\n     * An optional function to call when the `mouseleave` event is triggered.\r\n     */\r\n    onMouseLeave: PropTypes.func,\r\n\r\n    /**\r\n     * Boolean if the `FloatingButton` should be fixed to the page. This prop can\r\n     * only be enabled if the `floating` prop is true.\r\n     */\r\n    fixed: invalidIf(PropTypes.bool, 'flat', 'raised', 'icon'),\r\n\r\n    /**\r\n     * The position that the `FloatingButton` should be fixed to the page. It will\r\n     * either be fixed to the top right, top left, bottom right, or bottom left of\r\n     * the page. This prop is only used if the `floating` prop and `fixed` prop are\r\n     * `true`.\r\n     */\r\n    fixedPosition: PropTypes.oneOf(['tr', 'tl', 'br', 'bl']).isRequired,\r\n\r\n    /**\r\n     * Boolean if the `FloatingButton` should be `mini`. This prop can only be used\r\n     * when the `floating` prop is true.\r\n     */\r\n    mini: invalidIf(PropTypes.bool, 'flat', 'raised', 'icon'),\r\n\r\n    /**\r\n     * Boolean if the `Button` should be styled as a `FlatButton`.\r\n     */\r\n    flat: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the `Button` should be styled as a `RaisedButton`.\r\n     */\r\n    raised: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the `Button` should be styled as a `IconButton`.\r\n     *\r\n     * @see {@link #svg}\r\n     */\r\n    icon: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the `Button` should be styled as a `FloatingButton`.\r\n     *\r\n     * @see {@link #svg}\r\n     */\r\n    floating: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the theming of `primary` or `secondary` should be swapped. By default,\r\n     * only flat and icon buttons can gain the theme colors as text color while the raised\r\n     * and floating buttons can gain the theme colors as background color.\r\n     *\r\n     * If this prop is enabled, the flat and icon buttons will gain the theme background colors\r\n     * while the raised and icon will gain the theme text colors instead.\r\n     *\r\n     * @see {@link #primary}\r\n     * @see {@link #secondary}\r\n     */\r\n    swapTheming: PropTypes.bool,\r\n\r\n    /**\r\n     * An optional label to use for the tooltip. This is normally only used for\r\n     * `IconButton`s or `FloatingButton`s, but can be used on `FlatButton`s and\r\n     * `RaisedButton`s if you wish. Knock yourself out!\r\n     *\r\n     * If this prop is omitted, no tooltip will be included.\r\n     */\r\n    tooltipLabel: PropTypes.node,\r\n\r\n    /**\r\n     * An optional delay before the tooltip appears on mouse over.\r\n     */\r\n    tooltipDelay: PropTypes.number,\r\n\r\n    /**\r\n     * The position for the tooltip.\r\n     */\r\n    tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\r\n\r\n    /**\r\n     * An ink from `injectInk`.\r\n     * @access private\r\n     */\r\n    ink: PropTypes.node,\r\n\r\n    /**\r\n     * A tooltip from `injectTooltip`\r\n     * @access private\r\n     */\r\n    tooltip: PropTypes.node,\r\n\r\n    /**\r\n     * Custom validator for verifying that only one type is defined and that\r\n     * at one type is defined.\r\n     */\r\n    _typeValidator: (props, propName, component) => {\r\n      const { flat, raised, icon, floating } = props;\r\n\r\n      const defined = [raised, flat, icon, floating].filter(d => d);\r\n      const len = defined.length;\r\n      if (len === 0) {\r\n        return new Error(\r\n          `A material design button type must be specified in the \\`${component}\\` but none were ` +\r\n          'given. Valid types are `flat`, `raised`, `icon`, or `floating`.'\r\n        );\r\n      } else if (len !== 1) {\r\n        return new Error(\r\n          `Only one material design button type may be specified in the \\`${component}\\` but \\`${len}\\` ` +\r\n          'were given. Select only one of `flat`, `raised`, `icon`, or `floating`.'\r\n        );\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Either a boolean that will enforce the 24x24 size of the font icon or a number of the size\r\n     * to enforce. This is useful when using other font icon libraries that do not have a consistent\r\n     * size.\r\n     */\r\n    forceIconSize: FontIcon.propTypes.forceSize,\r\n\r\n    /**\r\n     * Boolean if the `forceIconSize` prop should also force the `font-size` instead of only `width` and `height`.\r\n     */\r\n    forceIconFontSize: PropTypes.bool,\r\n\r\n    /**\r\n     * Boolean if the child is an SVGIcon or FontIcon when using the `icon` or `floating` props. This is only needed\r\n     * until the next release when the `label` migration can be removed.\r\n     */\r\n    svg: PropTypes.bool,\r\n\r\n    label: deprecated(PropTypes.node, 'Use the `children` prop instead'),\r\n    noIcon: deprecated(\r\n      PropTypes.bool,\r\n      'This has been removed during the alpha release. Children will always attempt to be rendered outside of an ' +\r\n      'icon by default for flat and raised buttons'\r\n    ),\r\n  };\r\n\r\n  static defaultProps = {\r\n    type: 'button',\r\n    iconBefore: true,\r\n    fixedPosition: 'br',\r\n  };\r\n\r\n  state = {\r\n    pressed: false,\r\n    snackbar: false,\r\n    snackbarType: null,\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.disabled && !nextProps.disabled && this.state.hover) {\r\n      this.setState({ hover: false });\r\n    }\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    if (!this.state.pressed && nextState.pressed) {\r\n      this._timeout = setTimeout(() => {\r\n        this._timeout = null;\r\n        if (this._attemptedBlur) {\r\n          this._attemptedBlur = false;\r\n\r\n          this.setState({ pressed: false });\r\n        }\r\n      }, 450);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this._timeout) {\r\n      clearTimeout(this._timeout);\r\n    }\r\n\r\n    if (this._snackbarTimeout) {\r\n      clearTimeout(this._snackbarTimeout);\r\n    }\r\n\r\n    window.removeEventListener('click', this._blur);\r\n  }\r\n\r\n  _blur = () => {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    if (this._timeout) {\r\n      this._attemptedBlur = true;\r\n    } else {\r\n      this.setState({ pressed: false });\r\n    }\r\n  };\r\n\r\n  _handleMouseUp = (e) => {\r\n    if (this.props.onMouseUp) {\r\n      this.props.onMouseUp(e);\r\n    }\r\n\r\n    this._blur();\r\n  };\r\n\r\n  _handleMouseDown = (e) => {\r\n    if (this.props.onMouseDown) {\r\n      this.props.onMouseDown(e);\r\n    }\r\n\r\n    if (!this.props.disabled) {\r\n      this.setState({ pressed: true });\r\n    }\r\n  };\r\n\r\n  _handleTouchStart = (e) => {\r\n    if (this.props.onTouchStart) {\r\n      this.props.onTouchStart(e);\r\n    }\r\n\r\n    if (!this.props.disabled) {\r\n      this.setState({ pressed: true });\r\n    }\r\n  };\r\n\r\n  _handleTouchEnd = (e) => {\r\n    if (this.props.onTouchEnd) {\r\n      this.props.onTouchEnd(e);\r\n    }\r\n\r\n    this._blur();\r\n    captureNextEvent('mouseover');\r\n  };\r\n\r\n  _handleKeyUp = (e) => {\r\n    if (this.props.onKeyUp) {\r\n      this.props.onKeyUp(e);\r\n    }\r\n\r\n\r\n    if ((e.which || e.keyCode) === TAB) {\r\n      window.addEventListener('click', this._blur);\r\n      this.setState({ pressed: true });\r\n    }\r\n  };\r\n\r\n  _handleKeyDown = (e) => {\r\n    if (this.props.onKeyDown) {\r\n      this.props.onKeyDown(e);\r\n    }\r\n\r\n    if ((e.which || e.keyCode) === TAB) {\r\n      window.removeEventListener('click', this._blur);\r\n      this.setState({ pressed: false });\r\n    }\r\n  };\r\n\r\n  _handleMouseEnter = (e) => {\r\n    if (this.props.onMouseEnter) {\r\n      this.props.onMouseEnter(e);\r\n    }\r\n\r\n    if (!this.props.disabled) {\r\n      this.setState({ hover: true });\r\n    }\r\n  };\r\n\r\n  _handleMouseLeave = (e) => {\r\n    if (this.props.onMouseLeave) {\r\n      this.props.onMouseLeave(e);\r\n    }\r\n\r\n    if (!this.props.disabled) {\r\n      this.setState({ hover: false });\r\n    }\r\n  };\r\n\r\n  _animateForSnackbar = (multiline, leaveTimeout) => {\r\n    if (typeof leaveTimeout === 'number') {\r\n      this._snackbarTimeout = setTimeout(() => {\r\n        this._snackbarTimeout = setTimeout(() => {\r\n          this._snackbarTimeout = null;\r\n\r\n          this.setState({ snackbar: false });\r\n        }, leaveTimeout + 150);\r\n\r\n        this.setState({ snackbarType: null });\r\n      }, TICK);\r\n    } else {\r\n      this._snackbarTimeout = setTimeout(() => {\r\n        this._snackbarTimeout = null;\r\n\r\n        this.setState({ snackbar: true, snackbarType: multiline ? 'multiline-' : '' });\r\n      }, TICK);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      className,\r\n      iconClassName,\r\n      iconChildren,\r\n      iconBefore,\r\n      href,\r\n      primary,\r\n      secondary,\r\n      flat,\r\n      raised,\r\n      floating,\r\n      mini,\r\n      fixed,\r\n      fixedPosition,\r\n      disabled,\r\n      component,\r\n      ink,\r\n      tooltip,\r\n      icon,\r\n      forceIconSize,\r\n      forceIconFontSize,\r\n      type,\r\n      children,\r\n      swapTheming,\r\n      svg,\r\n      iconEl: propIconEl, // eslint-disable-line no-unused-vars\r\n      label, // deprecated\r\n      ...props\r\n    } = this.props;\r\n    let { iconEl } = this.props;\r\n\r\n    if (!href) {\r\n      props.type = type;\r\n    }\r\n\r\n    const { pressed, hover, snackbar, snackbarType } = this.state;\r\n    const iconBtnType = icon || floating;\r\n\r\n    let visibleChildren;\r\n    if (!iconEl && !svg && (iconClassName || iconChildren || iconBtnType || (label && children))) {\r\n      let resolvedIconChildren = iconChildren;\r\n      if (typeof iconChildren === 'undefined') {\r\n        resolvedIconChildren = iconBtnType || label ? children : null;\r\n      }\r\n\r\n      iconEl = (\r\n        <FontIcon iconClassName={iconClassName} forceSize={forceIconSize} forceFontSize={forceIconFontSize} inherit>\r\n          {resolvedIconChildren}\r\n        </FontIcon>\r\n      );\r\n    } else if (iconEl || svg) {\r\n      const el = React.Children.only(iconEl || children);\r\n      iconEl = React.cloneElement(el, { inherit: !el.props.error });\r\n    }\r\n\r\n    if (!iconBtnType) {\r\n      visibleChildren = label || children;\r\n      if (iconEl) {\r\n        visibleChildren = <IconSeparator label={visibleChildren} iconBefore={iconBefore}>{iconEl}</IconSeparator>;\r\n      }\r\n    } else {\r\n      visibleChildren = iconEl;\r\n    }\r\n\r\n    const Component = component || (href ? 'a' : 'button');\r\n    return (\r\n      <Component\r\n        {...props}\r\n        disabled={disabled}\r\n        onTouchStart={this._handleTouchStart}\r\n        onTouchEnd={this._handleTouchEnd}\r\n        onMouseDown={this._handleMouseDown}\r\n        onMouseUp={this._handleMouseUp}\r\n        onKeyDown={this._handleKeyDown}\r\n        onKeyUp={this._handleKeyUp}\r\n        onMouseEnter={this._handleMouseEnter}\r\n        onMouseLeave={this._handleMouseLeave}\r\n        href={href}\r\n        className={getBtnStyles({\r\n          flat,\r\n          raised,\r\n          icon,\r\n          floating,\r\n          disabled,\r\n          primary,\r\n          secondary,\r\n          hover,\r\n          swapTheming,\r\n          pressed,\r\n          mini,\r\n          fixed,\r\n          fixedPosition,\r\n        }, {\r\n          'md-btn--tooltip': tooltip,\r\n          'md-btn--snackbar-floating': snackbar,\r\n          [`md-btn--snackbar-floating-${snackbarType}adjust`]: snackbar && snackbarType !== null,\r\n        }, 'md-inline-block', className)}\r\n      >\r\n        {ink}\r\n        {tooltip}\r\n        {visibleChildren}\r\n      </Component>\r\n    );\r\n  }\r\n}\r\n\r\nexport default injectInk(injectTooltip(Button));\r\n"]}